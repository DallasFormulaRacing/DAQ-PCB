
DAQ_System_Rev1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000139b8  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b44  08013b68  08013b68  00014b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080146ac  080146ac  00016080  2**0
                  CONTENTS
  4 .ARM          00000008  080146ac  080146ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080146b4  080146b4  00016080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080146b4  080146b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080146b8  080146b8  000156b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080146bc  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00016080  2**0
                  CONTENTS
 10 .bss          00007510  20000080  20000080  00016080  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20007590  20007590  00016080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00016080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025897  00000000  00000000  000160b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005cc5  00000000  00000000  0003b947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf0  00000000  00000000  00041610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001652  00000000  00000000  00043300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b21c  00000000  00000000  00044952  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a32e  00000000  00000000  0006fb6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8ff4  00000000  00000000  00099e9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00182e90  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ed0  00000000  00000000  00182ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0018ada4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08013b50 	.word	0x08013b50

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	08013b50 	.word	0x08013b50

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
//	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr

08000bd0 <Mount_USB>:



void Mount_USB (void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	490a      	ldr	r1, [pc, #40]	@ (8000c00 <Mount_USB+0x30>)
 8000bd8:	480a      	ldr	r0, [pc, #40]	@ (8000c04 <Mount_USB+0x34>)
 8000bda:	f00c fd1d 	bl	800d618 <f_mount>
 8000bde:	4603      	mov	r3, r0
 8000be0:	461a      	mov	r2, r3
 8000be2:	4b09      	ldr	r3, [pc, #36]	@ (8000c08 <Mount_USB+0x38>)
 8000be4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000be6:	4b08      	ldr	r3, [pc, #32]	@ (8000c08 <Mount_USB+0x38>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <Mount_USB+0x26>
 8000bee:	4807      	ldr	r0, [pc, #28]	@ (8000c0c <Mount_USB+0x3c>)
 8000bf0:	f7ff ffe4 	bl	8000bbc <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000bf4:	e002      	b.n	8000bfc <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000bf6:	4806      	ldr	r0, [pc, #24]	@ (8000c10 <Mount_USB+0x40>)
 8000bf8:	f7ff ffe0 	bl	8000bbc <Send_Uart>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000230 	.word	0x20000230
 8000c04:	20000234 	.word	0x20000234
 8000c08:	200001c0 	.word	0x200001c0
 8000c0c:	08013b68 	.word	0x08013b68
 8000c10:	08013b88 	.word	0x08013b88

08000c14 <Unmount_USB>:

void Unmount_USB (void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	490a      	ldr	r1, [pc, #40]	@ (8000c44 <Unmount_USB+0x30>)
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f00c fcfb 	bl	800d618 <f_mount>
 8000c22:	4603      	mov	r3, r0
 8000c24:	461a      	mov	r2, r3
 8000c26:	4b08      	ldr	r3, [pc, #32]	@ (8000c48 <Unmount_USB+0x34>)
 8000c28:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000c2a:	4b07      	ldr	r3, [pc, #28]	@ (8000c48 <Unmount_USB+0x34>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d103      	bne.n	8000c3a <Unmount_USB+0x26>
 8000c32:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <Unmount_USB+0x38>)
 8000c34:	f7ff ffc2 	bl	8000bbc <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000c38:	e002      	b.n	8000c40 <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <Unmount_USB+0x3c>)
 8000c3c:	f7ff ffbe 	bl	8000bbc <Send_Uart>
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000230 	.word	0x20000230
 8000c48:	200001c0 	.word	0x200001c0
 8000c4c:	08013ba8 	.word	0x08013ba8
 8000c50:	08013bcc 	.word	0x08013bcc

08000c54 <Scan_USB>:

/* Start node to be scanned (***also used as work area***) */
FRESULT Scan_USB (char* pat)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b09a      	sub	sp, #104	@ 0x68
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
    DIR dir;
    UINT i;
    char *path = malloc(20*sizeof (char));
 8000c5c:	2014      	movs	r0, #20
 8000c5e:	f012 fac7 	bl	80131f0 <malloc>
 8000c62:	4603      	mov	r3, r0
 8000c64:	667b      	str	r3, [r7, #100]	@ 0x64
    sprintf (path, "%s",pat);
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	4944      	ldr	r1, [pc, #272]	@ (8000d7c <Scan_USB+0x128>)
 8000c6a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000c6c:	f012 fb7e 	bl	801336c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 8000c70:	f107 0308 	add.w	r3, r7, #8
 8000c74:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8000c76:	4618      	mov	r0, r3
 8000c78:	f00d fd36 	bl	800e6e8 <f_opendir>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	461a      	mov	r2, r3
 8000c80:	4b3f      	ldr	r3, [pc, #252]	@ (8000d80 <Scan_USB+0x12c>)
 8000c82:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8000c84:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <Scan_USB+0x12c>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d16e      	bne.n	8000d6a <Scan_USB+0x116>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000c8c:	f107 0308 	add.w	r3, r7, #8
 8000c90:	493c      	ldr	r1, [pc, #240]	@ (8000d84 <Scan_USB+0x130>)
 8000c92:	4618      	mov	r0, r3
 8000c94:	f00d fe64 	bl	800e960 <f_readdir>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b38      	ldr	r3, [pc, #224]	@ (8000d80 <Scan_USB+0x12c>)
 8000c9e:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || USBHfno.fname[0] == 0) break;  /* Break on error or end of dir */
 8000ca0:	4b37      	ldr	r3, [pc, #220]	@ (8000d80 <Scan_USB+0x12c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d15b      	bne.n	8000d60 <Scan_USB+0x10c>
 8000ca8:	4b36      	ldr	r3, [pc, #216]	@ (8000d84 <Scan_USB+0x130>)
 8000caa:	7e9b      	ldrb	r3, [r3, #26]
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d057      	beq.n	8000d60 <Scan_USB+0x10c>
            if (USBHfno.fattrib & AM_DIR)     /* It is a directory */
 8000cb0:	4b34      	ldr	r3, [pc, #208]	@ (8000d84 <Scan_USB+0x130>)
 8000cb2:	7b1b      	ldrb	r3, [r3, #12]
 8000cb4:	f003 0310 	and.w	r3, r3, #16
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d03a      	beq.n	8000d32 <Scan_USB+0xde>
            {
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000cbc:	4932      	ldr	r1, [pc, #200]	@ (8000d88 <Scan_USB+0x134>)
 8000cbe:	4833      	ldr	r0, [pc, #204]	@ (8000d8c <Scan_USB+0x138>)
 8000cc0:	f7ff fa96 	bl	80001f0 <strcmp>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d045      	beq.n	8000d56 <Scan_USB+0x102>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000cca:	492f      	ldr	r1, [pc, #188]	@ (8000d88 <Scan_USB+0x134>)
 8000ccc:	4830      	ldr	r0, [pc, #192]	@ (8000d90 <Scan_USB+0x13c>)
 8000cce:	f7ff fa8f 	bl	80001f0 <strcmp>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d040      	beq.n	8000d5a <Scan_USB+0x106>
            	char *buf = malloc(30*sizeof(char));
 8000cd8:	201e      	movs	r0, #30
 8000cda:	f012 fa89 	bl	80131f0 <malloc>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	65fb      	str	r3, [r7, #92]	@ 0x5c
            	sprintf (buf, "Dir: %s\r\n", USBHfno.fname);
 8000ce2:	4a29      	ldr	r2, [pc, #164]	@ (8000d88 <Scan_USB+0x134>)
 8000ce4:	492b      	ldr	r1, [pc, #172]	@ (8000d94 <Scan_USB+0x140>)
 8000ce6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000ce8:	f012 fb40 	bl	801336c <siprintf>
            	Send_Uart(buf);
 8000cec:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000cee:	f7ff ff65 	bl	8000bbc <Send_Uart>
            	free(buf);
 8000cf2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8000cf4:	f012 fa84 	bl	8013200 <free>
                i = strlen(path);
 8000cf8:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000cfa:	f7ff fa83 	bl	8000204 <strlen>
 8000cfe:	65b8      	str	r0, [r7, #88]	@ 0x58
                sprintf(&path[i], "/%s", USBHfno.fname);
 8000d00:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d04:	4413      	add	r3, r2
 8000d06:	4a20      	ldr	r2, [pc, #128]	@ (8000d88 <Scan_USB+0x134>)
 8000d08:	4923      	ldr	r1, [pc, #140]	@ (8000d98 <Scan_USB+0x144>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f012 fb2e 	bl	801336c <siprintf>
                fresult = Scan_USB(path);                     /* Enter the directory */
 8000d10:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000d12:	f7ff ff9f 	bl	8000c54 <Scan_USB>
 8000d16:	4603      	mov	r3, r0
 8000d18:	461a      	mov	r2, r3
 8000d1a:	4b19      	ldr	r3, [pc, #100]	@ (8000d80 <Scan_USB+0x12c>)
 8000d1c:	701a      	strb	r2, [r3, #0]
                if (fresult != FR_OK) break;
 8000d1e:	4b18      	ldr	r3, [pc, #96]	@ (8000d80 <Scan_USB+0x12c>)
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d11b      	bne.n	8000d5e <Scan_USB+0x10a>
                path[i] = 0;
 8000d26:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000d2a:	4413      	add	r3, r2
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e7ac      	b.n	8000c8c <Scan_USB+0x38>
            }
            else
            {   /* It is a file. */
           	   char *buf = malloc(30*sizeof(char));
 8000d32:	201e      	movs	r0, #30
 8000d34:	f012 fa5c 	bl	80131f0 <malloc>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	663b      	str	r3, [r7, #96]	@ 0x60
               sprintf(buf,"File: %s/%s\n", path, USBHfno.fname);
 8000d3c:	4b12      	ldr	r3, [pc, #72]	@ (8000d88 <Scan_USB+0x134>)
 8000d3e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8000d40:	4916      	ldr	r1, [pc, #88]	@ (8000d9c <Scan_USB+0x148>)
 8000d42:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d44:	f012 fb12 	bl	801336c <siprintf>
               Send_Uart(buf);
 8000d48:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d4a:	f7ff ff37 	bl	8000bbc <Send_Uart>
               free(buf);
 8000d4e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8000d50:	f012 fa56 	bl	8013200 <free>
 8000d54:	e79a      	b.n	8000c8c <Scan_USB+0x38>
            	if (!(strcmp ("SYSTEM~1", USBHfno.fname))) continue;
 8000d56:	bf00      	nop
 8000d58:	e798      	b.n	8000c8c <Scan_USB+0x38>
            	if (!(strcmp("System Volume Information", USBHfno.fname))) continue;
 8000d5a:	bf00      	nop
            fresult = f_readdir(&dir, &USBHfno);                   /* Read a directory item */
 8000d5c:	e796      	b.n	8000c8c <Scan_USB+0x38>
                if (fresult != FR_OK) break;
 8000d5e:	bf00      	nop
            }
        }
        f_closedir(&dir);
 8000d60:	f107 0308 	add.w	r3, r7, #8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00d fdd0 	bl	800e90a <f_closedir>
    }
    free(path);
 8000d6a:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8000d6c:	f012 fa48 	bl	8013200 <free>
    return fresult;
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <Scan_USB+0x12c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3768      	adds	r7, #104	@ 0x68
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	08013bec 	.word	0x08013bec
 8000d80:	200001c0 	.word	0x200001c0
 8000d84:	200000a0 	.word	0x200000a0
 8000d88:	200000ba 	.word	0x200000ba
 8000d8c:	08013bf0 	.word	0x08013bf0
 8000d90:	08013bfc 	.word	0x08013bfc
 8000d94:	08013c18 	.word	0x08013c18
 8000d98:	08013c24 	.word	0x08013c24
 8000d9c:	08013c28 	.word	0x08013c28

08000da0 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b088      	sub	sp, #32
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 8000daa:	4955      	ldr	r1, [pc, #340]	@ (8000f00 <Write_File+0x160>)
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f00d fe57 	bl	800ea60 <f_stat>
 8000db2:	4603      	mov	r3, r0
 8000db4:	461a      	mov	r2, r3
 8000db6:	4b53      	ldr	r3, [pc, #332]	@ (8000f04 <Write_File+0x164>)
 8000db8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000dba:	4b52      	ldr	r3, [pc, #328]	@ (8000f04 <Write_File+0x164>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d012      	beq.n	8000de8 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8000dc2:	2064      	movs	r0, #100	@ 0x64
 8000dc4:	f012 fa14 	bl	80131f0 <malloc>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	494e      	ldr	r1, [pc, #312]	@ (8000f08 <Write_File+0x168>)
 8000dd0:	68b8      	ldr	r0, [r7, #8]
 8000dd2:	f012 facb 	bl	801336c <siprintf>
		Send_Uart (buf);
 8000dd6:	68b8      	ldr	r0, [r7, #8]
 8000dd8:	f7ff fef0 	bl	8000bbc <Send_Uart>
	    free(buf);
 8000ddc:	68b8      	ldr	r0, [r7, #8]
 8000dde:	f012 fa0f 	bl	8013200 <free>
	    return fresult;
 8000de2:	4b48      	ldr	r3, [pc, #288]	@ (8000f04 <Write_File+0x164>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	e087      	b.n	8000ef8 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 8000de8:	2202      	movs	r2, #2
 8000dea:	6879      	ldr	r1, [r7, #4]
 8000dec:	4847      	ldr	r0, [pc, #284]	@ (8000f0c <Write_File+0x16c>)
 8000dee:	f00c fc77 	bl	800d6e0 <f_open>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	4b43      	ldr	r3, [pc, #268]	@ (8000f04 <Write_File+0x164>)
 8000df8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000dfa:	4b42      	ldr	r3, [pc, #264]	@ (8000f04 <Write_File+0x164>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d015      	beq.n	8000e2e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e02:	2064      	movs	r0, #100	@ 0x64
 8000e04:	f012 f9f4 	bl	80131f0 <malloc>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000e0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000f04 <Write_File+0x164>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	461a      	mov	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	493e      	ldr	r1, [pc, #248]	@ (8000f10 <Write_File+0x170>)
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f012 faa8 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 8000e1c:	68f8      	ldr	r0, [r7, #12]
 8000e1e:	f7ff fecd 	bl	8000bbc <Send_Uart>
	        free(buf);
 8000e22:	68f8      	ldr	r0, [r7, #12]
 8000e24:	f012 f9ec 	bl	8013200 <free>
	        return fresult;
 8000e28:	4b36      	ldr	r3, [pc, #216]	@ (8000f04 <Write_File+0x164>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	e064      	b.n	8000ef8 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000e2e:	2064      	movs	r0, #100	@ 0x64
 8000e30:	f012 f9de 	bl	80131f0 <malloc>
 8000e34:	4603      	mov	r3, r0
 8000e36:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000e38:	687a      	ldr	r2, [r7, #4]
 8000e3a:	4936      	ldr	r1, [pc, #216]	@ (8000f14 <Write_File+0x174>)
 8000e3c:	69f8      	ldr	r0, [r7, #28]
 8000e3e:	f012 fa95 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 8000e42:	69f8      	ldr	r0, [r7, #28]
 8000e44:	f7ff feba 	bl	8000bbc <Send_Uart>
	        free(buf);
 8000e48:	69f8      	ldr	r0, [r7, #28]
 8000e4a:	f012 f9d9 	bl	8013200 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 8000e4e:	6838      	ldr	r0, [r7, #0]
 8000e50:	f7ff f9d8 	bl	8000204 <strlen>
 8000e54:	4602      	mov	r2, r0
 8000e56:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <Write_File+0x178>)
 8000e58:	6839      	ldr	r1, [r7, #0]
 8000e5a:	482c      	ldr	r0, [pc, #176]	@ (8000f0c <Write_File+0x16c>)
 8000e5c:	f00d f859 	bl	800df12 <f_write>
 8000e60:	4603      	mov	r3, r0
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b27      	ldr	r3, [pc, #156]	@ (8000f04 <Write_File+0x164>)
 8000e66:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000e68:	4b26      	ldr	r3, [pc, #152]	@ (8000f04 <Write_File+0x164>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d012      	beq.n	8000e96 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000e70:	2064      	movs	r0, #100	@ 0x64
 8000e72:	f012 f9bd 	bl	80131f0 <malloc>
 8000e76:	4603      	mov	r3, r0
 8000e78:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 8000e7a:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <Write_File+0x164>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4926      	ldr	r1, [pc, #152]	@ (8000f1c <Write_File+0x17c>)
 8000e84:	69b8      	ldr	r0, [r7, #24]
 8000e86:	f012 fa71 	bl	801336c <siprintf>
	    		Send_Uart(buf);
 8000e8a:	69b8      	ldr	r0, [r7, #24]
 8000e8c:	f7ff fe96 	bl	8000bbc <Send_Uart>
	    		free(buf);
 8000e90:	69b8      	ldr	r0, [r7, #24]
 8000e92:	f012 f9b5 	bl	8013200 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000e96:	481d      	ldr	r0, [pc, #116]	@ (8000f0c <Write_File+0x16c>)
 8000e98:	f00d fbf7 	bl	800e68a <f_close>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b18      	ldr	r3, [pc, #96]	@ (8000f04 <Write_File+0x164>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <Write_File+0x164>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d013      	beq.n	8000ed4 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000eac:	2064      	movs	r0, #100	@ 0x64
 8000eae:	f012 f99f 	bl	80131f0 <malloc>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <Write_File+0x164>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	4918      	ldr	r1, [pc, #96]	@ (8000f20 <Write_File+0x180>)
 8000ec0:	6938      	ldr	r0, [r7, #16]
 8000ec2:	f012 fa53 	bl	801336c <siprintf>
	    		Send_Uart(buf);
 8000ec6:	6938      	ldr	r0, [r7, #16]
 8000ec8:	f7ff fe78 	bl	8000bbc <Send_Uart>
	    		free(buf);
 8000ecc:	6938      	ldr	r0, [r7, #16]
 8000ece:	f012 f997 	bl	8013200 <free>
 8000ed2:	e00f      	b.n	8000ef4 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000ed4:	2064      	movs	r0, #100	@ 0x64
 8000ed6:	f012 f98b 	bl	80131f0 <malloc>
 8000eda:	4603      	mov	r3, r0
 8000edc:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 8000ede:	687a      	ldr	r2, [r7, #4]
 8000ee0:	4910      	ldr	r1, [pc, #64]	@ (8000f24 <Write_File+0x184>)
 8000ee2:	6978      	ldr	r0, [r7, #20]
 8000ee4:	f012 fa42 	bl	801336c <siprintf>
	    		Send_Uart(buf);
 8000ee8:	6978      	ldr	r0, [r7, #20]
 8000eea:	f7ff fe67 	bl	8000bbc <Send_Uart>
	    		free(buf);
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f012 f986 	bl	8013200 <free>
	    	}
	    }
	    return fresult;
 8000ef4:	4b03      	ldr	r3, [pc, #12]	@ (8000f04 <Write_File+0x164>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
	}
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200000a0 	.word	0x200000a0
 8000f04:	200001c0 	.word	0x200001c0
 8000f08:	08013c3c 	.word	0x08013c3c
 8000f0c:	20001278 	.word	0x20001278
 8000f10:	08013c5c 	.word	0x08013c5c
 8000f14:	08013c84 	.word	0x08013c84
 8000f18:	200001c4 	.word	0x200001c4
 8000f1c:	08013cb0 	.word	0x08013cb0
 8000f20:	08013ce4 	.word	0x08013ce4
 8000f24:	08013d1c 	.word	0x08013d1c

08000f28 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b088      	sub	sp, #32
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000f30:	4943      	ldr	r1, [pc, #268]	@ (8001040 <Create_File+0x118>)
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f00d fd94 	bl	800ea60 <f_stat>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	461a      	mov	r2, r3
 8000f3c:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <Create_File+0x11c>)
 8000f3e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000f40:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <Create_File+0x11c>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d112      	bne.n	8000f6e <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000f48:	2064      	movs	r0, #100	@ 0x64
 8000f4a:	f012 f951 	bl	80131f0 <malloc>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	493c      	ldr	r1, [pc, #240]	@ (8001048 <Create_File+0x120>)
 8000f56:	68f8      	ldr	r0, [r7, #12]
 8000f58:	f012 fa08 	bl	801336c <siprintf>
		Send_Uart(buf);
 8000f5c:	68f8      	ldr	r0, [r7, #12]
 8000f5e:	f7ff fe2d 	bl	8000bbc <Send_Uart>
		free(buf);
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f012 f94c 	bl	8013200 <free>
	    return fresult;
 8000f68:	4b36      	ldr	r3, [pc, #216]	@ (8001044 <Create_File+0x11c>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	e063      	b.n	8001036 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000f6e:	220b      	movs	r2, #11
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	4836      	ldr	r0, [pc, #216]	@ (800104c <Create_File+0x124>)
 8000f74:	f00c fbb4 	bl	800d6e0 <f_open>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <Create_File+0x11c>)
 8000f7e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000f80:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <Create_File+0x11c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d015      	beq.n	8000fb4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000f88:	2064      	movs	r0, #100	@ 0x64
 8000f8a:	f012 f931 	bl	80131f0 <malloc>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000f92:	4b2c      	ldr	r3, [pc, #176]	@ (8001044 <Create_File+0x11c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	461a      	mov	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	492d      	ldr	r1, [pc, #180]	@ (8001050 <Create_File+0x128>)
 8000f9c:	6938      	ldr	r0, [r7, #16]
 8000f9e:	f012 f9e5 	bl	801336c <siprintf>
			Send_Uart(buf);
 8000fa2:	6938      	ldr	r0, [r7, #16]
 8000fa4:	f7ff fe0a 	bl	8000bbc <Send_Uart>
			free(buf);
 8000fa8:	6938      	ldr	r0, [r7, #16]
 8000faa:	f012 f929 	bl	8013200 <free>
		    return fresult;
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <Create_File+0x11c>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	e040      	b.n	8001036 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000fb4:	2064      	movs	r0, #100	@ 0x64
 8000fb6:	f012 f91b 	bl	80131f0 <malloc>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	4924      	ldr	r1, [pc, #144]	@ (8001054 <Create_File+0x12c>)
 8000fc2:	69f8      	ldr	r0, [r7, #28]
 8000fc4:	f012 f9d2 	bl	801336c <siprintf>
			Send_Uart(buf);
 8000fc8:	69f8      	ldr	r0, [r7, #28]
 8000fca:	f7ff fdf7 	bl	8000bbc <Send_Uart>
			free(buf);
 8000fce:	69f8      	ldr	r0, [r7, #28]
 8000fd0:	f012 f916 	bl	8013200 <free>
		}

		fresult = f_close(&USBHFile);
 8000fd4:	481d      	ldr	r0, [pc, #116]	@ (800104c <Create_File+0x124>)
 8000fd6:	f00d fb58 	bl	800e68a <f_close>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <Create_File+0x11c>)
 8000fe0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <Create_File+0x11c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d013      	beq.n	8001012 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000fea:	2064      	movs	r0, #100	@ 0x64
 8000fec:	f012 f900 	bl	80131f0 <malloc>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <Create_File+0x11c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4916      	ldr	r1, [pc, #88]	@ (8001058 <Create_File+0x130>)
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f012 f9b4 	bl	801336c <siprintf>
			Send_Uart(buf);
 8001004:	6978      	ldr	r0, [r7, #20]
 8001006:	f7ff fdd9 	bl	8000bbc <Send_Uart>
			free(buf);
 800100a:	6978      	ldr	r0, [r7, #20]
 800100c:	f012 f8f8 	bl	8013200 <free>
 8001010:	e00f      	b.n	8001032 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001012:	2064      	movs	r0, #100	@ 0x64
 8001014:	f012 f8ec 	bl	80131f0 <malloc>
 8001018:	4603      	mov	r3, r0
 800101a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	490f      	ldr	r1, [pc, #60]	@ (800105c <Create_File+0x134>)
 8001020:	69b8      	ldr	r0, [r7, #24]
 8001022:	f012 f9a3 	bl	801336c <siprintf>
			Send_Uart(buf);
 8001026:	69b8      	ldr	r0, [r7, #24]
 8001028:	f7ff fdc8 	bl	8000bbc <Send_Uart>
			free(buf);
 800102c:	69b8      	ldr	r0, [r7, #24]
 800102e:	f012 f8e7 	bl	8013200 <free>
		}
	}
    return fresult;
 8001032:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <Create_File+0x11c>)
 8001034:	781b      	ldrb	r3, [r3, #0]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3720      	adds	r7, #32
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	200000a0 	.word	0x200000a0
 8001044:	200001c0 	.word	0x200001c0
 8001048:	08013e10 	.word	0x08013e10
 800104c:	20001278 	.word	0x20001278
 8001050:	08013e48 	.word	0x08013e48
 8001054:	08013e70 	.word	0x08013e70
 8001058:	08013eb0 	.word	0x08013eb0
 800105c:	08013df0 	.word	0x08013df0

08001060 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 800106a:	495e      	ldr	r1, [pc, #376]	@ (80011e4 <Update_File+0x184>)
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f00d fcf7 	bl	800ea60 <f_stat>
 8001072:	4603      	mov	r3, r0
 8001074:	461a      	mov	r2, r3
 8001076:	4b5c      	ldr	r3, [pc, #368]	@ (80011e8 <Update_File+0x188>)
 8001078:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800107a:	4b5b      	ldr	r3, [pc, #364]	@ (80011e8 <Update_File+0x188>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d012      	beq.n	80010a8 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001082:	2064      	movs	r0, #100	@ 0x64
 8001084:	f012 f8b4 	bl	80131f0 <malloc>
 8001088:	4603      	mov	r3, r0
 800108a:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	4957      	ldr	r1, [pc, #348]	@ (80011ec <Update_File+0x18c>)
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f012 f96b 	bl	801336c <siprintf>
		Send_Uart (buf);
 8001096:	68f8      	ldr	r0, [r7, #12]
 8001098:	f7ff fd90 	bl	8000bbc <Send_Uart>
		free(buf);
 800109c:	68f8      	ldr	r0, [r7, #12]
 800109e:	f012 f8af 	bl	8013200 <free>
	    return fresult;
 80010a2:	4b51      	ldr	r3, [pc, #324]	@ (80011e8 <Update_File+0x188>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	e098      	b.n	80011da <Update_File+0x17a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_APPEND | FA_WRITE);
 80010a8:	2232      	movs	r2, #50	@ 0x32
 80010aa:	6879      	ldr	r1, [r7, #4]
 80010ac:	4850      	ldr	r0, [pc, #320]	@ (80011f0 <Update_File+0x190>)
 80010ae:	f00c fb17 	bl	800d6e0 <f_open>
 80010b2:	4603      	mov	r3, r0
 80010b4:	461a      	mov	r2, r3
 80010b6:	4b4c      	ldr	r3, [pc, #304]	@ (80011e8 <Update_File+0x188>)
 80010b8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80010ba:	4b4b      	ldr	r3, [pc, #300]	@ (80011e8 <Update_File+0x188>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d015      	beq.n	80010ee <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80010c2:	2064      	movs	r0, #100	@ 0x64
 80010c4:	f012 f894 	bl	80131f0 <malloc>
 80010c8:	4603      	mov	r3, r0
 80010ca:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80010cc:	4b46      	ldr	r3, [pc, #280]	@ (80011e8 <Update_File+0x188>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4947      	ldr	r1, [pc, #284]	@ (80011f4 <Update_File+0x194>)
 80010d6:	6938      	ldr	r0, [r7, #16]
 80010d8:	f012 f948 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 80010dc:	6938      	ldr	r0, [r7, #16]
 80010de:	f7ff fd6d 	bl	8000bbc <Send_Uart>
	        free(buf);
 80010e2:	6938      	ldr	r0, [r7, #16]
 80010e4:	f012 f88c 	bl	8013200 <free>
	        return fresult;
 80010e8:	4b3f      	ldr	r3, [pc, #252]	@ (80011e8 <Update_File+0x188>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	e075      	b.n	80011da <Update_File+0x17a>
	    }

    	char *buf = malloc(100*sizeof(char));
 80010ee:	2064      	movs	r0, #100	@ 0x64
 80010f0:	f012 f87e 	bl	80131f0 <malloc>
 80010f4:	4603      	mov	r3, r0
 80010f6:	627b      	str	r3, [r7, #36]	@ 0x24
    	sprintf (buf, "Opening file-->  *%s*  To UPDATE data in it\n", name);
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	493f      	ldr	r1, [pc, #252]	@ (80011f8 <Update_File+0x198>)
 80010fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80010fe:	f012 f935 	bl	801336c <siprintf>
    	Send_Uart(buf);
 8001102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001104:	f7ff fd5a 	bl	8000bbc <Send_Uart>
        free(buf);
 8001108:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800110a:	f012 f879 	bl	8013200 <free>

	    /* Writing text */
	    fresult = f_write(&USBHFile, data, strlen (data), &bw);
 800110e:	6838      	ldr	r0, [r7, #0]
 8001110:	f7ff f878 	bl	8000204 <strlen>
 8001114:	4602      	mov	r2, r0
 8001116:	4b39      	ldr	r3, [pc, #228]	@ (80011fc <Update_File+0x19c>)
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	4835      	ldr	r0, [pc, #212]	@ (80011f0 <Update_File+0x190>)
 800111c:	f00c fef9 	bl	800df12 <f_write>
 8001120:	4603      	mov	r3, r0
 8001122:	461a      	mov	r2, r3
 8001124:	4b30      	ldr	r3, [pc, #192]	@ (80011e8 <Update_File+0x188>)
 8001126:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001128:	4b2f      	ldr	r3, [pc, #188]	@ (80011e8 <Update_File+0x188>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <Update_File+0xf8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001130:	2064      	movs	r0, #100	@ 0x64
 8001132:	f012 f85d 	bl	80131f0 <malloc>
 8001136:	4603      	mov	r3, r0
 8001138:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 800113a:	4b2b      	ldr	r3, [pc, #172]	@ (80011e8 <Update_File+0x188>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	492f      	ldr	r1, [pc, #188]	@ (8001200 <Update_File+0x1a0>)
 8001144:	69f8      	ldr	r0, [r7, #28]
 8001146:	f012 f911 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 800114a:	69f8      	ldr	r0, [r7, #28]
 800114c:	f7ff fd36 	bl	8000bbc <Send_Uart>
	    	free(buf);
 8001150:	69f8      	ldr	r0, [r7, #28]
 8001152:	f012 f855 	bl	8013200 <free>
 8001156:	e00f      	b.n	8001178 <Update_File+0x118>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001158:	2064      	movs	r0, #100	@ 0x64
 800115a:	f012 f849 	bl	80131f0 <malloc>
 800115e:	4603      	mov	r3, r0
 8001160:	623b      	str	r3, [r7, #32]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	4927      	ldr	r1, [pc, #156]	@ (8001204 <Update_File+0x1a4>)
 8001166:	6a38      	ldr	r0, [r7, #32]
 8001168:	f012 f900 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 800116c:	6a38      	ldr	r0, [r7, #32]
 800116e:	f7ff fd25 	bl	8000bbc <Send_Uart>
	    	free(buf);
 8001172:	6a38      	ldr	r0, [r7, #32]
 8001174:	f012 f844 	bl	8013200 <free>
	    }

	    /* Close file */
	    fresult = f_close(&USBHFile);
 8001178:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <Update_File+0x190>)
 800117a:	f00d fa86 	bl	800e68a <f_close>
 800117e:	4603      	mov	r3, r0
 8001180:	461a      	mov	r2, r3
 8001182:	4b19      	ldr	r3, [pc, #100]	@ (80011e8 <Update_File+0x188>)
 8001184:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001186:	4b18      	ldr	r3, [pc, #96]	@ (80011e8 <Update_File+0x188>)
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <Update_File+0x156>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800118e:	2064      	movs	r0, #100	@ 0x64
 8001190:	f012 f82e 	bl	80131f0 <malloc>
 8001194:	4603      	mov	r3, r0
 8001196:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 8001198:	4b13      	ldr	r3, [pc, #76]	@ (80011e8 <Update_File+0x188>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4919      	ldr	r1, [pc, #100]	@ (8001208 <Update_File+0x1a8>)
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f012 f8e2 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff fd07 	bl	8000bbc <Send_Uart>
	    	free(buf);
 80011ae:	6978      	ldr	r0, [r7, #20]
 80011b0:	f012 f826 	bl	8013200 <free>
 80011b4:	e00f      	b.n	80011d6 <Update_File+0x176>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011b6:	2064      	movs	r0, #100	@ 0x64
 80011b8:	f012 f81a 	bl	80131f0 <malloc>
 80011bc:	4603      	mov	r3, r0
 80011be:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	4912      	ldr	r1, [pc, #72]	@ (800120c <Update_File+0x1ac>)
 80011c4:	69b8      	ldr	r0, [r7, #24]
 80011c6:	f012 f8d1 	bl	801336c <siprintf>
	    	Send_Uart(buf);
 80011ca:	69b8      	ldr	r0, [r7, #24]
 80011cc:	f7ff fcf6 	bl	8000bbc <Send_Uart>
	    	free(buf);
 80011d0:	69b8      	ldr	r0, [r7, #24]
 80011d2:	f012 f815 	bl	8013200 <free>
	     }
	}
    return fresult;
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <Update_File+0x188>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3728      	adds	r7, #40	@ 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000a0 	.word	0x200000a0
 80011e8:	200001c0 	.word	0x200001c0
 80011ec:	08013c3c 	.word	0x08013c3c
 80011f0:	20001278 	.word	0x20001278
 80011f4:	08013c5c 	.word	0x08013c5c
 80011f8:	08013ed4 	.word	0x08013ed4
 80011fc:	200001c4 	.word	0x200001c4
 8001200:	08013f04 	.word	0x08013f04
 8001204:	08013f2c 	.word	0x08013f2c
 8001208:	08013dc8 	.word	0x08013dc8
 800120c:	08013df0 	.word	0x08013df0

08001210 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f00d fd90 	bl	800ed3e <f_mkdir>
 800121e:	4603      	mov	r3, r0
 8001220:	461a      	mov	r2, r3
 8001222:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <Create_Dir+0x74>)
 8001224:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8001226:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <Create_Dir+0x74>)
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d110      	bne.n	8001250 <Create_Dir+0x40>
    {
    	char *buf = malloc(100*sizeof(char));
 800122e:	2064      	movs	r0, #100	@ 0x64
 8001230:	f011 ffde 	bl	80131f0 <malloc>
 8001234:	4603      	mov	r3, r0
 8001236:	60bb      	str	r3, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n\n", name);
 8001238:	687a      	ldr	r2, [r7, #4]
 800123a:	4913      	ldr	r1, [pc, #76]	@ (8001288 <Create_Dir+0x78>)
 800123c:	68b8      	ldr	r0, [r7, #8]
 800123e:	f012 f895 	bl	801336c <siprintf>
    	Send_Uart (buf);
 8001242:	68b8      	ldr	r0, [r7, #8]
 8001244:	f7ff fcba 	bl	8000bbc <Send_Uart>
    	free(buf);
 8001248:	68b8      	ldr	r0, [r7, #8]
 800124a:	f011 ffd9 	bl	8013200 <free>
 800124e:	e012      	b.n	8001276 <Create_Dir+0x66>
    }
    else
    {
    	char *buf = malloc(100*sizeof(char));
 8001250:	2064      	movs	r0, #100	@ 0x64
 8001252:	f011 ffcd 	bl	80131f0 <malloc>
 8001256:	4603      	mov	r3, r0
 8001258:	60fb      	str	r3, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <Create_Dir+0x74>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	461a      	mov	r2, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	490a      	ldr	r1, [pc, #40]	@ (800128c <Create_Dir+0x7c>)
 8001264:	68f8      	ldr	r0, [r7, #12]
 8001266:	f012 f881 	bl	801336c <siprintf>
    	Send_Uart(buf);
 800126a:	68f8      	ldr	r0, [r7, #12]
 800126c:	f7ff fca6 	bl	8000bbc <Send_Uart>
    	free(buf);
 8001270:	68f8      	ldr	r0, [r7, #12]
 8001272:	f011 ffc5 	bl	8013200 <free>
    }
    return fresult;
 8001276:	4b03      	ldr	r3, [pc, #12]	@ (8001284 <Create_Dir+0x74>)
 8001278:	781b      	ldrb	r3, [r3, #0]
}
 800127a:	4618      	mov	r0, r3
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	200001c0 	.word	0x200001c0
 8001288:	08013f90 	.word	0x08013f90
 800128c:	08013fb8 	.word	0x08013fb8

08001290 <Check_USB_Details>:

void Check_USB_Details (void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8001296:	4a30      	ldr	r2, [pc, #192]	@ (8001358 <Check_USB_Details+0xc8>)
 8001298:	4930      	ldr	r1, [pc, #192]	@ (800135c <Check_USB_Details+0xcc>)
 800129a:	4831      	ldr	r0, [pc, #196]	@ (8001360 <Check_USB_Details+0xd0>)
 800129c:	f00d fc41 	bl	800eb22 <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 80012a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <Check_USB_Details+0xc8>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012a6:	3b02      	subs	r3, #2
 80012a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001358 <Check_USB_Details+0xc8>)
 80012aa:	6812      	ldr	r2, [r2, #0]
 80012ac:	8952      	ldrh	r2, [r2, #10]
 80012ae:	fb02 f303 	mul.w	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fa70 	bl	8000798 <__aeabi_ui2d>
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	4b29      	ldr	r3, [pc, #164]	@ (8001364 <Check_USB_Details+0xd4>)
 80012be:	f7fe ffff 	bl	80002c0 <__aeabi_dmul>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	4610      	mov	r0, r2
 80012c8:	4619      	mov	r1, r3
 80012ca:	f7ff fadf 	bl	800088c <__aeabi_d2uiz>
 80012ce:	4603      	mov	r3, r0
 80012d0:	4a25      	ldr	r2, [pc, #148]	@ (8001368 <Check_USB_Details+0xd8>)
 80012d2:	6013      	str	r3, [r2, #0]
    char *buf = malloc(30*sizeof(char));
 80012d4:	201e      	movs	r0, #30
 80012d6:	f011 ff8b 	bl	80131f0 <malloc>
 80012da:	4603      	mov	r3, r0
 80012dc:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 80012de:	4b22      	ldr	r3, [pc, #136]	@ (8001368 <Check_USB_Details+0xd8>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4921      	ldr	r1, [pc, #132]	@ (800136c <Check_USB_Details+0xdc>)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f012 f840 	bl	801336c <siprintf>
    Send_Uart(buf);
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f7ff fc65 	bl	8000bbc <Send_Uart>
    free(buf);
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f011 ff84 	bl	8013200 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80012f8:	4b17      	ldr	r3, [pc, #92]	@ (8001358 <Check_USB_Details+0xc8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	895b      	ldrh	r3, [r3, #10]
 80012fe:	461a      	mov	r2, r3
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <Check_USB_Details+0xcc>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	fb02 f303 	mul.w	r3, r2, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fa45 	bl	8000798 <__aeabi_ui2d>
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	4b14      	ldr	r3, [pc, #80]	@ (8001364 <Check_USB_Details+0xd4>)
 8001314:	f7fe ffd4 	bl	80002c0 <__aeabi_dmul>
 8001318:	4602      	mov	r2, r0
 800131a:	460b      	mov	r3, r1
 800131c:	4610      	mov	r0, r2
 800131e:	4619      	mov	r1, r3
 8001320:	f7ff fab4 	bl	800088c <__aeabi_d2uiz>
 8001324:	4603      	mov	r3, r0
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <Check_USB_Details+0xe0>)
 8001328:	6013      	str	r3, [r2, #0]
    buf = malloc(30*sizeof(char));
 800132a:	201e      	movs	r0, #30
 800132c:	f011 ff60 	bl	80131f0 <malloc>
 8001330:	4603      	mov	r3, r0
 8001332:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 8001334:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <Check_USB_Details+0xe0>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	490e      	ldr	r1, [pc, #56]	@ (8001374 <Check_USB_Details+0xe4>)
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f012 f815 	bl	801336c <siprintf>
    Send_Uart(buf);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fc3a 	bl	8000bbc <Send_Uart>
    free(buf);
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f011 ff59 	bl	8013200 <free>
}
 800134e:	bf00      	nop
 8001350:	3708      	adds	r7, #8
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001c8 	.word	0x200001c8
 800135c:	200001cc 	.word	0x200001cc
 8001360:	08013fe4 	.word	0x08013fe4
 8001364:	3fe00000 	.word	0x3fe00000
 8001368:	200001d0 	.word	0x200001d0
 800136c:	08013fe8 	.word	0x08013fe8
 8001370:	200001d4 	.word	0x200001d4
 8001374:	08014000 	.word	0x08014000

08001378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001388:	4b0c      	ldr	r3, [pc, #48]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138e:	68ba      	ldr	r2, [r7, #8]
 8001390:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001394:	4013      	ands	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013a0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <__NVIC_SetPriorityGrouping+0x44>)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	60d3      	str	r3, [r2, #12]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013c4:	f000 fa60 	bl	8001888 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013c8:	f000 f81c 	bl	8001404 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013cc:	f000 f884 	bl	80014d8 <MX_GPIO_Init>
  MX_FATFS_Init();
 80013d0:	f004 feee 	bl	80061b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  NVIC_SetPriorityGrouping( 0 );
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ffcf 	bl	8001378 <__NVIC_SetPriorityGrouping>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80013da:	f00e f815 	bl	800f408 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80013de:	4a06      	ldr	r2, [pc, #24]	@ (80013f8 <main+0x38>)
 80013e0:	2100      	movs	r1, #0
 80013e2:	4806      	ldr	r0, [pc, #24]	@ (80013fc <main+0x3c>)
 80013e4:	f00e f85a 	bl	800f49c <osThreadNew>
 80013e8:	4603      	mov	r3, r0
 80013ea:	4a05      	ldr	r2, [pc, #20]	@ (8001400 <main+0x40>)
 80013ec:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013ee:	f00e f82f 	bl	800f450 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013f2:	bf00      	nop
 80013f4:	e7fd      	b.n	80013f2 <main+0x32>
 80013f6:	bf00      	nop
 80013f8:	080141e8 	.word	0x080141e8
 80013fc:	0800150d 	.word	0x0800150d
 8001400:	200001d8 	.word	0x200001d8

08001404 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b094      	sub	sp, #80	@ 0x50
 8001408:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800140a:	f107 0320 	add.w	r3, r7, #32
 800140e:	2230      	movs	r2, #48	@ 0x30
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f011 ffca 	bl	80133ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001418:	f107 030c 	add.w	r3, r7, #12
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	2300      	movs	r3, #0
 800142a:	60bb      	str	r3, [r7, #8]
 800142c:	4b28      	ldr	r3, [pc, #160]	@ (80014d0 <SystemClock_Config+0xcc>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	4a27      	ldr	r2, [pc, #156]	@ (80014d0 <SystemClock_Config+0xcc>)
 8001432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001436:	6413      	str	r3, [r2, #64]	@ 0x40
 8001438:	4b25      	ldr	r3, [pc, #148]	@ (80014d0 <SystemClock_Config+0xcc>)
 800143a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800143c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001444:	2300      	movs	r3, #0
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <SystemClock_Config+0xd0>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001450:	4a20      	ldr	r2, [pc, #128]	@ (80014d4 <SystemClock_Config+0xd0>)
 8001452:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001456:	6013      	str	r3, [r2, #0]
 8001458:	4b1e      	ldr	r3, [pc, #120]	@ (80014d4 <SystemClock_Config+0xd0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001464:	2302      	movs	r3, #2
 8001466:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001468:	2301      	movs	r3, #1
 800146a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800146c:	2310      	movs	r3, #16
 800146e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001470:	2302      	movs	r3, #2
 8001472:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001474:	2300      	movs	r3, #0
 8001476:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001478:	2310      	movs	r3, #16
 800147a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800147c:	23c0      	movs	r3, #192	@ 0xc0
 800147e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001480:	2302      	movs	r3, #2
 8001482:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001484:	2304      	movs	r3, #4
 8001486:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001488:	f107 0320 	add.w	r3, r7, #32
 800148c:	4618      	mov	r0, r3
 800148e:	f002 fe09 	bl	80040a4 <HAL_RCC_OscConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001498:	f000 f8a6 	bl	80015e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800149c:	230f      	movs	r3, #15
 800149e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014a0:	2300      	movs	r3, #0
 80014a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014a8:	2300      	movs	r3, #0
 80014aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80014b0:	f107 030c 	add.w	r3, r7, #12
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f003 f86c 	bl	8004594 <HAL_RCC_ClockConfig>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80014c2:	f000 f891 	bl	80015e8 <Error_Handler>
  }
}
 80014c6:	bf00      	nop
 80014c8:	3750      	adds	r7, #80	@ 0x50
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	40007000 	.word	0x40007000

080014d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <MX_GPIO_Init+0x30>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e6:	4a08      	ldr	r2, [pc, #32]	@ (8001508 <MX_GPIO_Init+0x30>)
 80014e8:	f043 0301 	orr.w	r3, r3, #1
 80014ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ee:	4b06      	ldr	r3, [pc, #24]	@ (8001508 <MX_GPIO_Init+0x30>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014fa:	bf00      	nop
 80014fc:	370c      	adds	r7, #12
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40023800 	.word	0x40023800

0800150c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8001514:	f011 fb50 	bl	8012bb8 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for (;;) {
	  if(to_log == 1) {
 8001518:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <StartDefaultTask+0x84>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d12c      	bne.n	800157a <StartDefaultTask+0x6e>
		Mount_USB();
 8001520:	f7ff fb56 	bl	8000bd0 <Mount_USB>

			Check_USB_Details();   // check space details
 8001524:	f7ff feb4 	bl	8001290 <Check_USB_Details>

			Scan_USB("/");   // scan for files and directories
 8001528:	481a      	ldr	r0, [pc, #104]	@ (8001594 <StartDefaultTask+0x88>)
 800152a:	f7ff fb93 	bl	8000c54 <Scan_USB>

			Create_File("/ROOTFILE.txt");
 800152e:	481a      	ldr	r0, [pc, #104]	@ (8001598 <StartDefaultTask+0x8c>)
 8001530:	f7ff fcfa 	bl	8000f28 <Create_File>
			Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 8001534:	4919      	ldr	r1, [pc, #100]	@ (800159c <StartDefaultTask+0x90>)
 8001536:	4818      	ldr	r0, [pc, #96]	@ (8001598 <StartDefaultTask+0x8c>)
 8001538:	f7ff fc32 	bl	8000da0 <Write_File>

			Create_Dir("/DIR1");
 800153c:	4818      	ldr	r0, [pc, #96]	@ (80015a0 <StartDefaultTask+0x94>)
 800153e:	f7ff fe67 	bl	8001210 <Create_Dir>
			Create_File("/DIR1/DIR1FILE.txt");
 8001542:	4818      	ldr	r0, [pc, #96]	@ (80015a4 <StartDefaultTask+0x98>)
 8001544:	f7ff fcf0 	bl	8000f28 <Create_File>
			Write_File("/DIR1/DIR1FILE.txt", "This data should be in DIR1 file\n");
 8001548:	4917      	ldr	r1, [pc, #92]	@ (80015a8 <StartDefaultTask+0x9c>)
 800154a:	4816      	ldr	r0, [pc, #88]	@ (80015a4 <StartDefaultTask+0x98>)
 800154c:	f7ff fc28 	bl	8000da0 <Write_File>

			Create_Dir("/DIR2");
 8001550:	4816      	ldr	r0, [pc, #88]	@ (80015ac <StartDefaultTask+0xa0>)
 8001552:	f7ff fe5d 	bl	8001210 <Create_Dir>
			Create_Dir("/DIR2/SUBDIR1");
 8001556:	4816      	ldr	r0, [pc, #88]	@ (80015b0 <StartDefaultTask+0xa4>)
 8001558:	f7ff fe5a 	bl	8001210 <Create_Dir>
			Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
 800155c:	4815      	ldr	r0, [pc, #84]	@ (80015b4 <StartDefaultTask+0xa8>)
 800155e:	f7ff fce3 	bl	8000f28 <Create_File>
			Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
 8001562:	4915      	ldr	r1, [pc, #84]	@ (80015b8 <StartDefaultTask+0xac>)
 8001564:	4813      	ldr	r0, [pc, #76]	@ (80015b4 <StartDefaultTask+0xa8>)
 8001566:	f7ff fc1b 	bl	8000da0 <Write_File>

			Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");
 800156a:	4914      	ldr	r1, [pc, #80]	@ (80015bc <StartDefaultTask+0xb0>)
 800156c:	480a      	ldr	r0, [pc, #40]	@ (8001598 <StartDefaultTask+0x8c>)
 800156e:	f7ff fd77 	bl	8001060 <Update_File>
			to_log = 0;
 8001572:	4b07      	ldr	r3, [pc, #28]	@ (8001590 <StartDefaultTask+0x84>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	e7ce      	b.n	8001518 <StartDefaultTask+0xc>

          } else if (to_unmount == 1) {
 800157a:	4b11      	ldr	r3, [pc, #68]	@ (80015c0 <StartDefaultTask+0xb4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d1ca      	bne.n	8001518 <StartDefaultTask+0xc>
        	  Unmount_USB();
 8001582:	f7ff fb47 	bl	8000c14 <Unmount_USB>
              to_unmount = 0;
 8001586:	4b0e      	ldr	r3, [pc, #56]	@ (80015c0 <StartDefaultTask+0xb4>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
	  if(to_log == 1) {
 800158c:	e7c4      	b.n	8001518 <StartDefaultTask+0xc>
 800158e:	bf00      	nop
 8001590:	20006c78 	.word	0x20006c78
 8001594:	08014024 	.word	0x08014024
 8001598:	08014028 	.word	0x08014028
 800159c:	08014038 	.word	0x08014038
 80015a0:	0801405c 	.word	0x0801405c
 80015a4:	08014064 	.word	0x08014064
 80015a8:	08014078 	.word	0x08014078
 80015ac:	0801409c 	.word	0x0801409c
 80015b0:	080140a4 	.word	0x080140a4
 80015b4:	080140b4 	.word	0x080140b4
 80015b8:	080140d0 	.word	0x080140d0
 80015bc:	08014134 	.word	0x08014134
 80015c0:	20006c7c 	.word	0x20006c7c

080015c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d101      	bne.n	80015da <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80015d6:	f000 f979 	bl	80018cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40001000 	.word	0x40001000

080015e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ec:	b672      	cpsid	i
}
 80015ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <Error_Handler+0x8>

080015f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_MspInit+0x54>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001602:	4a11      	ldr	r2, [pc, #68]	@ (8001648 <HAL_MspInit+0x54>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001608:	6453      	str	r3, [r2, #68]	@ 0x44
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_MspInit+0x54>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_MspInit+0x54>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <HAL_MspInit+0x54>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <HAL_MspInit+0x54>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162e:	603b      	str	r3, [r7, #0]
 8001630:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	210f      	movs	r1, #15
 8001636:	f06f 0001 	mvn.w	r0, #1
 800163a:	f000 fa43 	bl	8001ac4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800

0800164c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b08e      	sub	sp, #56	@ 0x38
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001658:	2300      	movs	r3, #0
 800165a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800165c:	2300      	movs	r3, #0
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	4b33      	ldr	r3, [pc, #204]	@ (8001730 <HAL_InitTick+0xe4>)
 8001662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001664:	4a32      	ldr	r2, [pc, #200]	@ (8001730 <HAL_InitTick+0xe4>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6413      	str	r3, [r2, #64]	@ 0x40
 800166c:	4b30      	ldr	r3, [pc, #192]	@ (8001730 <HAL_InitTick+0xe4>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001670:	f003 0310 	and.w	r3, r3, #16
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001678:	f107 0210 	add.w	r2, r7, #16
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f003 f952 	bl	800492c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001688:	6a3b      	ldr	r3, [r7, #32]
 800168a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800168c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800168e:	2b00      	cmp	r3, #0
 8001690:	d103      	bne.n	800169a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001692:	f003 f937 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 8001696:	6378      	str	r0, [r7, #52]	@ 0x34
 8001698:	e004      	b.n	80016a4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800169a:	f003 f933 	bl	8004904 <HAL_RCC_GetPCLK1Freq>
 800169e:	4603      	mov	r3, r0
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80016a6:	4a23      	ldr	r2, [pc, #140]	@ (8001734 <HAL_InitTick+0xe8>)
 80016a8:	fba2 2303 	umull	r2, r3, r2, r3
 80016ac:	0c9b      	lsrs	r3, r3, #18
 80016ae:	3b01      	subs	r3, #1
 80016b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016b2:	4b21      	ldr	r3, [pc, #132]	@ (8001738 <HAL_InitTick+0xec>)
 80016b4:	4a21      	ldr	r2, [pc, #132]	@ (800173c <HAL_InitTick+0xf0>)
 80016b6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001738 <HAL_InitTick+0xec>)
 80016ba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80016be:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001738 <HAL_InitTick+0xec>)
 80016c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80016c4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001738 <HAL_InitTick+0xec>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001738 <HAL_InitTick+0xec>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016d2:	4b19      	ldr	r3, [pc, #100]	@ (8001738 <HAL_InitTick+0xec>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016d8:	4817      	ldr	r0, [pc, #92]	@ (8001738 <HAL_InitTick+0xec>)
 80016da:	f003 f959 	bl	8004990 <HAL_TIM_Base_Init>
 80016de:	4603      	mov	r3, r0
 80016e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80016e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d11b      	bne.n	8001724 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016ec:	4812      	ldr	r0, [pc, #72]	@ (8001738 <HAL_InitTick+0xec>)
 80016ee:	f003 f9a9 	bl	8004a44 <HAL_TIM_Base_Start_IT>
 80016f2:	4603      	mov	r3, r0
 80016f4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80016f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d111      	bne.n	8001724 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001700:	2036      	movs	r0, #54	@ 0x36
 8001702:	f000 f9fb 	bl	8001afc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d808      	bhi.n	800171e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	2036      	movs	r0, #54	@ 0x36
 8001712:	f000 f9d7 	bl	8001ac4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001716:	4a0a      	ldr	r2, [pc, #40]	@ (8001740 <HAL_InitTick+0xf4>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6013      	str	r3, [r2, #0]
 800171c:	e002      	b.n	8001724 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001724:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001728:	4618      	mov	r0, r3
 800172a:	3738      	adds	r7, #56	@ 0x38
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	431bde83 	.word	0x431bde83
 8001738:	200001dc 	.word	0x200001dc
 800173c:	40001000 	.word	0x40001000
 8001740:	20000004 	.word	0x20000004

08001744 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <NMI_Handler+0x4>

0800174c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <MemManage_Handler+0x4>

0800175c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	bf00      	nop
 800176a:	e7fd      	b.n	8001768 <UsageFault_Handler+0x4>

0800176c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001780:	4802      	ldr	r0, [pc, #8]	@ (800178c <TIM6_DAC_IRQHandler+0x10>)
 8001782:	f003 f9cf 	bl	8004b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	200001dc 	.word	0x200001dc

08001790 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001794:	4802      	ldr	r0, [pc, #8]	@ (80017a0 <OTG_FS_IRQHandler+0x10>)
 8001796:	f000 fe4b 	bl	8002430 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20007068 	.word	0x20007068

080017a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ac:	4a14      	ldr	r2, [pc, #80]	@ (8001800 <_sbrk+0x5c>)
 80017ae:	4b15      	ldr	r3, [pc, #84]	@ (8001804 <_sbrk+0x60>)
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017c0:	4b11      	ldr	r3, [pc, #68]	@ (8001808 <_sbrk+0x64>)
 80017c2:	4a12      	ldr	r2, [pc, #72]	@ (800180c <_sbrk+0x68>)
 80017c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c6:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d207      	bcs.n	80017e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d4:	f011 fe02 	bl	80133dc <__errno>
 80017d8:	4603      	mov	r3, r0
 80017da:	220c      	movs	r2, #12
 80017dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	e009      	b.n	80017f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <_sbrk+0x64>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ea:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <_sbrk+0x64>)
 80017f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20030000 	.word	0x20030000
 8001804:	00000400 	.word	0x00000400
 8001808:	20000224 	.word	0x20000224
 800180c:	20007590 	.word	0x20007590

08001810 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001814:	4b06      	ldr	r3, [pc, #24]	@ (8001830 <SystemInit+0x20>)
 8001816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <SystemInit+0x20>)
 800181c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	e000ed00 	.word	0xe000ed00

08001834 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001834:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800186c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001838:	f7ff ffea 	bl	8001810 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800183c:	480c      	ldr	r0, [pc, #48]	@ (8001870 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800183e:	490d      	ldr	r1, [pc, #52]	@ (8001874 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001840:	4a0d      	ldr	r2, [pc, #52]	@ (8001878 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001842:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001844:	e002      	b.n	800184c <LoopCopyDataInit>

08001846 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001846:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001848:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800184a:	3304      	adds	r3, #4

0800184c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800184c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800184e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001850:	d3f9      	bcc.n	8001846 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001852:	4a0a      	ldr	r2, [pc, #40]	@ (800187c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001854:	4c0a      	ldr	r4, [pc, #40]	@ (8001880 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001856:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001858:	e001      	b.n	800185e <LoopFillZerobss>

0800185a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800185a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800185c:	3204      	adds	r2, #4

0800185e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800185e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001860:	d3fb      	bcc.n	800185a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001862:	f011 fdc1 	bl	80133e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001866:	f7ff fdab 	bl	80013c0 <main>
  bx  lr    
 800186a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800186c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001870:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001874:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001878:	080146bc 	.word	0x080146bc
  ldr r2, =_sbss
 800187c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001880:	20007590 	.word	0x20007590

08001884 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001884:	e7fe      	b.n	8001884 <ADC_IRQHandler>
	...

08001888 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800188c:	4b0e      	ldr	r3, [pc, #56]	@ (80018c8 <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0d      	ldr	r2, [pc, #52]	@ (80018c8 <HAL_Init+0x40>)
 8001892:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001896:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001898:	4b0b      	ldr	r3, [pc, #44]	@ (80018c8 <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a0a      	ldr	r2, [pc, #40]	@ (80018c8 <HAL_Init+0x40>)
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <HAL_Init+0x40>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a07      	ldr	r2, [pc, #28]	@ (80018c8 <HAL_Init+0x40>)
 80018aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b0:	2003      	movs	r0, #3
 80018b2:	f000 f8fc 	bl	8001aae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b6:	200f      	movs	r0, #15
 80018b8:	f7ff fec8 	bl	800164c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018bc:	f7ff fe9a 	bl	80015f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40023c00 	.word	0x40023c00

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	@ (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000228 	.word	0x20000228

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	@ (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000228 	.word	0x20000228

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b0a      	ldr	r3, [pc, #40]	@ (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	@ (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	@ (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	@ (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	@ 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	@ 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b082      	sub	sp, #8
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f7ff ff4c 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
 8001ad0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ad6:	f7ff ff61 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001ada:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	68b9      	ldr	r1, [r7, #8]
 8001ae0:	6978      	ldr	r0, [r7, #20]
 8001ae2:	f7ff ffb1 	bl	8001a48 <NVIC_EncodePriority>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aec:	4611      	mov	r1, r2
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ff80 	bl	80019f4 <__NVIC_SetPriority>
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff ff54 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b10:	bf00      	nop
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b089      	sub	sp, #36	@ 0x24
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e177      	b.n	8001e24 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b34:	2201      	movs	r2, #1
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	4013      	ands	r3, r2
 8001b46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	f040 8166 	bne.w	8001e1e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f003 0303 	and.w	r3, r3, #3
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d005      	beq.n	8001b6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d130      	bne.n	8001bcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	2203      	movs	r2, #3
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	68da      	ldr	r2, [r3, #12]
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	091b      	lsrs	r3, r3, #4
 8001bb6:	f003 0201 	and.w	r2, r3, #1
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f003 0303 	and.w	r3, r3, #3
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	d017      	beq.n	8001c08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	2203      	movs	r2, #3
 8001be4:	fa02 f303 	lsl.w	r3, r2, r3
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	689a      	ldr	r2, [r3, #8]
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d123      	bne.n	8001c5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	08da      	lsrs	r2, r3, #3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3208      	adds	r2, #8
 8001c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	220f      	movs	r2, #15
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0307 	and.w	r3, r3, #7
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	08da      	lsrs	r2, r3, #3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	3208      	adds	r2, #8
 8001c56:	69b9      	ldr	r1, [r7, #24]
 8001c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	2203      	movs	r2, #3
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	69ba      	ldr	r2, [r7, #24]
 8001c70:	4013      	ands	r3, r2
 8001c72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0203 	and.w	r2, r3, #3
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80c0 	beq.w	8001e1e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	60fb      	str	r3, [r7, #12]
 8001ca2:	4b66      	ldr	r3, [pc, #408]	@ (8001e3c <HAL_GPIO_Init+0x324>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca6:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_GPIO_Init+0x324>)
 8001ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cae:	4b63      	ldr	r3, [pc, #396]	@ (8001e3c <HAL_GPIO_Init+0x324>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cba:	4a61      	ldr	r2, [pc, #388]	@ (8001e40 <HAL_GPIO_Init+0x328>)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	089b      	lsrs	r3, r3, #2
 8001cc0:	3302      	adds	r3, #2
 8001cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	220f      	movs	r2, #15
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	43db      	mvns	r3, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a58      	ldr	r2, [pc, #352]	@ (8001e44 <HAL_GPIO_Init+0x32c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d037      	beq.n	8001d56 <HAL_GPIO_Init+0x23e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a57      	ldr	r2, [pc, #348]	@ (8001e48 <HAL_GPIO_Init+0x330>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d031      	beq.n	8001d52 <HAL_GPIO_Init+0x23a>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a56      	ldr	r2, [pc, #344]	@ (8001e4c <HAL_GPIO_Init+0x334>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d02b      	beq.n	8001d4e <HAL_GPIO_Init+0x236>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a55      	ldr	r2, [pc, #340]	@ (8001e50 <HAL_GPIO_Init+0x338>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d025      	beq.n	8001d4a <HAL_GPIO_Init+0x232>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a54      	ldr	r2, [pc, #336]	@ (8001e54 <HAL_GPIO_Init+0x33c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d01f      	beq.n	8001d46 <HAL_GPIO_Init+0x22e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a53      	ldr	r2, [pc, #332]	@ (8001e58 <HAL_GPIO_Init+0x340>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d019      	beq.n	8001d42 <HAL_GPIO_Init+0x22a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a52      	ldr	r2, [pc, #328]	@ (8001e5c <HAL_GPIO_Init+0x344>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x226>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a51      	ldr	r2, [pc, #324]	@ (8001e60 <HAL_GPIO_Init+0x348>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x222>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a50      	ldr	r2, [pc, #320]	@ (8001e64 <HAL_GPIO_Init+0x34c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x21e>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a4f      	ldr	r2, [pc, #316]	@ (8001e68 <HAL_GPIO_Init+0x350>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x21a>
 8001d2e:	2309      	movs	r3, #9
 8001d30:	e012      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d32:	230a      	movs	r3, #10
 8001d34:	e010      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d36:	2308      	movs	r3, #8
 8001d38:	e00e      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d3a:	2307      	movs	r3, #7
 8001d3c:	e00c      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d3e:	2306      	movs	r3, #6
 8001d40:	e00a      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d46:	2304      	movs	r3, #4
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x240>
 8001d56:	2300      	movs	r3, #0
 8001d58:	69fa      	ldr	r2, [r7, #28]
 8001d5a:	f002 0203 	and.w	r2, r2, #3
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	@ (8001e40 <HAL_GPIO_Init+0x328>)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d76:	4b3d      	ldr	r3, [pc, #244]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9a:	4a34      	ldr	r2, [pc, #208]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da0:	4b32      	ldr	r3, [pc, #200]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	43db      	mvns	r3, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4013      	ands	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc4:	4a29      	ldr	r2, [pc, #164]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dca:	4b28      	ldr	r3, [pc, #160]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dee:	4a1f      	ldr	r2, [pc, #124]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	43db      	mvns	r3, r3
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e18:	4a14      	ldr	r2, [pc, #80]	@ (8001e6c <HAL_GPIO_Init+0x354>)
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	3301      	adds	r3, #1
 8001e22:	61fb      	str	r3, [r7, #28]
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b0f      	cmp	r3, #15
 8001e28:	f67f ae84 	bls.w	8001b34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	3724      	adds	r7, #36	@ 0x24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40013800 	.word	0x40013800
 8001e44:	40020000 	.word	0x40020000
 8001e48:	40020400 	.word	0x40020400
 8001e4c:	40020800 	.word	0x40020800
 8001e50:	40020c00 	.word	0x40020c00
 8001e54:	40021000 	.word	0x40021000
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021800 	.word	0x40021800
 8001e60:	40021c00 	.word	0x40021c00
 8001e64:	40022000 	.word	0x40022000
 8001e68:	40022400 	.word	0x40022400
 8001e6c:	40013c00 	.word	0x40013c00

08001e70 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af02      	add	r7, sp, #8
 8001e76:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d101      	bne.n	8001e82 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e059      	b.n	8001f36 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d106      	bne.n	8001ea2 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f010 fee9 	bl	8012c74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb0:	d102      	bne.n	8001eb8 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f003 f87e 	bl	8004fbe <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6818      	ldr	r0, [r3, #0]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	7c1a      	ldrb	r2, [r3, #16]
 8001eca:	f88d 2000 	strb.w	r2, [sp]
 8001ece:	3304      	adds	r3, #4
 8001ed0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ed2:	f002 ffff 	bl	8004ed4 <USB_CoreInit>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e026      	b.n	8001f36 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 f876 	bl	8004fe0 <USB_SetCurrentMode>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2202      	movs	r2, #2
 8001efe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e017      	b.n	8001f36 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6818      	ldr	r0, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	7c1a      	ldrb	r2, [r3, #16]
 8001f0e:	f88d 2000 	strb.w	r2, [sp]
 8001f12:	3304      	adds	r3, #4
 8001f14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f16:	f003 fa19 	bl	800534c <USB_HostInit>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2202      	movs	r2, #2
 8001f24:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e004      	b.n	8001f36 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001f34:	2300      	movs	r3, #0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b08b      	sub	sp, #44	@ 0x2c
 8001f42:	af04      	add	r7, sp, #16
 8001f44:	6078      	str	r0, [r7, #4]
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	70fb      	strb	r3, [r7, #3]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70bb      	strb	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001f58:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f5a:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d101      	bne.n	8001f6a <HAL_HCD_HC_Init+0x2c>
 8001f66:	2302      	movs	r3, #2
 8001f68:	e09d      	b.n	80020a6 <HAL_HCD_HC_Init+0x168>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001f72:	78fa      	ldrb	r2, [r7, #3]
 8001f74:	6879      	ldr	r1, [r7, #4]
 8001f76:	4613      	mov	r3, r2
 8001f78:	011b      	lsls	r3, r3, #4
 8001f7a:	1a9b      	subs	r3, r3, r2
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	440b      	add	r3, r1
 8001f80:	3319      	adds	r3, #25
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f86:	78fa      	ldrb	r2, [r7, #3]
 8001f88:	6879      	ldr	r1, [r7, #4]
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	011b      	lsls	r3, r3, #4
 8001f8e:	1a9b      	subs	r3, r3, r2
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	440b      	add	r3, r1
 8001f94:	3314      	adds	r3, #20
 8001f96:	787a      	ldrb	r2, [r7, #1]
 8001f98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f9a:	78fa      	ldrb	r2, [r7, #3]
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	011b      	lsls	r3, r3, #4
 8001fa2:	1a9b      	subs	r3, r3, r2
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	3315      	adds	r3, #21
 8001faa:	78fa      	ldrb	r2, [r7, #3]
 8001fac:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	3326      	adds	r3, #38	@ 0x26
 8001fbe:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001fc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	78bb      	ldrb	r3, [r7, #2]
 8001fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fcc:	b2d8      	uxtb	r0, r3
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	3316      	adds	r3, #22
 8001fdc:	4602      	mov	r2, r0
 8001fde:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001fe0:	78fb      	ldrb	r3, [r7, #3]
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fbc7 	bl	8002778 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001fea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0a      	bge.n	8002008 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3317      	adds	r3, #23
 8002002:	2201      	movs	r2, #1
 8002004:	701a      	strb	r2, [r3, #0]
 8002006:	e009      	b.n	800201c <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3317      	adds	r3, #23
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4618      	mov	r0, r3
 8002022:	f003 faf7 	bl	8005614 <USB_GetHostSpeed>
 8002026:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002028:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d10b      	bne.n	8002048 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002030:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_HCD_HC_Init+0x10a>
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d104      	bne.n	8002048 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	2bbc      	cmp	r3, #188	@ 0xbc
 8002042:	d901      	bls.n	8002048 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002044:	23bc      	movs	r3, #188	@ 0xbc
 8002046:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002048:	78fa      	ldrb	r2, [r7, #3]
 800204a:	6879      	ldr	r1, [r7, #4]
 800204c:	4613      	mov	r3, r2
 800204e:	011b      	lsls	r3, r3, #4
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	3318      	adds	r3, #24
 8002058:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800205c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 800205e:	78fa      	ldrb	r2, [r7, #3]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	b298      	uxth	r0, r3
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	4613      	mov	r3, r2
 8002068:	011b      	lsls	r3, r3, #4
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	440b      	add	r3, r1
 8002070:	3328      	adds	r3, #40	@ 0x28
 8002072:	4602      	mov	r2, r0
 8002074:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6818      	ldr	r0, [r3, #0]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	b29b      	uxth	r3, r3
 800207e:	787c      	ldrb	r4, [r7, #1]
 8002080:	78ba      	ldrb	r2, [r7, #2]
 8002082:	78f9      	ldrb	r1, [r7, #3]
 8002084:	9302      	str	r3, [sp, #8]
 8002086:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800208a:	9301      	str	r3, [sp, #4]
 800208c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	4623      	mov	r3, r4
 8002094:	f003 fae6 	bl	8005664 <USB_HC_Init>
 8002098:	4603      	mov	r3, r0
 800209a:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80020a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	371c      	adds	r7, #28
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd90      	pop	{r4, r7, pc}

080020ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	6078      	str	r0, [r7, #4]
 80020b6:	460b      	mov	r3, r1
 80020b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d101      	bne.n	80020cc <HAL_HCD_HC_Halt+0x1e>
 80020c8:	2302      	movs	r3, #2
 80020ca:	e00f      	b.n	80020ec <HAL_HCD_HC_Halt+0x3e>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	78fa      	ldrb	r2, [r7, #3]
 80020da:	4611      	mov	r1, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f003 fe78 	bl	8005dd2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	4608      	mov	r0, r1
 80020fe:	4611      	mov	r1, r2
 8002100:	461a      	mov	r2, r3
 8002102:	4603      	mov	r3, r0
 8002104:	70fb      	strb	r3, [r7, #3]
 8002106:	460b      	mov	r3, r1
 8002108:	70bb      	strb	r3, [r7, #2]
 800210a:	4613      	mov	r3, r2
 800210c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800210e:	78fa      	ldrb	r2, [r7, #3]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	011b      	lsls	r3, r3, #4
 8002116:	1a9b      	subs	r3, r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	3317      	adds	r3, #23
 800211e:	78ba      	ldrb	r2, [r7, #2]
 8002120:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	011b      	lsls	r3, r3, #4
 800212a:	1a9b      	subs	r3, r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	3326      	adds	r3, #38	@ 0x26
 8002132:	787a      	ldrb	r2, [r7, #1]
 8002134:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002136:	7c3b      	ldrb	r3, [r7, #16]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d114      	bne.n	8002166 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	332a      	adds	r3, #42	@ 0x2a
 800214c:	2203      	movs	r2, #3
 800214e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3319      	adds	r3, #25
 8002160:	7f3a      	ldrb	r2, [r7, #28]
 8002162:	701a      	strb	r2, [r3, #0]
 8002164:	e009      	b.n	800217a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002166:	78fa      	ldrb	r2, [r7, #3]
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	1a9b      	subs	r3, r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	440b      	add	r3, r1
 8002174:	332a      	adds	r3, #42	@ 0x2a
 8002176:	2202      	movs	r2, #2
 8002178:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800217a:	787b      	ldrb	r3, [r7, #1]
 800217c:	2b03      	cmp	r3, #3
 800217e:	f200 8102 	bhi.w	8002386 <HAL_HCD_HC_SubmitRequest+0x292>
 8002182:	a201      	add	r2, pc, #4	@ (adr r2, 8002188 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002188:	08002199 	.word	0x08002199
 800218c:	08002371 	.word	0x08002371
 8002190:	0800225d 	.word	0x0800225d
 8002194:	080022e7 	.word	0x080022e7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002198:	7c3b      	ldrb	r3, [r7, #16]
 800219a:	2b01      	cmp	r3, #1
 800219c:	f040 80f5 	bne.w	800238a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80021a0:	78bb      	ldrb	r3, [r7, #2]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d12d      	bne.n	8002202 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80021a6:	8b3b      	ldrh	r3, [r7, #24]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80021ac:	78fa      	ldrb	r2, [r7, #3]
 80021ae:	6879      	ldr	r1, [r7, #4]
 80021b0:	4613      	mov	r3, r2
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	1a9b      	subs	r3, r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	333d      	adds	r3, #61	@ 0x3d
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80021c0:	78fa      	ldrb	r2, [r7, #3]
 80021c2:	6879      	ldr	r1, [r7, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	1a9b      	subs	r3, r3, r2
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	440b      	add	r3, r1
 80021ce:	333d      	adds	r3, #61	@ 0x3d
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10a      	bne.n	80021ec <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d6:	78fa      	ldrb	r2, [r7, #3]
 80021d8:	6879      	ldr	r1, [r7, #4]
 80021da:	4613      	mov	r3, r2
 80021dc:	011b      	lsls	r3, r3, #4
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	440b      	add	r3, r1
 80021e4:	332a      	adds	r3, #42	@ 0x2a
 80021e6:	2200      	movs	r2, #0
 80021e8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80021ea:	e0ce      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021ec:	78fa      	ldrb	r2, [r7, #3]
 80021ee:	6879      	ldr	r1, [r7, #4]
 80021f0:	4613      	mov	r3, r2
 80021f2:	011b      	lsls	r3, r3, #4
 80021f4:	1a9b      	subs	r3, r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	440b      	add	r3, r1
 80021fa:	332a      	adds	r3, #42	@ 0x2a
 80021fc:	2202      	movs	r2, #2
 80021fe:	701a      	strb	r2, [r3, #0]
      break;
 8002200:	e0c3      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002202:	78fa      	ldrb	r2, [r7, #3]
 8002204:	6879      	ldr	r1, [r7, #4]
 8002206:	4613      	mov	r3, r2
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	1a9b      	subs	r3, r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	331a      	adds	r3, #26
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b01      	cmp	r3, #1
 8002216:	f040 80b8 	bne.w	800238a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	6879      	ldr	r1, [r7, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	1a9b      	subs	r3, r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	440b      	add	r3, r1
 8002228:	333c      	adds	r3, #60	@ 0x3c
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10a      	bne.n	8002246 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	332a      	adds	r3, #42	@ 0x2a
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
      break;
 8002244:	e0a1      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	4613      	mov	r3, r2
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	1a9b      	subs	r3, r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	440b      	add	r3, r1
 8002254:	332a      	adds	r3, #42	@ 0x2a
 8002256:	2202      	movs	r2, #2
 8002258:	701a      	strb	r2, [r3, #0]
      break;
 800225a:	e096      	b.n	800238a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800225c:	78bb      	ldrb	r3, [r7, #2]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d120      	bne.n	80022a4 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002262:	78fa      	ldrb	r2, [r7, #3]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	4613      	mov	r3, r2
 8002268:	011b      	lsls	r3, r3, #4
 800226a:	1a9b      	subs	r3, r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	440b      	add	r3, r1
 8002270:	333d      	adds	r3, #61	@ 0x3d
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002278:	78fa      	ldrb	r2, [r7, #3]
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	4613      	mov	r3, r2
 800227e:	011b      	lsls	r3, r3, #4
 8002280:	1a9b      	subs	r3, r3, r2
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	440b      	add	r3, r1
 8002286:	332a      	adds	r3, #42	@ 0x2a
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800228c:	e07e      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800228e:	78fa      	ldrb	r2, [r7, #3]
 8002290:	6879      	ldr	r1, [r7, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	011b      	lsls	r3, r3, #4
 8002296:	1a9b      	subs	r3, r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	440b      	add	r3, r1
 800229c:	332a      	adds	r3, #42	@ 0x2a
 800229e:	2202      	movs	r2, #2
 80022a0:	701a      	strb	r2, [r3, #0]
      break;
 80022a2:	e073      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	6879      	ldr	r1, [r7, #4]
 80022a8:	4613      	mov	r3, r2
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	333c      	adds	r3, #60	@ 0x3c
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d10a      	bne.n	80022d0 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ba:	78fa      	ldrb	r2, [r7, #3]
 80022bc:	6879      	ldr	r1, [r7, #4]
 80022be:	4613      	mov	r3, r2
 80022c0:	011b      	lsls	r3, r3, #4
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	332a      	adds	r3, #42	@ 0x2a
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
      break;
 80022ce:	e05d      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	332a      	adds	r3, #42	@ 0x2a
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]
      break;
 80022e4:	e052      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80022e6:	78bb      	ldrb	r3, [r7, #2]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d120      	bne.n	800232e <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	333d      	adds	r3, #61	@ 0x3d
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10a      	bne.n	8002318 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002302:	78fa      	ldrb	r2, [r7, #3]
 8002304:	6879      	ldr	r1, [r7, #4]
 8002306:	4613      	mov	r3, r2
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	1a9b      	subs	r3, r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	440b      	add	r3, r1
 8002310:	332a      	adds	r3, #42	@ 0x2a
 8002312:	2200      	movs	r2, #0
 8002314:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002316:	e039      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002318:	78fa      	ldrb	r2, [r7, #3]
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	4613      	mov	r3, r2
 800231e:	011b      	lsls	r3, r3, #4
 8002320:	1a9b      	subs	r3, r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	440b      	add	r3, r1
 8002326:	332a      	adds	r3, #42	@ 0x2a
 8002328:	2202      	movs	r2, #2
 800232a:	701a      	strb	r2, [r3, #0]
      break;
 800232c:	e02e      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800232e:	78fa      	ldrb	r2, [r7, #3]
 8002330:	6879      	ldr	r1, [r7, #4]
 8002332:	4613      	mov	r3, r2
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	1a9b      	subs	r3, r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	333c      	adds	r3, #60	@ 0x3c
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10a      	bne.n	800235a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002344:	78fa      	ldrb	r2, [r7, #3]
 8002346:	6879      	ldr	r1, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	332a      	adds	r3, #42	@ 0x2a
 8002354:	2200      	movs	r2, #0
 8002356:	701a      	strb	r2, [r3, #0]
      break;
 8002358:	e018      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	4613      	mov	r3, r2
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	1a9b      	subs	r3, r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	332a      	adds	r3, #42	@ 0x2a
 800236a:	2202      	movs	r2, #2
 800236c:	701a      	strb	r2, [r3, #0]
      break;
 800236e:	e00d      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002370:	78fa      	ldrb	r2, [r7, #3]
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	011b      	lsls	r3, r3, #4
 8002378:	1a9b      	subs	r3, r3, r2
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	440b      	add	r3, r1
 800237e:	332a      	adds	r3, #42	@ 0x2a
 8002380:	2200      	movs	r2, #0
 8002382:	701a      	strb	r2, [r3, #0]
      break;
 8002384:	e002      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002386:	bf00      	nop
 8002388:	e000      	b.n	800238c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800238a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	332c      	adds	r3, #44	@ 0x2c
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80023a0:	78fa      	ldrb	r2, [r7, #3]
 80023a2:	8b39      	ldrh	r1, [r7, #24]
 80023a4:	6878      	ldr	r0, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4403      	add	r3, r0
 80023b0:	3334      	adds	r3, #52	@ 0x34
 80023b2:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	4613      	mov	r3, r2
 80023ba:	011b      	lsls	r3, r3, #4
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	440b      	add	r3, r1
 80023c2:	334c      	adds	r3, #76	@ 0x4c
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80023c8:	78fa      	ldrb	r2, [r7, #3]
 80023ca:	6879      	ldr	r1, [r7, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	1a9b      	subs	r3, r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	3338      	adds	r3, #56	@ 0x38
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80023dc:	78fa      	ldrb	r2, [r7, #3]
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3315      	adds	r3, #21
 80023ec:	78fa      	ldrb	r2, [r7, #3]
 80023ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	334d      	adds	r3, #77	@ 0x4d
 8002400:	2200      	movs	r2, #0
 8002402:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	78fa      	ldrb	r2, [r7, #3]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	3310      	adds	r3, #16
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4413      	add	r3, r2
 8002418:	1d19      	adds	r1, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	799b      	ldrb	r3, [r3, #6]
 800241e:	461a      	mov	r2, r3
 8002420:	f003 fa4c 	bl	80058bc <USB_HC_StartXfer>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop

08002430 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f002 ff40 	bl	80052cc <USB_GetMode>
 800244c:	4603      	mov	r3, r0
 800244e:	2b01      	cmp	r3, #1
 8002450:	f040 80fb 	bne.w	800264a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f002 ff03 	bl	8005264 <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	f000 80f1 	beq.w	8002648 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4618      	mov	r0, r3
 800246c:	f002 fefa 	bl	8005264 <USB_ReadInterrupts>
 8002470:	4603      	mov	r3, r0
 8002472:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800247a:	d104      	bne.n	8002486 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002484:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f002 feea 	bl	8005264 <USB_ReadInterrupts>
 8002490:	4603      	mov	r3, r0
 8002492:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002496:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800249a:	d104      	bne.n	80024a6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f002 feda 	bl	8005264 <USB_ReadInterrupts>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024b6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024ba:	d104      	bne.n	80024c6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024c4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 feca 	bl	8005264 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b02      	cmp	r3, #2
 80024d8:	d103      	bne.n	80024e2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2202      	movs	r2, #2
 80024e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f002 febc 	bl	8005264 <USB_ReadInterrupts>
 80024ec:	4603      	mov	r3, r0
 80024ee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024f6:	d120      	bne.n	800253a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002500:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b00      	cmp	r3, #0
 8002510:	d113      	bne.n	800253a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002512:	2110      	movs	r1, #16
 8002514:	6938      	ldr	r0, [r7, #16]
 8002516:	f002 fdaf 	bl	8005078 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800251a:	6938      	ldr	r0, [r7, #16]
 800251c:	f002 fdde 	bl	80050dc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7a5b      	ldrb	r3, [r3, #9]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d105      	bne.n	8002534 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2101      	movs	r1, #1
 800252e:	4618      	mov	r0, r3
 8002530:	f002 ffd0 	bl	80054d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f010 fc1b 	bl	8012d70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f002 fe90 	bl	8005264 <USB_ReadInterrupts>
 8002544:	4603      	mov	r3, r0
 8002546:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800254a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800254e:	d102      	bne.n	8002556 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f001 fd33 	bl	8003fbc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f002 fe82 	bl	8005264 <USB_ReadInterrupts>
 8002560:	4603      	mov	r3, r0
 8002562:	f003 0308 	and.w	r3, r3, #8
 8002566:	2b08      	cmp	r3, #8
 8002568:	d106      	bne.n	8002578 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f010 fbe4 	bl	8012d38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2208      	movs	r2, #8
 8002576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fe71 	bl	8005264 <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002588:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800258c:	d139      	bne.n	8002602 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f003 fc0c 	bl	8005db0 <USB_HC_ReadInterrupt>
 8002598:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	e025      	b.n	80025ec <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	f003 030f 	and.w	r3, r3, #15
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	fa22 f303 	lsr.w	r3, r2, r3
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d018      	beq.n	80025e6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	015a      	lsls	r2, r3, #5
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4413      	add	r3, r2
 80025bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025c6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025ca:	d106      	bne.n	80025da <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f905 	bl	80027e2 <HCD_HC_IN_IRQHandler>
 80025d8:	e005      	b.n	80025e6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	4619      	mov	r1, r3
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 ff67 	bl	80034b4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3301      	adds	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	795b      	ldrb	r3, [r3, #5]
 80025f0:	461a      	mov	r2, r3
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d3d3      	bcc.n	80025a0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002600:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f002 fe2c 	bl	8005264 <USB_ReadInterrupts>
 800260c:	4603      	mov	r3, r0
 800260e:	f003 0310 	and.w	r3, r3, #16
 8002612:	2b10      	cmp	r3, #16
 8002614:	d101      	bne.n	800261a <HAL_HCD_IRQHandler+0x1ea>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_HCD_IRQHandler+0x1ec>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d014      	beq.n	800264a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	699a      	ldr	r2, [r3, #24]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0210 	bic.w	r2, r2, #16
 800262e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f001 fbe4 	bl	8003dfe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	699a      	ldr	r2, [r3, #24]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f042 0210 	orr.w	r2, r2, #16
 8002644:	619a      	str	r2, [r3, #24]
 8002646:	e000      	b.n	800264a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002648:	bf00      	nop
    }
  }
}
 800264a:	3718      	adds	r7, #24
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800265e:	2b01      	cmp	r3, #1
 8002660:	d101      	bne.n	8002666 <HAL_HCD_Start+0x16>
 8002662:	2302      	movs	r3, #2
 8002664:	e013      	b.n	800268e <HAL_HCD_Start+0x3e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2101      	movs	r1, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f002 ff94 	bl	80055a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f002 fc8c 	bl	8004f9c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2200      	movs	r2, #0
 8002688:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d101      	bne.n	80026ac <HAL_HCD_Stop+0x16>
 80026a8:	2302      	movs	r3, #2
 80026aa:	e00d      	b.n	80026c8 <HAL_HCD_Stop+0x32>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 fce7 	bl	800608c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f002 ff36 	bl	800554e <USB_ResetPort>
 80026e2:	4603      	mov	r3, r0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3708      	adds	r7, #8
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026f8:	78fa      	ldrb	r2, [r7, #3]
 80026fa:	6879      	ldr	r1, [r7, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	011b      	lsls	r3, r3, #4
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	334c      	adds	r3, #76	@ 0x4c
 8002708:	781b      	ldrb	r3, [r3, #0]
}
 800270a:	4618      	mov	r0, r3
 800270c:	370c      	adds	r7, #12
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr

08002716 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002716:	b480      	push	{r7}
 8002718:	b083      	sub	sp, #12
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	6879      	ldr	r1, [r7, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	011b      	lsls	r3, r3, #4
 800272a:	1a9b      	subs	r3, r3, r2
 800272c:	009b      	lsls	r3, r3, #2
 800272e:	440b      	add	r3, r1
 8002730:	3338      	adds	r3, #56	@ 0x38
 8002732:	681b      	ldr	r3, [r3, #0]
}
 8002734:	4618      	mov	r0, r3
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f002 ff78 	bl	8005642 <USB_GetCurrentFrame>
 8002752:	4603      	mov	r3, r0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b082      	sub	sp, #8
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f002 ff53 	bl	8005614 <USB_GetHostSpeed>
 800276e:	4603      	mov	r3, r0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	460b      	mov	r3, r1
 8002782:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	011b      	lsls	r3, r3, #4
 800278c:	1a9b      	subs	r3, r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	331a      	adds	r3, #26
 8002794:	2200      	movs	r2, #0
 8002796:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	011b      	lsls	r3, r3, #4
 80027a0:	1a9b      	subs	r3, r3, r2
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	440b      	add	r3, r1
 80027a6:	331b      	adds	r3, #27
 80027a8:	2200      	movs	r2, #0
 80027aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3325      	adds	r3, #37	@ 0x25
 80027bc:	2200      	movs	r2, #0
 80027be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3324      	adds	r3, #36	@ 0x24
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f002 fd42 	bl	800528a <USB_ReadChInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b04      	cmp	r3, #4
 800280e:	d11a      	bne.n	8002846 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002810:	78fb      	ldrb	r3, [r7, #3]
 8002812:	015a      	lsls	r2, r3, #5
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	4413      	add	r3, r2
 8002818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800281c:	461a      	mov	r2, r3
 800281e:	2304      	movs	r3, #4
 8002820:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002822:	78fa      	ldrb	r2, [r7, #3]
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	4613      	mov	r3, r2
 8002828:	011b      	lsls	r3, r3, #4
 800282a:	1a9b      	subs	r3, r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	334d      	adds	r3, #77	@ 0x4d
 8002832:	2207      	movs	r2, #7
 8002834:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f003 fac7 	bl	8005dd2 <USB_HC_Halt>
 8002844:	e09e      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	78fa      	ldrb	r2, [r7, #3]
 800284c:	4611      	mov	r1, r2
 800284e:	4618      	mov	r0, r3
 8002850:	f002 fd1b 	bl	800528a <USB_ReadChInterrupts>
 8002854:	4603      	mov	r3, r0
 8002856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800285a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800285e:	d11b      	bne.n	8002898 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286c:	461a      	mov	r2, r3
 800286e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002872:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002874:	78fa      	ldrb	r2, [r7, #3]
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	4613      	mov	r3, r2
 800287a:	011b      	lsls	r3, r3, #4
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	440b      	add	r3, r1
 8002882:	334d      	adds	r3, #77	@ 0x4d
 8002884:	2208      	movs	r2, #8
 8002886:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	4611      	mov	r1, r2
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fa9e 	bl	8005dd2 <USB_HC_Halt>
 8002896:	e075      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	4611      	mov	r1, r2
 80028a0:	4618      	mov	r0, r3
 80028a2:	f002 fcf2 	bl	800528a <USB_ReadChInterrupts>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f003 0308 	and.w	r3, r3, #8
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d11a      	bne.n	80028e6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80028b0:	78fb      	ldrb	r3, [r7, #3]
 80028b2:	015a      	lsls	r2, r3, #5
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	4413      	add	r3, r2
 80028b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028bc:	461a      	mov	r2, r3
 80028be:	2308      	movs	r3, #8
 80028c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80028c2:	78fa      	ldrb	r2, [r7, #3]
 80028c4:	6879      	ldr	r1, [r7, #4]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	440b      	add	r3, r1
 80028d0:	334d      	adds	r3, #77	@ 0x4d
 80028d2:	2206      	movs	r2, #6
 80028d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 fa77 	bl	8005dd2 <USB_HC_Halt>
 80028e4:	e04e      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	4611      	mov	r1, r2
 80028ee:	4618      	mov	r0, r3
 80028f0:	f002 fccb 	bl	800528a <USB_ReadChInterrupts>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028fe:	d11b      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002900:	78fb      	ldrb	r3, [r7, #3]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800290c:	461a      	mov	r2, r3
 800290e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002912:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	6879      	ldr	r1, [r7, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	1a9b      	subs	r3, r3, r2
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	440b      	add	r3, r1
 8002922:	334d      	adds	r3, #77	@ 0x4d
 8002924:	2209      	movs	r2, #9
 8002926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	78fa      	ldrb	r2, [r7, #3]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f003 fa4e 	bl	8005dd2 <USB_HC_Halt>
 8002936:	e025      	b.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	78fa      	ldrb	r2, [r7, #3]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fca2 	bl	800528a <USB_ReadChInterrupts>
 8002946:	4603      	mov	r3, r0
 8002948:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800294c:	2b80      	cmp	r3, #128	@ 0x80
 800294e:	d119      	bne.n	8002984 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002950:	78fb      	ldrb	r3, [r7, #3]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2380      	movs	r3, #128	@ 0x80
 8002960:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	334d      	adds	r3, #77	@ 0x4d
 8002972:	2207      	movs	r2, #7
 8002974:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	78fa      	ldrb	r2, [r7, #3]
 800297c:	4611      	mov	r1, r2
 800297e:	4618      	mov	r0, r3
 8002980:	f003 fa27 	bl	8005dd2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	78fa      	ldrb	r2, [r7, #3]
 800298a:	4611      	mov	r1, r2
 800298c:	4618      	mov	r0, r3
 800298e:	f002 fc7c 	bl	800528a <USB_ReadChInterrupts>
 8002992:	4603      	mov	r3, r0
 8002994:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002998:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800299c:	d112      	bne.n	80029c4 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	78fa      	ldrb	r2, [r7, #3]
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f003 fa13 	bl	8005dd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80029ac:	78fb      	ldrb	r3, [r7, #3]
 80029ae:	015a      	lsls	r2, r3, #5
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	4413      	add	r3, r2
 80029b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b8:	461a      	mov	r2, r3
 80029ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80029be:	6093      	str	r3, [r2, #8]
 80029c0:	f000 bd75 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f002 fc5c 	bl	800528a <USB_ReadChInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b01      	cmp	r3, #1
 80029da:	f040 8128 	bne.w	8002c2e <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80029de:	78fb      	ldrb	r3, [r7, #3]
 80029e0:	015a      	lsls	r2, r3, #5
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	4413      	add	r3, r2
 80029e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ea:	461a      	mov	r2, r3
 80029ec:	2320      	movs	r3, #32
 80029ee:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80029f0:	78fa      	ldrb	r2, [r7, #3]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	011b      	lsls	r3, r3, #4
 80029f8:	1a9b      	subs	r3, r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	331b      	adds	r3, #27
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d119      	bne.n	8002a3a <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	331b      	adds	r3, #27
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	015a      	lsls	r2, r3, #5
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	4413      	add	r3, r2
 8002a22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	78fa      	ldrb	r2, [r7, #3]
 8002a2a:	0151      	lsls	r1, r2, #5
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	440a      	add	r2, r1
 8002a30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a38:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	799b      	ldrb	r3, [r3, #6]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d01b      	beq.n	8002a7a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002a42:	78fa      	ldrb	r2, [r7, #3]
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	1a9b      	subs	r3, r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	440b      	add	r3, r1
 8002a50:	3330      	adds	r3, #48	@ 0x30
 8002a52:	6819      	ldr	r1, [r3, #0]
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	1ac9      	subs	r1, r1, r3
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	1a9b      	subs	r3, r3, r2
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4403      	add	r3, r0
 8002a76:	3338      	adds	r3, #56	@ 0x38
 8002a78:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002a7a:	78fa      	ldrb	r2, [r7, #3]
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	011b      	lsls	r3, r3, #4
 8002a82:	1a9b      	subs	r3, r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	334d      	adds	r3, #77	@ 0x4d
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	3344      	adds	r3, #68	@ 0x44
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	015a      	lsls	r2, r3, #5
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	4413      	add	r3, r2
 8002aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aae:	461a      	mov	r2, r3
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	3326      	adds	r3, #38	@ 0x26
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00a      	beq.n	8002ae0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	6879      	ldr	r1, [r7, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	1a9b      	subs	r3, r3, r2
 8002ad4:	009b      	lsls	r3, r3, #2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	3326      	adds	r3, #38	@ 0x26
 8002ada:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d110      	bne.n	8002b02 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	78fa      	ldrb	r2, [r7, #3]
 8002ae6:	4611      	mov	r1, r2
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f003 f972 	bl	8005dd2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	015a      	lsls	r2, r3, #5
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	4413      	add	r3, r2
 8002af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afa:	461a      	mov	r2, r3
 8002afc:	2310      	movs	r3, #16
 8002afe:	6093      	str	r3, [r2, #8]
 8002b00:	e03d      	b.n	8002b7e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002b02:	78fa      	ldrb	r2, [r7, #3]
 8002b04:	6879      	ldr	r1, [r7, #4]
 8002b06:	4613      	mov	r3, r2
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	1a9b      	subs	r3, r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	440b      	add	r3, r1
 8002b10:	3326      	adds	r3, #38	@ 0x26
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d00a      	beq.n	8002b2e <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	3326      	adds	r3, #38	@ 0x26
 8002b28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d127      	bne.n	8002b7e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002b2e:	78fb      	ldrb	r3, [r7, #3]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	0151      	lsls	r1, r2, #5
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	440a      	add	r2, r1
 8002b44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002b4c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002b4e:	78fa      	ldrb	r2, [r7, #3]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	1a9b      	subs	r3, r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	334c      	adds	r3, #76	@ 0x4c
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b62:	78fa      	ldrb	r2, [r7, #3]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	334c      	adds	r3, #76	@ 0x4c
 8002b72:	781a      	ldrb	r2, [r3, #0]
 8002b74:	78fb      	ldrb	r3, [r7, #3]
 8002b76:	4619      	mov	r1, r3
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f010 f907 	bl	8012d8c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	799b      	ldrb	r3, [r3, #6]
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d13b      	bne.n	8002bfe <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002b86:	78fa      	ldrb	r2, [r7, #3]
 8002b88:	6879      	ldr	r1, [r7, #4]
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	011b      	lsls	r3, r3, #4
 8002b8e:	1a9b      	subs	r3, r3, r2
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	3338      	adds	r3, #56	@ 0x38
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	4403      	add	r3, r0
 8002ba6:	3328      	adds	r3, #40	@ 0x28
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	440b      	add	r3, r1
 8002bac:	1e59      	subs	r1, r3, #1
 8002bae:	78fa      	ldrb	r2, [r7, #3]
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	011b      	lsls	r3, r3, #4
 8002bb6:	1a9b      	subs	r3, r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4403      	add	r3, r0
 8002bbc:	3328      	adds	r3, #40	@ 0x28
 8002bbe:	881b      	ldrh	r3, [r3, #0]
 8002bc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8470 	beq.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	333c      	adds	r3, #60	@ 0x3c
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	78fa      	ldrb	r2, [r7, #3]
 8002be2:	f083 0301 	eor.w	r3, r3, #1
 8002be6:	b2d8      	uxtb	r0, r3
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	333c      	adds	r3, #60	@ 0x3c
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	701a      	strb	r2, [r3, #0]
 8002bfa:	f000 bc58 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	333c      	adds	r3, #60	@ 0x3c
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	f083 0301 	eor.w	r3, r3, #1
 8002c16:	b2d8      	uxtb	r0, r3
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	011b      	lsls	r3, r3, #4
 8002c1e:	1a9b      	subs	r3, r3, r2
 8002c20:	009b      	lsls	r3, r3, #2
 8002c22:	440b      	add	r3, r1
 8002c24:	333c      	adds	r3, #60	@ 0x3c
 8002c26:	4602      	mov	r2, r0
 8002c28:	701a      	strb	r2, [r3, #0]
 8002c2a:	f000 bc40 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	4611      	mov	r1, r2
 8002c36:	4618      	mov	r0, r3
 8002c38:	f002 fb27 	bl	800528a <USB_ReadChInterrupts>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	f003 0320 	and.w	r3, r3, #32
 8002c42:	2b20      	cmp	r3, #32
 8002c44:	d131      	bne.n	8002caa <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c52:	461a      	mov	r2, r3
 8002c54:	2320      	movs	r3, #32
 8002c56:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	440b      	add	r3, r1
 8002c66:	331a      	adds	r3, #26
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	f040 841f 	bne.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	331b      	adds	r3, #27
 8002c80:	2201      	movs	r2, #1
 8002c82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c84:	78fa      	ldrb	r2, [r7, #3]
 8002c86:	6879      	ldr	r1, [r7, #4]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	011b      	lsls	r3, r3, #4
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	440b      	add	r3, r1
 8002c92:	334d      	adds	r3, #77	@ 0x4d
 8002c94:	2203      	movs	r2, #3
 8002c96:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	4611      	mov	r1, r2
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f003 f896 	bl	8005dd2 <USB_HC_Halt>
 8002ca6:	f000 bc02 	b.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	78fa      	ldrb	r2, [r7, #3]
 8002cb0:	4611      	mov	r1, r2
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f002 fae9 	bl	800528a <USB_ReadChInterrupts>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	f040 8305 	bne.w	80032ce <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002cc4:	78fb      	ldrb	r3, [r7, #3]
 8002cc6:	015a      	lsls	r2, r3, #5
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	4413      	add	r3, r2
 8002ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	334d      	adds	r3, #77	@ 0x4d
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d114      	bne.n	8002d16 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334d      	adds	r3, #77	@ 0x4d
 8002cfc:	2202      	movs	r2, #2
 8002cfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	334c      	adds	r3, #76	@ 0x4c
 8002d10:	2201      	movs	r2, #1
 8002d12:	701a      	strb	r2, [r3, #0]
 8002d14:	e2cc      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002d16:	78fa      	ldrb	r2, [r7, #3]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	1a9b      	subs	r3, r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	334d      	adds	r3, #77	@ 0x4d
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b06      	cmp	r3, #6
 8002d2a:	d114      	bne.n	8002d56 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d2c:	78fa      	ldrb	r2, [r7, #3]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	1a9b      	subs	r3, r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	334d      	adds	r3, #77	@ 0x4d
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002d40:	78fa      	ldrb	r2, [r7, #3]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	011b      	lsls	r3, r3, #4
 8002d48:	1a9b      	subs	r3, r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	334c      	adds	r3, #76	@ 0x4c
 8002d50:	2205      	movs	r2, #5
 8002d52:	701a      	strb	r2, [r3, #0]
 8002d54:	e2ac      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d56:	78fa      	ldrb	r2, [r7, #3]
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	440b      	add	r3, r1
 8002d64:	334d      	adds	r3, #77	@ 0x4d
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	d00b      	beq.n	8002d84 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334d      	adds	r3, #77	@ 0x4d
 8002d7c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d7e:	2b09      	cmp	r3, #9
 8002d80:	f040 80a6 	bne.w	8002ed0 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	334d      	adds	r3, #77	@ 0x4d
 8002d94:	2202      	movs	r2, #2
 8002d96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d98:	78fa      	ldrb	r2, [r7, #3]
 8002d9a:	6879      	ldr	r1, [r7, #4]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	011b      	lsls	r3, r3, #4
 8002da0:	1a9b      	subs	r3, r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	3344      	adds	r3, #68	@ 0x44
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	1c59      	adds	r1, r3, #1
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	011b      	lsls	r3, r3, #4
 8002db2:	1a9b      	subs	r3, r3, r2
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	4403      	add	r3, r0
 8002db8:	3344      	adds	r3, #68	@ 0x44
 8002dba:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3344      	adds	r3, #68	@ 0x44
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d943      	bls.n	8002e5a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3344      	adds	r3, #68	@ 0x44
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	331a      	adds	r3, #26
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d123      	bne.n	8002e44 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002dfc:	78fa      	ldrb	r2, [r7, #3]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	011b      	lsls	r3, r3, #4
 8002e04:	1a9b      	subs	r3, r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	331b      	adds	r3, #27
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	331c      	adds	r3, #28
 8002e20:	2200      	movs	r2, #0
 8002e22:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e24:	78fb      	ldrb	r3, [r7, #3]
 8002e26:	015a      	lsls	r2, r3, #5
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	0151      	lsls	r1, r2, #5
 8002e36:	693a      	ldr	r2, [r7, #16]
 8002e38:	440a      	add	r2, r1
 8002e3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e42:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334c      	adds	r3, #76	@ 0x4c
 8002e54:	2204      	movs	r2, #4
 8002e56:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e58:	e229      	b.n	80032ae <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334c      	adds	r3, #76	@ 0x4c
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e6e:	78fa      	ldrb	r2, [r7, #3]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	4613      	mov	r3, r2
 8002e74:	011b      	lsls	r3, r3, #4
 8002e76:	1a9b      	subs	r3, r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	440b      	add	r3, r1
 8002e7c:	3326      	adds	r3, #38	@ 0x26
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00b      	beq.n	8002e9c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	011b      	lsls	r3, r3, #4
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	009b      	lsls	r3, r3, #2
 8002e90:	440b      	add	r3, r1
 8002e92:	3326      	adds	r3, #38	@ 0x26
 8002e94:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	f040 8209 	bne.w	80032ae <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	015a      	lsls	r2, r3, #5
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002eb2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002eba:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ebc:	78fb      	ldrb	r3, [r7, #3]
 8002ebe:	015a      	lsls	r2, r3, #5
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	4413      	add	r3, r2
 8002ec4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ece:	e1ee      	b.n	80032ae <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ed0:	78fa      	ldrb	r2, [r7, #3]
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	011b      	lsls	r3, r3, #4
 8002ed8:	1a9b      	subs	r3, r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	334d      	adds	r3, #77	@ 0x4d
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b05      	cmp	r3, #5
 8002ee4:	f040 80c8 	bne.w	8003078 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ee8:	78fa      	ldrb	r2, [r7, #3]
 8002eea:	6879      	ldr	r1, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	440b      	add	r3, r1
 8002ef6:	334d      	adds	r3, #77	@ 0x4d
 8002ef8:	2202      	movs	r2, #2
 8002efa:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002efc:	78fa      	ldrb	r2, [r7, #3]
 8002efe:	6879      	ldr	r1, [r7, #4]
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	331b      	adds	r3, #27
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 81ce 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3326      	adds	r3, #38	@ 0x26
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d16b      	bne.n	8003002 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3348      	adds	r3, #72	@ 0x48
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	1c59      	adds	r1, r3, #1
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	4403      	add	r3, r0
 8002f4a:	3348      	adds	r3, #72	@ 0x48
 8002f4c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	3348      	adds	r3, #72	@ 0x48
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d943      	bls.n	8002fec <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3348      	adds	r3, #72	@ 0x48
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002f78:	78fa      	ldrb	r2, [r7, #3]
 8002f7a:	6879      	ldr	r1, [r7, #4]
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	1a9b      	subs	r3, r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	331b      	adds	r3, #27
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	6879      	ldr	r1, [r7, #4]
 8002f90:	4613      	mov	r3, r2
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	1a9b      	subs	r3, r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	440b      	add	r3, r1
 8002f9a:	3344      	adds	r3, #68	@ 0x44
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d809      	bhi.n	8002fb6 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	331c      	adds	r3, #28
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	0151      	lsls	r1, r2, #5
 8002fc8:	693a      	ldr	r2, [r7, #16]
 8002fca:	440a      	add	r2, r1
 8002fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd4:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	6879      	ldr	r1, [r7, #4]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	011b      	lsls	r3, r3, #4
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	440b      	add	r3, r1
 8002fe4:	334c      	adds	r3, #76	@ 0x4c
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	701a      	strb	r2, [r3, #0]
 8002fea:	e014      	b.n	8003016 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334c      	adds	r3, #76	@ 0x4c
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e009      	b.n	8003016 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003002:	78fa      	ldrb	r2, [r7, #3]
 8003004:	6879      	ldr	r1, [r7, #4]
 8003006:	4613      	mov	r3, r2
 8003008:	011b      	lsls	r3, r3, #4
 800300a:	1a9b      	subs	r3, r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	440b      	add	r3, r1
 8003010:	334c      	adds	r3, #76	@ 0x4c
 8003012:	2202      	movs	r2, #2
 8003014:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003016:	78fa      	ldrb	r2, [r7, #3]
 8003018:	6879      	ldr	r1, [r7, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	011b      	lsls	r3, r3, #4
 800301e:	1a9b      	subs	r3, r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	3326      	adds	r3, #38	@ 0x26
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	4613      	mov	r3, r2
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	1a9b      	subs	r3, r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	440b      	add	r3, r1
 800303a:	3326      	adds	r3, #38	@ 0x26
 800303c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303e:	2b02      	cmp	r3, #2
 8003040:	f040 8136 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003044:	78fb      	ldrb	r3, [r7, #3]
 8003046:	015a      	lsls	r2, r3, #5
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4413      	add	r3, r2
 800304c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800305a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003062:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003064:	78fb      	ldrb	r3, [r7, #3]
 8003066:	015a      	lsls	r2, r3, #5
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	4413      	add	r3, r2
 800306c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003070:	461a      	mov	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6013      	str	r3, [r2, #0]
 8003076:	e11b      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003078:	78fa      	ldrb	r2, [r7, #3]
 800307a:	6879      	ldr	r1, [r7, #4]
 800307c:	4613      	mov	r3, r2
 800307e:	011b      	lsls	r3, r3, #4
 8003080:	1a9b      	subs	r3, r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	440b      	add	r3, r1
 8003086:	334d      	adds	r3, #77	@ 0x4d
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b03      	cmp	r3, #3
 800308c:	f040 8081 	bne.w	8003192 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334d      	adds	r3, #77	@ 0x4d
 80030a0:	2202      	movs	r2, #2
 80030a2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030a4:	78fa      	ldrb	r2, [r7, #3]
 80030a6:	6879      	ldr	r1, [r7, #4]
 80030a8:	4613      	mov	r3, r2
 80030aa:	011b      	lsls	r3, r3, #4
 80030ac:	1a9b      	subs	r3, r3, r2
 80030ae:	009b      	lsls	r3, r3, #2
 80030b0:	440b      	add	r3, r1
 80030b2:	331b      	adds	r3, #27
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	f040 80fa 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334c      	adds	r3, #76	@ 0x4c
 80030cc:	2202      	movs	r2, #2
 80030ce:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80030d0:	78fb      	ldrb	r3, [r7, #3]
 80030d2:	015a      	lsls	r2, r3, #5
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	4413      	add	r3, r2
 80030d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	0151      	lsls	r1, r2, #5
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	440a      	add	r2, r1
 80030e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030ee:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80030f0:	78fb      	ldrb	r3, [r7, #3]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	0151      	lsls	r1, r2, #5
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	440a      	add	r2, r1
 8003106:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800310a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800310e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003110:	78fb      	ldrb	r3, [r7, #3]
 8003112:	015a      	lsls	r2, r3, #5
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	4413      	add	r3, r2
 8003118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	0151      	lsls	r1, r2, #5
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	440a      	add	r2, r1
 8003126:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800312a:	f023 0320 	bic.w	r3, r3, #32
 800312e:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3326      	adds	r3, #38	@ 0x26
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003146:	78fa      	ldrb	r2, [r7, #3]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	1a9b      	subs	r3, r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	3326      	adds	r3, #38	@ 0x26
 8003156:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003158:	2b02      	cmp	r3, #2
 800315a:	f040 80a9 	bne.w	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800315e:	78fb      	ldrb	r3, [r7, #3]
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4413      	add	r3, r2
 8003166:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003174:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800317c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800317e:	78fb      	ldrb	r3, [r7, #3]
 8003180:	015a      	lsls	r2, r3, #5
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4413      	add	r3, r2
 8003186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6013      	str	r3, [r2, #0]
 8003190:	e08e      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334d      	adds	r3, #77	@ 0x4d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b04      	cmp	r3, #4
 80031a6:	d143      	bne.n	8003230 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	334c      	adds	r3, #76	@ 0x4c
 80031cc:	2202      	movs	r2, #2
 80031ce:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	011b      	lsls	r3, r3, #4
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	3326      	adds	r3, #38	@ 0x26
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031e6:	78fa      	ldrb	r2, [r7, #3]
 80031e8:	6879      	ldr	r1, [r7, #4]
 80031ea:	4613      	mov	r3, r2
 80031ec:	011b      	lsls	r3, r3, #4
 80031ee:	1a9b      	subs	r3, r3, r2
 80031f0:	009b      	lsls	r3, r3, #2
 80031f2:	440b      	add	r3, r1
 80031f4:	3326      	adds	r3, #38	@ 0x26
 80031f6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d159      	bne.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	015a      	lsls	r2, r3, #5
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	4413      	add	r3, r2
 8003204:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003212:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800321a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800321c:	78fb      	ldrb	r3, [r7, #3]
 800321e:	015a      	lsls	r2, r3, #5
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4413      	add	r3, r2
 8003224:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003228:	461a      	mov	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e03f      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003230:	78fa      	ldrb	r2, [r7, #3]
 8003232:	6879      	ldr	r1, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	011b      	lsls	r3, r3, #4
 8003238:	1a9b      	subs	r3, r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	334d      	adds	r3, #77	@ 0x4d
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b08      	cmp	r3, #8
 8003244:	d126      	bne.n	8003294 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	3344      	adds	r3, #68	@ 0x44
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	1c59      	adds	r1, r3, #1
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	4613      	mov	r3, r2
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4403      	add	r3, r0
 800327a:	3344      	adds	r3, #68	@ 0x44
 800327c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	4613      	mov	r3, r2
 8003284:	011b      	lsls	r3, r3, #4
 8003286:	1a9b      	subs	r3, r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	334c      	adds	r3, #76	@ 0x4c
 800328e:	2204      	movs	r2, #4
 8003290:	701a      	strb	r2, [r3, #0]
 8003292:	e00d      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003294:	78fa      	ldrb	r2, [r7, #3]
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	4613      	mov	r3, r2
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	1a9b      	subs	r3, r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	440b      	add	r3, r1
 80032a2:	334d      	adds	r3, #77	@ 0x4d
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	f000 8100 	beq.w	80034ac <HCD_HC_IN_IRQHandler+0xcca>
 80032ac:	e000      	b.n	80032b0 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80032ae:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	334c      	adds	r3, #76	@ 0x4c
 80032c0:	781a      	ldrb	r2, [r3, #0]
 80032c2:	78fb      	ldrb	r3, [r7, #3]
 80032c4:	4619      	mov	r1, r3
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f00f fd60 	bl	8012d8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80032cc:	e0ef      	b.n	80034ae <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	4611      	mov	r1, r2
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 ffd7 	bl	800528a <USB_ReadChInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032e2:	2b40      	cmp	r3, #64	@ 0x40
 80032e4:	d12f      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80032e6:	78fb      	ldrb	r3, [r7, #3]
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f2:	461a      	mov	r2, r3
 80032f4:	2340      	movs	r3, #64	@ 0x40
 80032f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	6879      	ldr	r1, [r7, #4]
 80032fc:	4613      	mov	r3, r2
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	1a9b      	subs	r3, r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	334d      	adds	r3, #77	@ 0x4d
 8003308:	2205      	movs	r2, #5
 800330a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	331a      	adds	r3, #26
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d109      	bne.n	8003336 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	78fa      	ldrb	r2, [r7, #3]
 800333c:	4611      	mov	r1, r2
 800333e:	4618      	mov	r0, r3
 8003340:	f002 fd47 	bl	8005dd2 <USB_HC_Halt>
 8003344:	e0b3      	b.n	80034ae <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	4611      	mov	r1, r2
 800334e:	4618      	mov	r0, r3
 8003350:	f001 ff9b 	bl	800528a <USB_ReadChInterrupts>
 8003354:	4603      	mov	r3, r0
 8003356:	f003 0310 	and.w	r3, r3, #16
 800335a:	2b10      	cmp	r3, #16
 800335c:	f040 80a7 	bne.w	80034ae <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	011b      	lsls	r3, r3, #4
 8003368:	1a9b      	subs	r3, r3, r2
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	3326      	adds	r3, #38	@ 0x26
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b03      	cmp	r3, #3
 8003374:	d11b      	bne.n	80033ae <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003376:	78fa      	ldrb	r2, [r7, #3]
 8003378:	6879      	ldr	r1, [r7, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	011b      	lsls	r3, r3, #4
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	009b      	lsls	r3, r3, #2
 8003382:	440b      	add	r3, r1
 8003384:	3344      	adds	r3, #68	@ 0x44
 8003386:	2200      	movs	r2, #0
 8003388:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800338a:	78fa      	ldrb	r2, [r7, #3]
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	4613      	mov	r3, r2
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	1a9b      	subs	r3, r3, r2
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	440b      	add	r3, r1
 8003398:	334d      	adds	r3, #77	@ 0x4d
 800339a:	2204      	movs	r2, #4
 800339c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	4611      	mov	r1, r2
 80033a6:	4618      	mov	r0, r3
 80033a8:	f002 fd13 	bl	8005dd2 <USB_HC_Halt>
 80033ac:	e03f      	b.n	800342e <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3326      	adds	r3, #38	@ 0x26
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00a      	beq.n	80033da <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	3326      	adds	r3, #38	@ 0x26
 80033d4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d129      	bne.n	800342e <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	3344      	adds	r3, #68	@ 0x44
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	799b      	ldrb	r3, [r3, #6]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HCD_HC_IN_IRQHandler+0xc2a>
 80033f6:	78fa      	ldrb	r2, [r7, #3]
 80033f8:	6879      	ldr	r1, [r7, #4]
 80033fa:	4613      	mov	r3, r2
 80033fc:	011b      	lsls	r3, r3, #4
 80033fe:	1a9b      	subs	r3, r3, r2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	440b      	add	r3, r1
 8003404:	331b      	adds	r3, #27
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b01      	cmp	r3, #1
 800340a:	d110      	bne.n	800342e <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	2204      	movs	r2, #4
 800341e:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	78fa      	ldrb	r2, [r7, #3]
 8003426:	4611      	mov	r1, r2
 8003428:	4618      	mov	r0, r3
 800342a:	f002 fcd2 	bl	8005dd2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800342e:	78fa      	ldrb	r2, [r7, #3]
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	4613      	mov	r3, r2
 8003434:	011b      	lsls	r3, r3, #4
 8003436:	1a9b      	subs	r3, r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	440b      	add	r3, r1
 800343c:	331b      	adds	r3, #27
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d129      	bne.n	8003498 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	331b      	adds	r3, #27
 8003454:	2200      	movs	r2, #0
 8003456:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003458:	78fb      	ldrb	r3, [r7, #3]
 800345a:	015a      	lsls	r2, r3, #5
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	4413      	add	r3, r2
 8003460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	0151      	lsls	r1, r2, #5
 800346a:	693a      	ldr	r2, [r7, #16]
 800346c:	440a      	add	r2, r1
 800346e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003478:	78fb      	ldrb	r3, [r7, #3]
 800347a:	015a      	lsls	r2, r3, #5
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	4413      	add	r3, r2
 8003480:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003484:	68db      	ldr	r3, [r3, #12]
 8003486:	78fa      	ldrb	r2, [r7, #3]
 8003488:	0151      	lsls	r1, r2, #5
 800348a:	693a      	ldr	r2, [r7, #16]
 800348c:	440a      	add	r2, r1
 800348e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003492:	f043 0320 	orr.w	r3, r3, #32
 8003496:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	015a      	lsls	r2, r3, #5
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	4413      	add	r3, r2
 80034a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034a4:	461a      	mov	r2, r3
 80034a6:	2310      	movs	r3, #16
 80034a8:	6093      	str	r3, [r2, #8]
 80034aa:	e000      	b.n	80034ae <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80034ac:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b086      	sub	sp, #24
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 fed9 	bl	800528a <USB_ReadChInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b04      	cmp	r3, #4
 80034e0:	d11b      	bne.n	800351a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ee:	461a      	mov	r2, r3
 80034f0:	2304      	movs	r3, #4
 80034f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	334d      	adds	r3, #77	@ 0x4d
 8003504:	2207      	movs	r2, #7
 8003506:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	4611      	mov	r1, r2
 8003510:	4618      	mov	r0, r3
 8003512:	f002 fc5e 	bl	8005dd2 <USB_HC_Halt>
 8003516:	f000 bc6f 	b.w	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	78fa      	ldrb	r2, [r7, #3]
 8003520:	4611      	mov	r1, r2
 8003522:	4618      	mov	r0, r3
 8003524:	f001 feb1 	bl	800528a <USB_ReadChInterrupts>
 8003528:	4603      	mov	r3, r0
 800352a:	f003 0320 	and.w	r3, r3, #32
 800352e:	2b20      	cmp	r3, #32
 8003530:	f040 8082 	bne.w	8003638 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	015a      	lsls	r2, r3, #5
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003540:	461a      	mov	r2, r3
 8003542:	2320      	movs	r3, #32
 8003544:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3319      	adds	r3, #25
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d124      	bne.n	80035a6 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	6879      	ldr	r1, [r7, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	1a9b      	subs	r3, r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	440b      	add	r3, r1
 800356a:	3319      	adds	r3, #25
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	334c      	adds	r3, #76	@ 0x4c
 8003580:	2202      	movs	r2, #2
 8003582:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003584:	78fa      	ldrb	r2, [r7, #3]
 8003586:	6879      	ldr	r1, [r7, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	1a9b      	subs	r3, r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	334d      	adds	r3, #77	@ 0x4d
 8003594:	2203      	movs	r2, #3
 8003596:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	78fa      	ldrb	r2, [r7, #3]
 800359e:	4611      	mov	r1, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f002 fc16 	bl	8005dd2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	331a      	adds	r3, #26
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 841d 	bne.w	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	4613      	mov	r3, r2
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	1a9b      	subs	r3, r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	440b      	add	r3, r1
 80035cc:	331b      	adds	r3, #27
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 8411 	bne.w	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3326      	adds	r3, #38	@ 0x26
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d009      	beq.n	8003600 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	331b      	adds	r3, #27
 80035fc:	2201      	movs	r2, #1
 80035fe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	334d      	adds	r3, #77	@ 0x4d
 8003610:	2203      	movs	r2, #3
 8003612:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f002 fbd8 	bl	8005dd2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3344      	adds	r3, #68	@ 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	e3df      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	78fa      	ldrb	r2, [r7, #3]
 800363e:	4611      	mov	r1, r2
 8003640:	4618      	mov	r0, r3
 8003642:	f001 fe22 	bl	800528a <USB_ReadChInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800364c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003650:	d111      	bne.n	8003676 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003652:	78fb      	ldrb	r3, [r7, #3]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800365e:	461a      	mov	r2, r3
 8003660:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003664:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	78fa      	ldrb	r2, [r7, #3]
 800366c:	4611      	mov	r1, r2
 800366e:	4618      	mov	r0, r3
 8003670:	f002 fbaf 	bl	8005dd2 <USB_HC_Halt>
 8003674:	e3c0      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	4611      	mov	r1, r2
 800367e:	4618      	mov	r0, r3
 8003680:	f001 fe03 	bl	800528a <USB_ReadChInterrupts>
 8003684:	4603      	mov	r3, r0
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	2b01      	cmp	r3, #1
 800368c:	d168      	bne.n	8003760 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800368e:	78fa      	ldrb	r2, [r7, #3]
 8003690:	6879      	ldr	r1, [r7, #4]
 8003692:	4613      	mov	r3, r2
 8003694:	011b      	lsls	r3, r3, #4
 8003696:	1a9b      	subs	r3, r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	440b      	add	r3, r1
 800369c:	3344      	adds	r3, #68	@ 0x44
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f001 fded 	bl	800528a <USB_ReadChInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b6:	2b40      	cmp	r3, #64	@ 0x40
 80036b8:	d112      	bne.n	80036e0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036ba:	78fa      	ldrb	r2, [r7, #3]
 80036bc:	6879      	ldr	r1, [r7, #4]
 80036be:	4613      	mov	r3, r2
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	1a9b      	subs	r3, r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3319      	adds	r3, #25
 80036ca:	2201      	movs	r2, #1
 80036cc:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036da:	461a      	mov	r2, r3
 80036dc:	2340      	movs	r3, #64	@ 0x40
 80036de:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80036e0:	78fa      	ldrb	r2, [r7, #3]
 80036e2:	6879      	ldr	r1, [r7, #4]
 80036e4:	4613      	mov	r3, r2
 80036e6:	011b      	lsls	r3, r3, #4
 80036e8:	1a9b      	subs	r3, r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	331b      	adds	r3, #27
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d019      	beq.n	800372a <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	4613      	mov	r3, r2
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	1a9b      	subs	r3, r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	440b      	add	r3, r1
 8003704:	331b      	adds	r3, #27
 8003706:	2200      	movs	r2, #0
 8003708:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800370a:	78fb      	ldrb	r3, [r7, #3]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	78fa      	ldrb	r2, [r7, #3]
 800371a:	0151      	lsls	r1, r2, #5
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	440a      	add	r2, r1
 8003720:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003728:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800372a:	78fb      	ldrb	r3, [r7, #3]
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	4413      	add	r3, r2
 8003732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003736:	461a      	mov	r2, r3
 8003738:	2301      	movs	r3, #1
 800373a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334d      	adds	r3, #77	@ 0x4d
 800374c:	2201      	movs	r2, #1
 800374e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	78fa      	ldrb	r2, [r7, #3]
 8003756:	4611      	mov	r1, r2
 8003758:	4618      	mov	r0, r3
 800375a:	f002 fb3a 	bl	8005dd2 <USB_HC_Halt>
 800375e:	e34b      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	4611      	mov	r1, r2
 8003768:	4618      	mov	r0, r3
 800376a:	f001 fd8e 	bl	800528a <USB_ReadChInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003774:	2b40      	cmp	r3, #64	@ 0x40
 8003776:	d139      	bne.n	80037ec <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2205      	movs	r2, #5
 800378a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	331a      	adds	r3, #26
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3319      	adds	r3, #25
 80037b2:	2201      	movs	r2, #1
 80037b4:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	3344      	adds	r3, #68	@ 0x44
 80037c6:	2200      	movs	r2, #0
 80037c8:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f002 fafd 	bl	8005dd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037d8:	78fb      	ldrb	r3, [r7, #3]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e4:	461a      	mov	r2, r3
 80037e6:	2340      	movs	r3, #64	@ 0x40
 80037e8:	6093      	str	r3, [r2, #8]
 80037ea:	e305      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	78fa      	ldrb	r2, [r7, #3]
 80037f2:	4611      	mov	r1, r2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f001 fd48 	bl	800528a <USB_ReadChInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d11a      	bne.n	800383a <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	4413      	add	r3, r2
 800380c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003810:	461a      	mov	r2, r3
 8003812:	2308      	movs	r3, #8
 8003814:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	334d      	adds	r3, #77	@ 0x4d
 8003826:	2206      	movs	r2, #6
 8003828:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f002 facd 	bl	8005dd2 <USB_HC_Halt>
 8003838:	e2de      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	4611      	mov	r1, r2
 8003842:	4618      	mov	r0, r3
 8003844:	f001 fd21 	bl	800528a <USB_ReadChInterrupts>
 8003848:	4603      	mov	r3, r0
 800384a:	f003 0310 	and.w	r3, r3, #16
 800384e:	2b10      	cmp	r3, #16
 8003850:	d144      	bne.n	80038dc <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3344      	adds	r3, #68	@ 0x44
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003866:	78fa      	ldrb	r2, [r7, #3]
 8003868:	6879      	ldr	r1, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	1a9b      	subs	r3, r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	440b      	add	r3, r1
 8003874:	334d      	adds	r3, #77	@ 0x4d
 8003876:	2204      	movs	r2, #4
 8003878:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	6879      	ldr	r1, [r7, #4]
 800387e:	4613      	mov	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	1a9b      	subs	r3, r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	3319      	adds	r3, #25
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d114      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	3318      	adds	r3, #24
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3319      	adds	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	4611      	mov	r1, r2
 80038c2:	4618      	mov	r0, r3
 80038c4:	f002 fa85 	bl	8005dd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d4:	461a      	mov	r2, r3
 80038d6:	2310      	movs	r3, #16
 80038d8:	6093      	str	r3, [r2, #8]
 80038da:	e28d      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f001 fcd0 	bl	800528a <USB_ReadChInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f0:	2b80      	cmp	r3, #128	@ 0x80
 80038f2:	d169      	bne.n	80039c8 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	799b      	ldrb	r3, [r3, #6]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	6879      	ldr	r1, [r7, #4]
 8003900:	4613      	mov	r3, r2
 8003902:	011b      	lsls	r3, r3, #4
 8003904:	1a9b      	subs	r3, r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	334d      	adds	r3, #77	@ 0x4d
 800390c:	2207      	movs	r2, #7
 800390e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	4611      	mov	r1, r2
 8003918:	4618      	mov	r0, r3
 800391a:	f002 fa5a 	bl	8005dd2 <USB_HC_Halt>
 800391e:	e049      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	6879      	ldr	r1, [r7, #4]
 8003924:	4613      	mov	r3, r2
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	1a9b      	subs	r3, r3, r2
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	440b      	add	r3, r1
 800392e:	3344      	adds	r3, #68	@ 0x44
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	1c59      	adds	r1, r3, #1
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4403      	add	r3, r0
 8003940:	3344      	adds	r3, #68	@ 0x44
 8003942:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	3344      	adds	r3, #68	@ 0x44
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d922      	bls.n	80039a0 <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800395a:	78fa      	ldrb	r2, [r7, #3]
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	011b      	lsls	r3, r3, #4
 8003962:	1a9b      	subs	r3, r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	3344      	adds	r3, #68	@ 0x44
 800396a:	2200      	movs	r2, #0
 800396c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	334c      	adds	r3, #76	@ 0x4c
 800397e:	2204      	movs	r2, #4
 8003980:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	334c      	adds	r3, #76	@ 0x4c
 8003992:	781a      	ldrb	r2, [r3, #0]
 8003994:	78fb      	ldrb	r3, [r7, #3]
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f00f f9f7 	bl	8012d8c <HAL_HCD_HC_NotifyURBChange_Callback>
 800399e:	e009      	b.n	80039b4 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	011b      	lsls	r3, r3, #4
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	334c      	adds	r3, #76	@ 0x4c
 80039b0:	2202      	movs	r2, #2
 80039b2:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	015a      	lsls	r2, r3, #5
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c0:	461a      	mov	r2, r3
 80039c2:	2380      	movs	r3, #128	@ 0x80
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	e217      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	78fa      	ldrb	r2, [r7, #3]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 fc5a 	bl	800528a <USB_ReadChInterrupts>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039e0:	d11b      	bne.n	8003a1a <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334d      	adds	r3, #77	@ 0x4d
 80039f2:	2209      	movs	r2, #9
 80039f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f002 f9e7 	bl	8005dd2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003a04:	78fb      	ldrb	r3, [r7, #3]
 8003a06:	015a      	lsls	r2, r3, #5
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	4413      	add	r3, r2
 8003a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a10:	461a      	mov	r2, r3
 8003a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a16:	6093      	str	r3, [r2, #8]
 8003a18:	e1ee      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fc31 	bl	800528a <USB_ReadChInterrupts>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	f040 81df 	bne.w	8003df2 <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a34:	78fb      	ldrb	r3, [r7, #3]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a40:	461a      	mov	r2, r3
 8003a42:	2302      	movs	r3, #2
 8003a44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	334d      	adds	r3, #77	@ 0x4d
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	f040 8093 	bne.w	8003b84 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a5e:	78fa      	ldrb	r2, [r7, #3]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	011b      	lsls	r3, r3, #4
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	334d      	adds	r3, #77	@ 0x4d
 8003a6e:	2202      	movs	r2, #2
 8003a70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	334c      	adds	r3, #76	@ 0x4c
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	3326      	adds	r3, #38	@ 0x26
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d00b      	beq.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003a9c:	78fa      	ldrb	r2, [r7, #3]
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	1a9b      	subs	r3, r3, r2
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	440b      	add	r3, r1
 8003aaa:	3326      	adds	r3, #38	@ 0x26
 8003aac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003aae:	2b03      	cmp	r3, #3
 8003ab0:	f040 8190 	bne.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	799b      	ldrb	r3, [r3, #6]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d115      	bne.n	8003ae8 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	333d      	adds	r3, #61	@ 0x3d
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	78fa      	ldrb	r2, [r7, #3]
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	b2d8      	uxtb	r0, r3
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	333d      	adds	r3, #61	@ 0x3d
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	799b      	ldrb	r3, [r3, #6]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	f040 8171 	bne.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	3334      	adds	r3, #52	@ 0x34
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 8165 	beq.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	3334      	adds	r3, #52	@ 0x34
 8003b1a:	6819      	ldr	r1, [r3, #0]
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	4403      	add	r3, r0
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	440b      	add	r3, r1
 8003b30:	1e59      	subs	r1, r3, #1
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	4403      	add	r3, r0
 8003b40:	3328      	adds	r3, #40	@ 0x28
 8003b42:	881b      	ldrh	r3, [r3, #0]
 8003b44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b48:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	f003 0301 	and.w	r3, r3, #1
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	f000 813f 	beq.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	6879      	ldr	r1, [r7, #4]
 8003b5a:	4613      	mov	r3, r2
 8003b5c:	011b      	lsls	r3, r3, #4
 8003b5e:	1a9b      	subs	r3, r3, r2
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	440b      	add	r3, r1
 8003b64:	333d      	adds	r3, #61	@ 0x3d
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	f083 0301 	eor.w	r3, r3, #1
 8003b6e:	b2d8      	uxtb	r0, r3
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	333d      	adds	r3, #61	@ 0x3d
 8003b7e:	4602      	mov	r2, r0
 8003b80:	701a      	strb	r2, [r3, #0]
 8003b82:	e127      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b84:	78fa      	ldrb	r2, [r7, #3]
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	4613      	mov	r3, r2
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	1a9b      	subs	r3, r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	440b      	add	r3, r1
 8003b92:	334d      	adds	r3, #77	@ 0x4d
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b03      	cmp	r3, #3
 8003b98:	d120      	bne.n	8003bdc <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	334d      	adds	r3, #77	@ 0x4d
 8003baa:	2202      	movs	r2, #2
 8003bac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	331b      	adds	r3, #27
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	f040 8107 	bne.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	334c      	adds	r3, #76	@ 0x4c
 8003bd6:	2202      	movs	r2, #2
 8003bd8:	701a      	strb	r2, [r3, #0]
 8003bda:	e0fb      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003bdc:	78fa      	ldrb	r2, [r7, #3]
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	4613      	mov	r3, r2
 8003be2:	011b      	lsls	r3, r3, #4
 8003be4:	1a9b      	subs	r3, r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	440b      	add	r3, r1
 8003bea:	334d      	adds	r3, #77	@ 0x4d
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d13a      	bne.n	8003c68 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf2:	78fa      	ldrb	r2, [r7, #3]
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	1a9b      	subs	r3, r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	440b      	add	r3, r1
 8003c00:	334d      	adds	r3, #77	@ 0x4d
 8003c02:	2202      	movs	r2, #2
 8003c04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	011b      	lsls	r3, r3, #4
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	440b      	add	r3, r1
 8003c14:	334c      	adds	r3, #76	@ 0x4c
 8003c16:	2202      	movs	r2, #2
 8003c18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	331b      	adds	r3, #27
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	f040 80d1 	bne.w	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	331b      	adds	r3, #27
 8003c42:	2200      	movs	r2, #0
 8003c44:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6053      	str	r3, [r2, #4]
 8003c66:	e0b5      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c68:	78fa      	ldrb	r2, [r7, #3]
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	011b      	lsls	r3, r3, #4
 8003c70:	1a9b      	subs	r3, r3, r2
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	440b      	add	r3, r1
 8003c76:	334d      	adds	r3, #77	@ 0x4d
 8003c78:	781b      	ldrb	r3, [r3, #0]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d114      	bne.n	8003ca8 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	334d      	adds	r3, #77	@ 0x4d
 8003c8e:	2202      	movs	r2, #2
 8003c90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334c      	adds	r3, #76	@ 0x4c
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
 8003ca6:	e095      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334d      	adds	r3, #77	@ 0x4d
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d114      	bne.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	334d      	adds	r3, #77	@ 0x4d
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334c      	adds	r3, #76	@ 0x4c
 8003ce2:	2205      	movs	r2, #5
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	e075      	b.n	8003dd4 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ce8:	78fa      	ldrb	r2, [r7, #3]
 8003cea:	6879      	ldr	r1, [r7, #4]
 8003cec:	4613      	mov	r3, r2
 8003cee:	011b      	lsls	r3, r3, #4
 8003cf0:	1a9b      	subs	r3, r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	334d      	adds	r3, #77	@ 0x4d
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	2b07      	cmp	r3, #7
 8003cfc:	d00a      	beq.n	8003d14 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334d      	adds	r3, #77	@ 0x4d
 8003d0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003d10:	2b09      	cmp	r3, #9
 8003d12:	d170      	bne.n	8003df6 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	@ 0x4d
 8003d24:	2202      	movs	r2, #2
 8003d26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003d28:	78fa      	ldrb	r2, [r7, #3]
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	1a9b      	subs	r3, r3, r2
 8003d32:	009b      	lsls	r3, r3, #2
 8003d34:	440b      	add	r3, r1
 8003d36:	3344      	adds	r3, #68	@ 0x44
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	011b      	lsls	r3, r3, #4
 8003d42:	1a9b      	subs	r3, r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	4403      	add	r3, r0
 8003d48:	3344      	adds	r3, #68	@ 0x44
 8003d4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3344      	adds	r3, #68	@ 0x44
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d914      	bls.n	8003d8c <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3344      	adds	r3, #68	@ 0x44
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d76:	78fa      	ldrb	r2, [r7, #3]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334c      	adds	r3, #76	@ 0x4c
 8003d86:	2204      	movs	r2, #4
 8003d88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d8a:	e022      	b.n	8003dd2 <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	334c      	adds	r3, #76	@ 0x4c
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003db6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003dbe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dcc:	461a      	mov	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003dd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6879      	ldr	r1, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	334c      	adds	r3, #76	@ 0x4c
 8003de4:	781a      	ldrb	r2, [r3, #0]
 8003de6:	78fb      	ldrb	r3, [r7, #3]
 8003de8:	4619      	mov	r1, r3
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f00e ffce 	bl	8012d8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003df0:	e002      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003df2:	bf00      	nop
 8003df4:	e000      	b.n	8003df8 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003df6:	bf00      	nop
  }
}
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b08a      	sub	sp, #40	@ 0x28
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	0c5b      	lsrs	r3, r3, #17
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	091b      	lsrs	r3, r3, #4
 8003e2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e32:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d004      	beq.n	8003e44 <HCD_RXQLVL_IRQHandler+0x46>
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b05      	cmp	r3, #5
 8003e3e:	f000 80b6 	beq.w	8003fae <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003e42:	e0b7      	b.n	8003fb4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 80b3 	beq.w	8003fb2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e4c:	6879      	ldr	r1, [r7, #4]
 8003e4e:	69ba      	ldr	r2, [r7, #24]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	332c      	adds	r3, #44	@ 0x2c
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 80a7 	beq.w	8003fb2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	69ba      	ldr	r2, [r7, #24]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	3338      	adds	r3, #56	@ 0x38
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	18d1      	adds	r1, r2, r3
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	011b      	lsls	r3, r3, #4
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4403      	add	r3, r0
 8003e88:	3334      	adds	r3, #52	@ 0x34
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4299      	cmp	r1, r3
 8003e8e:	f200 8083 	bhi.w	8003f98 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	1a9b      	subs	r3, r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	332c      	adds	r3, #44	@ 0x2c
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	b292      	uxth	r2, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	f001 f981 	bl	80051b4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	332c      	adds	r3, #44	@ 0x2c
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	18d1      	adds	r1, r2, r3
 8003ec8:	6878      	ldr	r0, [r7, #4]
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4403      	add	r3, r0
 8003ed6:	332c      	adds	r3, #44	@ 0x2c
 8003ed8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	011b      	lsls	r3, r3, #4
 8003ee2:	1a9b      	subs	r3, r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	3338      	adds	r3, #56	@ 0x38
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	18d1      	adds	r1, r2, r3
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	69ba      	ldr	r2, [r7, #24]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	011b      	lsls	r3, r3, #4
 8003ef8:	1a9b      	subs	r3, r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4403      	add	r3, r0
 8003efe:	3338      	adds	r3, #56	@ 0x38
 8003f00:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	015a      	lsls	r2, r3, #5
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	4413      	add	r3, r2
 8003f0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	0cdb      	lsrs	r3, r3, #19
 8003f12:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f16:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003f18:	6879      	ldr	r1, [r7, #4]
 8003f1a:	69ba      	ldr	r2, [r7, #24]
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	011b      	lsls	r3, r3, #4
 8003f20:	1a9b      	subs	r3, r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	440b      	add	r3, r1
 8003f26:	3328      	adds	r3, #40	@ 0x28
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d13f      	bne.n	8003fb2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d03c      	beq.n	8003fb2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f4e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f56:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	6a3b      	ldr	r3, [r7, #32]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f64:	461a      	mov	r2, r3
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	011b      	lsls	r3, r3, #4
 8003f72:	1a9b      	subs	r3, r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	440b      	add	r3, r1
 8003f78:	333c      	adds	r3, #60	@ 0x3c
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f083 0301 	eor.w	r3, r3, #1
 8003f80:	b2d8      	uxtb	r0, r3
 8003f82:	6879      	ldr	r1, [r7, #4]
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	333c      	adds	r3, #60	@ 0x3c
 8003f92:	4602      	mov	r2, r0
 8003f94:	701a      	strb	r2, [r3, #0]
      break;
 8003f96:	e00c      	b.n	8003fb2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	69ba      	ldr	r2, [r7, #24]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334c      	adds	r3, #76	@ 0x4c
 8003fa8:	2204      	movs	r2, #4
 8003faa:	701a      	strb	r2, [r3, #0]
      break;
 8003fac:	e001      	b.n	8003fb2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e000      	b.n	8003fb4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003fb2:	bf00      	nop
  }
}
 8003fb4:	bf00      	nop
 8003fb6:	3728      	adds	r7, #40	@ 0x28
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003fe8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b02      	cmp	r3, #2
 8003ff2:	d10b      	bne.n	800400c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d102      	bne.n	8004004 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f00e fea8 	bl	8012d54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	f043 0302 	orr.w	r3, r3, #2
 800400a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d132      	bne.n	800407c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	f043 0308 	orr.w	r3, r3, #8
 800401c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0304 	and.w	r3, r3, #4
 8004024:	2b04      	cmp	r3, #4
 8004026:	d126      	bne.n	8004076 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7a5b      	ldrb	r3, [r3, #9]
 800402c:	2b02      	cmp	r3, #2
 800402e:	d113      	bne.n	8004058 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004036:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800403a:	d106      	bne.n	800404a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2102      	movs	r1, #2
 8004042:	4618      	mov	r0, r3
 8004044:	f001 fa46 	bl	80054d4 <USB_InitFSLSPClkSel>
 8004048:	e011      	b.n	800406e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2101      	movs	r1, #1
 8004050:	4618      	mov	r0, r3
 8004052:	f001 fa3f 	bl	80054d4 <USB_InitFSLSPClkSel>
 8004056:	e00a      	b.n	800406e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	79db      	ldrb	r3, [r3, #7]
 800405c:	2b01      	cmp	r3, #1
 800405e:	d106      	bne.n	800406e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004066:	461a      	mov	r2, r3
 8004068:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800406c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f00e fe9e 	bl	8012db0 <HAL_HCD_PortEnabled_Callback>
 8004074:	e002      	b.n	800407c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f00e fea8 	bl	8012dcc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b20      	cmp	r3, #32
 8004084:	d103      	bne.n	800408e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	f043 0320 	orr.w	r3, r3, #32
 800408c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004094:	461a      	mov	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	6013      	str	r3, [r2, #0]
}
 800409a:	bf00      	nop
 800409c:	3718      	adds	r7, #24
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e267      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d075      	beq.n	80041ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c2:	4b88      	ldr	r3, [pc, #544]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b85      	ldr	r3, [pc, #532]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d112      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b82      	ldr	r3, [pc, #520]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b7e      	ldr	r3, [pc, #504]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x108>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e242      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x74>
 800410a:	4b76      	ldr	r3, [pc, #472]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a75      	ldr	r2, [pc, #468]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b70      	ldr	r3, [pc, #448]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6f      	ldr	r2, [pc, #444]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b6d      	ldr	r3, [pc, #436]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6c      	ldr	r2, [pc, #432]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 800413c:	4b69      	ldr	r3, [pc, #420]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a68      	ldr	r2, [pc, #416]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b66      	ldr	r3, [pc, #408]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a65      	ldr	r2, [pc, #404]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fd fbca 	bl	80018f4 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fd fbc6 	bl	80018f4 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	@ 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e207      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b5b      	ldr	r3, [pc, #364]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xc0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fd fbb6 	bl	80018f4 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd fbb2 	bl	80018f4 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	@ 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1f3      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b51      	ldr	r3, [pc, #324]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0xe8>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d063      	beq.n	8004282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ba:	4b4a      	ldr	r3, [pc, #296]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b47      	ldr	r3, [pc, #284]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b44      	ldr	r3, [pc, #272]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b41      	ldr	r3, [pc, #260]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1c7      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b3b      	ldr	r3, [pc, #236]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4937      	ldr	r1, [pc, #220]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b34      	ldr	r3, [pc, #208]	@ (80042e8 <HAL_RCC_OscConfig+0x244>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fd fb6b 	bl	80018f4 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004222:	f7fd fb67 	bl	80018f4 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1a8      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b2b      	ldr	r3, [pc, #172]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b28      	ldr	r3, [pc, #160]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4925      	ldr	r1, [pc, #148]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b24      	ldr	r3, [pc, #144]	@ (80042e8 <HAL_RCC_OscConfig+0x244>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fd fb4a 	bl	80018f4 <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004264:	f7fd fb46 	bl	80018f4 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e187      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	@ (80042ec <HAL_RCC_OscConfig+0x248>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd fb2a 	bl	80018f4 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fd fb26 	bl	80018f4 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e167      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x200>
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	@ (80042ec <HAL_RCC_OscConfig+0x248>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fd fb13 	bl	80018f4 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	e00e      	b.n	80042f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fd fb0f 	bl	80018f4 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d907      	bls.n	80042f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e150      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470000 	.word	0x42470000
 80042ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b88      	ldr	r3, [pc, #544]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ea      	bne.n	80042d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8097 	beq.w	8004438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b81      	ldr	r3, [pc, #516]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b7d      	ldr	r3, [pc, #500]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004322:	4a7c      	ldr	r2, [pc, #496]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	@ 0x40
 800432a:	4b7a      	ldr	r3, [pc, #488]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b77      	ldr	r3, [pc, #476]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b74      	ldr	r3, [pc, #464]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fd facf 	bl	80018f4 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fd facb 	bl	80018f4 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e10c      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b6a      	ldr	r3, [pc, #424]	@ (8004518 <HAL_RCC_OscConfig+0x474>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x2ea>
 8004380:	4b64      	ldr	r3, [pc, #400]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004384:	4a63      	ldr	r2, [pc, #396]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	@ 0x70
 800438c:	e01c      	b.n	80043c8 <HAL_RCC_OscConfig+0x324>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x30c>
 8004396:	4b5f      	ldr	r3, [pc, #380]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800439a:	4a5e      	ldr	r2, [pc, #376]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x324>
 80043b0:	4b58      	ldr	r3, [pc, #352]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b4:	4a57      	ldr	r2, [pc, #348]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80043bc:	4b55      	ldr	r3, [pc, #340]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c0:	4a54      	ldr	r2, [pc, #336]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fd fa90 	bl	80018f4 <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fd fa8c 	bl	80018f4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0cb      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b49      	ldr	r3, [pc, #292]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RCC_OscConfig+0x334>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7fd fa7a 	bl	80018f4 <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fd fa76 	bl	80018f4 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0b5      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	4b3e      	ldr	r3, [pc, #248]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ee      	bne.n	8004404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b39      	ldr	r3, [pc, #228]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004430:	4a38      	ldr	r2, [pc, #224]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80a1 	beq.w	8004584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004442:	4b34      	ldr	r3, [pc, #208]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d05c      	beq.n	8004508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d141      	bne.n	80044da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b31      	ldr	r3, [pc, #196]	@ (800451c <HAL_RCC_OscConfig+0x478>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fd fa4a 	bl	80018f4 <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004464:	f7fd fa46 	bl	80018f4 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e087      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b27      	ldr	r3, [pc, #156]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	491b      	ldr	r1, [pc, #108]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	@ (800451c <HAL_RCC_OscConfig+0x478>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fd fa1f 	bl	80018f4 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fd fa1b 	bl	80018f4 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e05c      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	4b11      	ldr	r3, [pc, #68]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x416>
 80044d8:	e054      	b.n	8004584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b10      	ldr	r3, [pc, #64]	@ (800451c <HAL_RCC_OscConfig+0x478>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fd fa08 	bl	80018f4 <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fd fa04 	bl	80018f4 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e045      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	@ (8004514 <HAL_RCC_OscConfig+0x470>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x444>
 8004506:	e03d      	b.n	8004584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e038      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
 8004514:	40023800 	.word	0x40023800
 8004518:	40007000 	.word	0x40007000
 800451c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004520:	4b1b      	ldr	r3, [pc, #108]	@ (8004590 <HAL_RCC_OscConfig+0x4ec>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d028      	beq.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d121      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d11a      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004558:	4293      	cmp	r3, r2
 800455a:	d111      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	3b01      	subs	r3, #1
 800456a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d107      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cc      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b68      	ldr	r3, [pc, #416]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d90c      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b65      	ldr	r3, [pc, #404]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b63      	ldr	r3, [pc, #396]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b8      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b59      	ldr	r3, [pc, #356]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a58      	ldr	r2, [pc, #352]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80045f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004600:	4b53      	ldr	r3, [pc, #332]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a52      	ldr	r2, [pc, #328]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800460a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b50      	ldr	r3, [pc, #320]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	494d      	ldr	r1, [pc, #308]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d044      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b47      	ldr	r3, [pc, #284]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d119      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d003      	beq.n	8004652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	2b03      	cmp	r3, #3
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b3f      	ldr	r3, [pc, #252]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b3b      	ldr	r3, [pc, #236]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e067      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004672:	4b37      	ldr	r3, [pc, #220]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4934      	ldr	r1, [pc, #208]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004684:	f7fd f936 	bl	80018f4 <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fd f932 	bl	80018f4 <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e04f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	4b2b      	ldr	r3, [pc, #172]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 020c 	and.w	r2, r3, #12
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1eb      	bne.n	800468c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b25      	ldr	r3, [pc, #148]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20c      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b22      	ldr	r3, [pc, #136]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b20      	ldr	r3, [pc, #128]	@ (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e032      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e8:	4b19      	ldr	r3, [pc, #100]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4916      	ldr	r1, [pc, #88]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004706:	4b12      	ldr	r3, [pc, #72]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	490e      	ldr	r1, [pc, #56]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800471a:	f000 f821 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b0b      	ldr	r3, [pc, #44]	@ (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	490a      	ldr	r1, [pc, #40]	@ (8004754 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a09      	ldr	r2, [pc, #36]	@ (8004758 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004736:	4b09      	ldr	r3, [pc, #36]	@ (800475c <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fc ff86 	bl	800164c <HAL_InitTick>

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023c00 	.word	0x40023c00
 8004750:	40023800 	.word	0x40023800
 8004754:	0801420c 	.word	0x0801420c
 8004758:	20000000 	.word	0x20000000
 800475c:	20000004 	.word	0x20000004

08004760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004764:	b090      	sub	sp, #64	@ 0x40
 8004766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	637b      	str	r3, [r7, #52]	@ 0x34
 800476c:	2300      	movs	r3, #0
 800476e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004770:	2300      	movs	r3, #0
 8004772:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004778:	4b59      	ldr	r3, [pc, #356]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d00d      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004784:	2b08      	cmp	r3, #8
 8004786:	f200 80a1 	bhi.w	80048cc <HAL_RCC_GetSysClockFreq+0x16c>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x34>
 800478e:	2b04      	cmp	r3, #4
 8004790:	d003      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x3a>
 8004792:	e09b      	b.n	80048cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004794:	4b53      	ldr	r3, [pc, #332]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004796:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004798:	e09b      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800479a:	4b53      	ldr	r3, [pc, #332]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800479c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800479e:	e098      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a0:	4b4f      	ldr	r3, [pc, #316]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047a8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047aa:	4b4d      	ldr	r3, [pc, #308]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d028      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b6:	4b4a      	ldr	r3, [pc, #296]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	2200      	movs	r2, #0
 80047be:	623b      	str	r3, [r7, #32]
 80047c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80047c2:	6a3b      	ldr	r3, [r7, #32]
 80047c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80047c8:	2100      	movs	r1, #0
 80047ca:	4b47      	ldr	r3, [pc, #284]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80047cc:	fb03 f201 	mul.w	r2, r3, r1
 80047d0:	2300      	movs	r3, #0
 80047d2:	fb00 f303 	mul.w	r3, r0, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	4a43      	ldr	r2, [pc, #268]	@ (80048e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80047da:	fba0 1202 	umull	r1, r2, r0, r2
 80047de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047e0:	460a      	mov	r2, r1
 80047e2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80047e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e6:	4413      	add	r3, r2
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ec:	2200      	movs	r2, #0
 80047ee:	61bb      	str	r3, [r7, #24]
 80047f0:	61fa      	str	r2, [r7, #28]
 80047f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80047fa:	f7fc f867 	bl	80008cc <__aeabi_uldivmod>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4613      	mov	r3, r2
 8004804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004806:	e053      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004808:	4b35      	ldr	r3, [pc, #212]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	099b      	lsrs	r3, r3, #6
 800480e:	2200      	movs	r2, #0
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	617a      	str	r2, [r7, #20]
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800481a:	f04f 0b00 	mov.w	fp, #0
 800481e:	4652      	mov	r2, sl
 8004820:	465b      	mov	r3, fp
 8004822:	f04f 0000 	mov.w	r0, #0
 8004826:	f04f 0100 	mov.w	r1, #0
 800482a:	0159      	lsls	r1, r3, #5
 800482c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004830:	0150      	lsls	r0, r2, #5
 8004832:	4602      	mov	r2, r0
 8004834:	460b      	mov	r3, r1
 8004836:	ebb2 080a 	subs.w	r8, r2, sl
 800483a:	eb63 090b 	sbc.w	r9, r3, fp
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800484a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800484e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004852:	ebb2 0408 	subs.w	r4, r2, r8
 8004856:	eb63 0509 	sbc.w	r5, r3, r9
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	00eb      	lsls	r3, r5, #3
 8004864:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004868:	00e2      	lsls	r2, r4, #3
 800486a:	4614      	mov	r4, r2
 800486c:	461d      	mov	r5, r3
 800486e:	eb14 030a 	adds.w	r3, r4, sl
 8004872:	603b      	str	r3, [r7, #0]
 8004874:	eb45 030b 	adc.w	r3, r5, fp
 8004878:	607b      	str	r3, [r7, #4]
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004886:	4629      	mov	r1, r5
 8004888:	028b      	lsls	r3, r1, #10
 800488a:	4621      	mov	r1, r4
 800488c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004890:	4621      	mov	r1, r4
 8004892:	028a      	lsls	r2, r1, #10
 8004894:	4610      	mov	r0, r2
 8004896:	4619      	mov	r1, r3
 8004898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800489a:	2200      	movs	r2, #0
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	60fa      	str	r2, [r7, #12]
 80048a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048a4:	f7fc f812 	bl	80008cc <__aeabi_uldivmod>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4613      	mov	r3, r2
 80048ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048b0:	4b0b      	ldr	r3, [pc, #44]	@ (80048e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	0c1b      	lsrs	r3, r3, #16
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	3301      	adds	r3, #1
 80048bc:	005b      	lsls	r3, r3, #1
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80048c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048ca:	e002      	b.n	80048d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048cc:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80048ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80048d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3740      	adds	r7, #64	@ 0x40
 80048d8:	46bd      	mov	sp, r7
 80048da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048de:	bf00      	nop
 80048e0:	40023800 	.word	0x40023800
 80048e4:	00f42400 	.word	0x00f42400
 80048e8:	017d7840 	.word	0x017d7840

080048ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048f0:	4b03      	ldr	r3, [pc, #12]	@ (8004900 <HAL_RCC_GetHCLKFreq+0x14>)
 80048f2:	681b      	ldr	r3, [r3, #0]
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	20000000 	.word	0x20000000

08004904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004908:	f7ff fff0 	bl	80048ec <HAL_RCC_GetHCLKFreq>
 800490c:	4602      	mov	r2, r0
 800490e:	4b05      	ldr	r3, [pc, #20]	@ (8004924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	0a9b      	lsrs	r3, r3, #10
 8004914:	f003 0307 	and.w	r3, r3, #7
 8004918:	4903      	ldr	r1, [pc, #12]	@ (8004928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800491a:	5ccb      	ldrb	r3, [r1, r3]
 800491c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004920:	4618      	mov	r0, r3
 8004922:	bd80      	pop	{r7, pc}
 8004924:	40023800 	.word	0x40023800
 8004928:	0801421c 	.word	0x0801421c

0800492c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	220f      	movs	r2, #15
 800493a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800493c:	4b12      	ldr	r3, [pc, #72]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 0203 	and.w	r2, r3, #3
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004948:	4b0f      	ldr	r3, [pc, #60]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004954:	4b0c      	ldr	r3, [pc, #48]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004960:	4b09      	ldr	r3, [pc, #36]	@ (8004988 <HAL_RCC_GetClockConfig+0x5c>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	08db      	lsrs	r3, r3, #3
 8004966:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800496e:	4b07      	ldr	r3, [pc, #28]	@ (800498c <HAL_RCC_GetClockConfig+0x60>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 020f 	and.w	r2, r3, #15
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	601a      	str	r2, [r3, #0]
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40023800 	.word	0x40023800
 800498c:	40023c00 	.word	0x40023c00

08004990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e041      	b.n	8004a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d106      	bne.n	80049bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f839 	bl	8004a2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3304      	adds	r3, #4
 80049cc:	4619      	mov	r1, r3
 80049ce:	4610      	mov	r0, r2
 80049d0:	f000 f9c0 	bl	8004d54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3708      	adds	r7, #8
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}

08004a2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004a2e:	b480      	push	{r7}
 8004a30:	b083      	sub	sp, #12
 8004a32:	af00      	add	r7, sp, #0
 8004a34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
	...

08004a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d001      	beq.n	8004a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e04e      	b.n	8004afa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f042 0201 	orr.w	r2, r2, #1
 8004a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a23      	ldr	r2, [pc, #140]	@ (8004b08 <HAL_TIM_Base_Start_IT+0xc4>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d022      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a86:	d01d      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a1f      	ldr	r2, [pc, #124]	@ (8004b0c <HAL_TIM_Base_Start_IT+0xc8>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d018      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a1e      	ldr	r2, [pc, #120]	@ (8004b10 <HAL_TIM_Base_Start_IT+0xcc>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d013      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b14 <HAL_TIM_Base_Start_IT+0xd0>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d00e      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a1b      	ldr	r2, [pc, #108]	@ (8004b18 <HAL_TIM_Base_Start_IT+0xd4>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d009      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a19      	ldr	r2, [pc, #100]	@ (8004b1c <HAL_TIM_Base_Start_IT+0xd8>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d004      	beq.n	8004ac4 <HAL_TIM_Base_Start_IT+0x80>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a18      	ldr	r2, [pc, #96]	@ (8004b20 <HAL_TIM_Base_Start_IT+0xdc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d111      	bne.n	8004ae8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b06      	cmp	r3, #6
 8004ad4:	d010      	beq.n	8004af8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f042 0201 	orr.w	r2, r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	e007      	b.n	8004af8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0201 	orr.w	r2, r2, #1
 8004af6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40001800 	.word	0x40001800

08004b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	f003 0302 	and.w	r3, r3, #2
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01b      	beq.n	8004b88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0202 	mvn.w	r2, #2
 8004b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8d2 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f8c4 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f8d5 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	f003 0304 	and.w	r3, r3, #4
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d020      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f003 0304 	and.w	r3, r3, #4
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d01b      	beq.n	8004bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0204 	mvn.w	r2, #4
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f8ac 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f89e 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 f8af 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d020      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f003 0308 	and.w	r3, r3, #8
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d01b      	beq.n	8004c20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f06f 0208 	mvn.w	r2, #8
 8004bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2204      	movs	r2, #4
 8004bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	69db      	ldr	r3, [r3, #28]
 8004bfe:	f003 0303 	and.w	r3, r3, #3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f886 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004c0c:	e005      	b.n	8004c1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f878 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f889 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d020      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0210 	mvn.w	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f860 	bl	8004d18 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f852 	bl	8004d04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f863 	bl	8004d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00c      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d007      	beq.n	8004c90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0201 	mvn.w	r2, #1
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fc fc9a 	bl	80015c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f906 	bl	8004ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 f834 	bl	8004d40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0320 	and.w	r3, r3, #32
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d00c      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d007      	beq.n	8004cfc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0220 	mvn.w	r2, #32
 8004cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f000 f8d8 	bl	8004eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cfc:	bf00      	nop
 8004cfe:	3710      	adds	r7, #16
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b083      	sub	sp, #12
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b083      	sub	sp, #12
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d48:	bf00      	nop
 8004d4a:	370c      	adds	r7, #12
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a46      	ldr	r2, [pc, #280]	@ (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d013      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d72:	d00f      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a43      	ldr	r2, [pc, #268]	@ (8004e84 <TIM_Base_SetConfig+0x130>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d00b      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a42      	ldr	r2, [pc, #264]	@ (8004e88 <TIM_Base_SetConfig+0x134>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d007      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	4a41      	ldr	r2, [pc, #260]	@ (8004e8c <TIM_Base_SetConfig+0x138>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d003      	beq.n	8004d94 <TIM_Base_SetConfig+0x40>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	4a40      	ldr	r2, [pc, #256]	@ (8004e90 <TIM_Base_SetConfig+0x13c>)
 8004d90:	4293      	cmp	r3, r2
 8004d92:	d108      	bne.n	8004da6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	68fa      	ldr	r2, [r7, #12]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a35      	ldr	r2, [pc, #212]	@ (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d02b      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004db4:	d027      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a32      	ldr	r2, [pc, #200]	@ (8004e84 <TIM_Base_SetConfig+0x130>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d023      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a31      	ldr	r2, [pc, #196]	@ (8004e88 <TIM_Base_SetConfig+0x134>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d01f      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a30      	ldr	r2, [pc, #192]	@ (8004e8c <TIM_Base_SetConfig+0x138>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d01b      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	4a2f      	ldr	r2, [pc, #188]	@ (8004e90 <TIM_Base_SetConfig+0x13c>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d017      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a2e      	ldr	r2, [pc, #184]	@ (8004e94 <TIM_Base_SetConfig+0x140>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a2d      	ldr	r2, [pc, #180]	@ (8004e98 <TIM_Base_SetConfig+0x144>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d00f      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a2c      	ldr	r2, [pc, #176]	@ (8004e9c <TIM_Base_SetConfig+0x148>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d00b      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a2b      	ldr	r2, [pc, #172]	@ (8004ea0 <TIM_Base_SetConfig+0x14c>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d007      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a2a      	ldr	r2, [pc, #168]	@ (8004ea4 <TIM_Base_SetConfig+0x150>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d003      	beq.n	8004e06 <TIM_Base_SetConfig+0xb2>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a29      	ldr	r2, [pc, #164]	@ (8004ea8 <TIM_Base_SetConfig+0x154>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d108      	bne.n	8004e18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	4313      	orrs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a10      	ldr	r2, [pc, #64]	@ (8004e80 <TIM_Base_SetConfig+0x12c>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d003      	beq.n	8004e4c <TIM_Base_SetConfig+0xf8>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4a12      	ldr	r2, [pc, #72]	@ (8004e90 <TIM_Base_SetConfig+0x13c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d103      	bne.n	8004e54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d105      	bne.n	8004e72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f023 0201 	bic.w	r2, r3, #1
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	611a      	str	r2, [r3, #16]
  }
}
 8004e72:	bf00      	nop
 8004e74:	3714      	adds	r7, #20
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40000400 	.word	0x40000400
 8004e88:	40000800 	.word	0x40000800
 8004e8c:	40000c00 	.word	0x40000c00
 8004e90:	40010400 	.word	0x40010400
 8004e94:	40014000 	.word	0x40014000
 8004e98:	40014400 	.word	0x40014400
 8004e9c:	40014800 	.word	0x40014800
 8004ea0:	40001800 	.word	0x40001800
 8004ea4:	40001c00 	.word	0x40001c00
 8004ea8:	40002000 	.word	0x40002000

08004eac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ec8:	bf00      	nop
 8004eca:	370c      	adds	r7, #12
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ed4:	b084      	sub	sp, #16
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	f107 001c 	add.w	r0, r7, #28
 8004ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004ee6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d123      	bne.n	8004f36 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ef2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004f02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f16:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d105      	bne.n	8004f2a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f9dc 	bl	80052e8 <USB_CoreReset>
 8004f30:	4603      	mov	r3, r0
 8004f32:	73fb      	strb	r3, [r7, #15]
 8004f34:	e01b      	b.n	8004f6e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 f9d0 	bl	80052e8 <USB_CoreReset>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004f4c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d106      	bne.n	8004f62 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f58:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f60:	e005      	b.n	8004f6e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f66:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004f6e:	7fbb      	ldrb	r3, [r7, #30]
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d10b      	bne.n	8004f8c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	f043 0206 	orr.w	r2, r3, #6
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f043 0220 	orr.w	r2, r3, #32
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f98:	b004      	add	sp, #16
 8004f9a:	4770      	bx	lr

08004f9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f023 0201 	bic.w	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004fd2:	2300      	movs	r3, #0
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	370c      	adds	r7, #12
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004fec:	2300      	movs	r3, #0
 8004fee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d115      	bne.n	800502e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800500e:	200a      	movs	r0, #10
 8005010:	f7fc fc7c 	bl	800190c <HAL_Delay>
      ms += 10U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	330a      	adds	r3, #10
 8005018:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f000 f956 	bl	80052cc <USB_GetMode>
 8005020:	4603      	mov	r3, r0
 8005022:	2b01      	cmp	r3, #1
 8005024:	d01e      	beq.n	8005064 <USB_SetCurrentMode+0x84>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2bc7      	cmp	r3, #199	@ 0xc7
 800502a:	d9f0      	bls.n	800500e <USB_SetCurrentMode+0x2e>
 800502c:	e01a      	b.n	8005064 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800502e:	78fb      	ldrb	r3, [r7, #3]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d115      	bne.n	8005060 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005040:	200a      	movs	r0, #10
 8005042:	f7fc fc63 	bl	800190c <HAL_Delay>
      ms += 10U;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	330a      	adds	r3, #10
 800504a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f000 f93d 	bl	80052cc <USB_GetMode>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <USB_SetCurrentMode+0x84>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2bc7      	cmp	r3, #199	@ 0xc7
 800505c:	d9f0      	bls.n	8005040 <USB_SetCurrentMode+0x60>
 800505e:	e001      	b.n	8005064 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e005      	b.n	8005070 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2bc8      	cmp	r3, #200	@ 0xc8
 8005068:	d101      	bne.n	800506e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e000      	b.n	8005070 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005082:	2300      	movs	r3, #0
 8005084:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	3301      	adds	r3, #1
 800508a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005092:	d901      	bls.n	8005098 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e01b      	b.n	80050d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	2b00      	cmp	r3, #0
 800509e:	daf2      	bge.n	8005086 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	019b      	lsls	r3, r3, #6
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3301      	adds	r3, #1
 80050b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050bc:	d901      	bls.n	80050c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e006      	b.n	80050d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d0f0      	beq.n	80050b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3714      	adds	r7, #20
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050dc:	b480      	push	{r7}
 80050de:	b085      	sub	sp, #20
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	3301      	adds	r3, #1
 80050ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80050f4:	d901      	bls.n	80050fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e018      	b.n	800512c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	daf2      	bge.n	80050e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005102:	2300      	movs	r3, #0
 8005104:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2210      	movs	r2, #16
 800510a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	3301      	adds	r3, #1
 8005110:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005118:	d901      	bls.n	800511e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e006      	b.n	800512c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d0f0      	beq.n	800510c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005138:	b480      	push	{r7}
 800513a:	b089      	sub	sp, #36	@ 0x24
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4611      	mov	r1, r2
 8005144:	461a      	mov	r2, r3
 8005146:	460b      	mov	r3, r1
 8005148:	71fb      	strb	r3, [r7, #7]
 800514a:	4613      	mov	r3, r2
 800514c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005156:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d123      	bne.n	80051a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800515e:	88bb      	ldrh	r3, [r7, #4]
 8005160:	3303      	adds	r3, #3
 8005162:	089b      	lsrs	r3, r3, #2
 8005164:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005166:	2300      	movs	r3, #0
 8005168:	61bb      	str	r3, [r7, #24]
 800516a:	e018      	b.n	800519e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800516c:	79fb      	ldrb	r3, [r7, #7]
 800516e:	031a      	lsls	r2, r3, #12
 8005170:	697b      	ldr	r3, [r7, #20]
 8005172:	4413      	add	r3, r2
 8005174:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005178:	461a      	mov	r2, r3
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	3301      	adds	r3, #1
 8005184:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	3301      	adds	r3, #1
 800518a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3301      	adds	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	3301      	adds	r3, #1
 8005196:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	3301      	adds	r3, #1
 800519c:	61bb      	str	r3, [r7, #24]
 800519e:	69ba      	ldr	r2, [r7, #24]
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d3e2      	bcc.n	800516c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3724      	adds	r7, #36	@ 0x24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b08b      	sub	sp, #44	@ 0x2c
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80051ca:	88fb      	ldrh	r3, [r7, #6]
 80051cc:	089b      	lsrs	r3, r3, #2
 80051ce:	b29b      	uxth	r3, r3
 80051d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80051d2:	88fb      	ldrh	r3, [r7, #6]
 80051d4:	f003 0303 	and.w	r3, r3, #3
 80051d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80051da:	2300      	movs	r3, #0
 80051dc:	623b      	str	r3, [r7, #32]
 80051de:	e014      	b.n	800520a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80051ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ee:	3301      	adds	r3, #1
 80051f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051f4:	3301      	adds	r3, #1
 80051f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	3301      	adds	r3, #1
 80051fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80051fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005200:	3301      	adds	r3, #1
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	3301      	adds	r3, #1
 8005208:	623b      	str	r3, [r7, #32]
 800520a:	6a3a      	ldr	r2, [r7, #32]
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	429a      	cmp	r2, r3
 8005210:	d3e6      	bcc.n	80051e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005212:	8bfb      	ldrh	r3, [r7, #30]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01e      	beq.n	8005256 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005218:	2300      	movs	r3, #0
 800521a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005222:	461a      	mov	r2, r3
 8005224:	f107 0310 	add.w	r3, r7, #16
 8005228:	6812      	ldr	r2, [r2, #0]
 800522a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	6a3b      	ldr	r3, [r7, #32]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	fa22 f303 	lsr.w	r3, r2, r3
 8005238:	b2da      	uxtb	r2, r3
 800523a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523c:	701a      	strb	r2, [r3, #0]
      i++;
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	3301      	adds	r3, #1
 8005242:	623b      	str	r3, [r7, #32]
      pDest++;
 8005244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005246:	3301      	adds	r3, #1
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800524a:	8bfb      	ldrh	r3, [r7, #30]
 800524c:	3b01      	subs	r3, #1
 800524e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005250:	8bfb      	ldrh	r3, [r7, #30]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1ea      	bne.n	800522c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005258:	4618      	mov	r0, r3
 800525a:	372c      	adds	r7, #44	@ 0x2c
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005264:	b480      	push	{r7}
 8005266:	b085      	sub	sp, #20
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	699b      	ldr	r3, [r3, #24]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	4013      	ands	r3, r2
 800527a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800527c:	68fb      	ldr	r3, [r7, #12]
}
 800527e:	4618      	mov	r0, r3
 8005280:	3714      	adds	r7, #20
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800528a:	b480      	push	{r7}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
 8005292:	460b      	mov	r3, r1
 8005294:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800529a:	78fb      	ldrb	r3, [r7, #3]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	68ba      	ldr	r2, [r7, #8]
 80052ba:	4013      	ands	r3, r2
 80052bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052be:	68bb      	ldr	r3, [r7, #8]
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	695b      	ldr	r3, [r3, #20]
 80052d8:	f003 0301 	and.w	r3, r3, #1
}
 80052dc:	4618      	mov	r0, r3
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3301      	adds	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005300:	d901      	bls.n	8005306 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005302:	2303      	movs	r3, #3
 8005304:	e01b      	b.n	800533e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	2b00      	cmp	r3, #0
 800530c:	daf2      	bge.n	80052f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f043 0201 	orr.w	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	3301      	adds	r3, #1
 8005322:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800532a:	d901      	bls.n	8005330 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e006      	b.n	800533e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	691b      	ldr	r3, [r3, #16]
 8005334:	f003 0301 	and.w	r3, r3, #1
 8005338:	2b01      	cmp	r3, #1
 800533a:	d0f0      	beq.n	800531e <USB_CoreReset+0x36>

  return HAL_OK;
 800533c:	2300      	movs	r3, #0
}
 800533e:	4618      	mov	r0, r3
 8005340:	3714      	adds	r7, #20
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
	...

0800534c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800534c:	b084      	sub	sp, #16
 800534e:	b580      	push	{r7, lr}
 8005350:	b086      	sub	sp, #24
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800535a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800536c:	461a      	mov	r2, r3
 800536e:	2300      	movs	r3, #0
 8005370:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005376:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005382:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800538e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d119      	bne.n	80053d6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80053a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d10a      	bne.n	80053c0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68fa      	ldr	r2, [r7, #12]
 80053b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053b8:	f043 0304 	orr.w	r3, r3, #4
 80053bc:	6013      	str	r3, [r2, #0]
 80053be:	e014      	b.n	80053ea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053ce:	f023 0304 	bic.w	r3, r3, #4
 80053d2:	6013      	str	r3, [r2, #0]
 80053d4:	e009      	b.n	80053ea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80053ea:	2110      	movs	r1, #16
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f7ff fe43 	bl	8005078 <USB_FlushTxFifo>
 80053f2:	4603      	mov	r3, r0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff fe6d 	bl	80050dc <USB_FlushRxFifo>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8005408:	2301      	movs	r3, #1
 800540a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800540c:	2300      	movs	r3, #0
 800540e:	613b      	str	r3, [r7, #16]
 8005410:	e015      	b.n	800543e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	4413      	add	r3, r2
 800541a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800541e:	461a      	mov	r2, r3
 8005420:	f04f 33ff 	mov.w	r3, #4294967295
 8005424:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	015a      	lsls	r2, r3, #5
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4413      	add	r3, r2
 800542e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005432:	461a      	mov	r2, r3
 8005434:	2300      	movs	r3, #0
 8005436:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	3301      	adds	r3, #1
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005442:	461a      	mov	r2, r3
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	4293      	cmp	r3, r2
 8005448:	d3e3      	bcc.n	8005412 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a18      	ldr	r2, [pc, #96]	@ (80054bc <USB_HostInit+0x170>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10b      	bne.n	8005478 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005466:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a15      	ldr	r2, [pc, #84]	@ (80054c0 <USB_HostInit+0x174>)
 800546c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a14      	ldr	r2, [pc, #80]	@ (80054c4 <USB_HostInit+0x178>)
 8005472:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8005476:	e009      	b.n	800548c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2280      	movs	r2, #128	@ 0x80
 800547c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a11      	ldr	r2, [pc, #68]	@ (80054c8 <USB_HostInit+0x17c>)
 8005482:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a11      	ldr	r2, [pc, #68]	@ (80054cc <USB_HostInit+0x180>)
 8005488:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800548c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005490:	2b00      	cmp	r3, #0
 8005492:	d105      	bne.n	80054a0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f043 0210 	orr.w	r2, r3, #16
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	699a      	ldr	r2, [r3, #24]
 80054a4:	4b0a      	ldr	r3, [pc, #40]	@ (80054d0 <USB_HostInit+0x184>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80054ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054b8:	b004      	add	sp, #16
 80054ba:	4770      	bx	lr
 80054bc:	40040000 	.word	0x40040000
 80054c0:	01000200 	.word	0x01000200
 80054c4:	00e00300 	.word	0x00e00300
 80054c8:	00600080 	.word	0x00600080
 80054cc:	004000e0 	.word	0x004000e0
 80054d0:	a3200008 	.word	0xa3200008

080054d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	460b      	mov	r3, r1
 80054de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80054f2:	f023 0303 	bic.w	r3, r3, #3
 80054f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	78fb      	ldrb	r3, [r7, #3]
 8005502:	f003 0303 	and.w	r3, r3, #3
 8005506:	68f9      	ldr	r1, [r7, #12]
 8005508:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800550c:	4313      	orrs	r3, r2
 800550e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005510:	78fb      	ldrb	r3, [r7, #3]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d107      	bne.n	8005526 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800551c:	461a      	mov	r2, r3
 800551e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005522:	6053      	str	r3, [r2, #4]
 8005524:	e00c      	b.n	8005540 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005526:	78fb      	ldrb	r3, [r7, #3]
 8005528:	2b02      	cmp	r3, #2
 800552a:	d107      	bne.n	800553c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005532:	461a      	mov	r2, r3
 8005534:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005538:	6053      	str	r3, [r2, #4]
 800553a:	e001      	b.n	8005540 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e000      	b.n	8005542 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3714      	adds	r7, #20
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr

0800554e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800556e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800557c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800557e:	2064      	movs	r0, #100	@ 0x64
 8005580:	f7fc f9c4 	bl	800190c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800558c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005590:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005592:	200a      	movs	r0, #10
 8005594:	f7fc f9ba 	bl	800190c <HAL_Delay>

  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	3710      	adds	r7, #16
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80055a2:	b480      	push	{r7}
 80055a4:	b085      	sub	sp, #20
 80055a6:	af00      	add	r7, sp, #0
 80055a8:	6078      	str	r0, [r7, #4]
 80055aa:	460b      	mov	r3, r1
 80055ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80055b2:	2300      	movs	r3, #0
 80055b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80055c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <USB_DriveVbus+0x44>
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d106      	bne.n	80055e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80055e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80055e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	d109      	bne.n	8005606 <USB_DriveVbus+0x64>
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005600:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005604:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	0c5b      	lsrs	r3, r3, #17
 8005632:	f003 0303 	and.w	r3, r3, #3
}
 8005636:	4618      	mov	r0, r3
 8005638:	3714      	adds	r7, #20
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005642:	b480      	push	{r7}
 8005644:	b085      	sub	sp, #20
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	b29b      	uxth	r3, r3
}
 8005658:	4618      	mov	r0, r3
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b088      	sub	sp, #32
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	4608      	mov	r0, r1
 800566e:	4611      	mov	r1, r2
 8005670:	461a      	mov	r2, r3
 8005672:	4603      	mov	r3, r0
 8005674:	70fb      	strb	r3, [r7, #3]
 8005676:	460b      	mov	r3, r1
 8005678:	70bb      	strb	r3, [r7, #2]
 800567a:	4613      	mov	r3, r2
 800567c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800567e:	2300      	movs	r3, #0
 8005680:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005686:	78fb      	ldrb	r3, [r7, #3]
 8005688:	015a      	lsls	r2, r3, #5
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	4413      	add	r3, r2
 800568e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005692:	461a      	mov	r2, r3
 8005694:	f04f 33ff 	mov.w	r3, #4294967295
 8005698:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800569a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d87c      	bhi.n	800579c <USB_HC_Init+0x138>
 80056a2:	a201      	add	r2, pc, #4	@ (adr r2, 80056a8 <USB_HC_Init+0x44>)
 80056a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a8:	080056b9 	.word	0x080056b9
 80056ac:	0800575f 	.word	0x0800575f
 80056b0:	080056b9 	.word	0x080056b9
 80056b4:	08005721 	.word	0x08005721
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80056b8:	78fb      	ldrb	r3, [r7, #3]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056c4:	461a      	mov	r2, r3
 80056c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80056ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80056cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	da10      	bge.n	80056f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80056f4:	e055      	b.n	80057a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a6f      	ldr	r2, [pc, #444]	@ (80058b8 <USB_HC_Init+0x254>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d151      	bne.n	80057a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80056fe:	78fb      	ldrb	r3, [r7, #3]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	4413      	add	r3, r2
 8005706:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	0151      	lsls	r1, r2, #5
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	440a      	add	r2, r1
 8005714:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005718:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800571c:	60d3      	str	r3, [r2, #12]
      break;
 800571e:	e040      	b.n	80057a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005720:	78fb      	ldrb	r3, [r7, #3]
 8005722:	015a      	lsls	r2, r3, #5
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	4413      	add	r3, r2
 8005728:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800572c:	461a      	mov	r2, r3
 800572e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005732:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005734:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005738:	2b00      	cmp	r3, #0
 800573a:	da34      	bge.n	80057a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	440a      	add	r2, r1
 8005752:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005756:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800575a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800575c:	e023      	b.n	80057a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800575e:	78fb      	ldrb	r3, [r7, #3]
 8005760:	015a      	lsls	r2, r3, #5
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	4413      	add	r3, r2
 8005766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576a:	461a      	mov	r2, r3
 800576c:	f240 2325 	movw	r3, #549	@ 0x225
 8005770:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005772:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005776:	2b00      	cmp	r3, #0
 8005778:	da17      	bge.n	80057aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800577a:	78fb      	ldrb	r3, [r7, #3]
 800577c:	015a      	lsls	r2, r3, #5
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	4413      	add	r3, r2
 8005782:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	78fa      	ldrb	r2, [r7, #3]
 800578a:	0151      	lsls	r1, r2, #5
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	440a      	add	r2, r1
 8005790:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005794:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005798:	60d3      	str	r3, [r2, #12]
      }
      break;
 800579a:	e006      	b.n	80057aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	77fb      	strb	r3, [r7, #31]
      break;
 80057a0:	e004      	b.n	80057ac <USB_HC_Init+0x148>
      break;
 80057a2:	bf00      	nop
 80057a4:	e002      	b.n	80057ac <USB_HC_Init+0x148>
      break;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <USB_HC_Init+0x148>
      break;
 80057aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057b8:	461a      	mov	r2, r3
 80057ba:	2300      	movs	r3, #0
 80057bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80057be:	78fb      	ldrb	r3, [r7, #3]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	0151      	lsls	r1, r2, #5
 80057d0:	693a      	ldr	r2, [r7, #16]
 80057d2:	440a      	add	r2, r1
 80057d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80057d8:	f043 0302 	orr.w	r3, r3, #2
 80057dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80057e4:	699a      	ldr	r2, [r3, #24]
 80057e6:	78fb      	ldrb	r3, [r7, #3]
 80057e8:	f003 030f 	and.w	r3, r3, #15
 80057ec:	2101      	movs	r1, #1
 80057ee:	fa01 f303 	lsl.w	r3, r1, r3
 80057f2:	6939      	ldr	r1, [r7, #16]
 80057f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80057f8:	4313      	orrs	r3, r2
 80057fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	699b      	ldr	r3, [r3, #24]
 8005800:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005808:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800580c:	2b00      	cmp	r3, #0
 800580e:	da03      	bge.n	8005818 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005810:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005814:	61bb      	str	r3, [r7, #24]
 8005816:	e001      	b.n	800581c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff fef9 	bl	8005614 <USB_GetHostSpeed>
 8005822:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005824:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005828:	2b02      	cmp	r3, #2
 800582a:	d106      	bne.n	800583a <USB_HC_Init+0x1d6>
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2b02      	cmp	r3, #2
 8005830:	d003      	beq.n	800583a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005836:	617b      	str	r3, [r7, #20]
 8005838:	e001      	b.n	800583e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800583e:	787b      	ldrb	r3, [r7, #1]
 8005840:	059b      	lsls	r3, r3, #22
 8005842:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005846:	78bb      	ldrb	r3, [r7, #2]
 8005848:	02db      	lsls	r3, r3, #11
 800584a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800584e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005850:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005854:	049b      	lsls	r3, r3, #18
 8005856:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800585a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800585c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800585e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005862:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	431a      	orrs	r2, r3
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800586c:	78fa      	ldrb	r2, [r7, #3]
 800586e:	0151      	lsls	r1, r2, #5
 8005870:	693a      	ldr	r2, [r7, #16]
 8005872:	440a      	add	r2, r1
 8005874:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005878:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800587c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800587e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005882:	2b03      	cmp	r3, #3
 8005884:	d003      	beq.n	800588e <USB_HC_Init+0x22a>
 8005886:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d10f      	bne.n	80058ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800588e:	78fb      	ldrb	r3, [r7, #3]
 8005890:	015a      	lsls	r2, r3, #5
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	4413      	add	r3, r2
 8005896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	0151      	lsls	r1, r2, #5
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	440a      	add	r2, r1
 80058a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80058ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80058ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3720      	adds	r7, #32
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40040000 	.word	0x40040000

080058bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08c      	sub	sp, #48	@ 0x30
 80058c0:	af02      	add	r7, sp, #8
 80058c2:	60f8      	str	r0, [r7, #12]
 80058c4:	60b9      	str	r1, [r7, #8]
 80058c6:	4613      	mov	r3, r2
 80058c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80058d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80058d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	4a5d      	ldr	r2, [pc, #372]	@ (8005a54 <USB_HC_StartXfer+0x198>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d12f      	bne.n	8005942 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80058e2:	79fb      	ldrb	r3, [r7, #7]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d11c      	bne.n	8005922 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	7c9b      	ldrb	r3, [r3, #18]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <USB_HC_StartXfer+0x3c>
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	7c9b      	ldrb	r3, [r3, #18]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d124      	bne.n	8005942 <USB_HC_StartXfer+0x86>
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	799b      	ldrb	r3, [r3, #6]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d120      	bne.n	8005942 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	6a3a      	ldr	r2, [r7, #32]
 8005914:	440a      	add	r2, r1
 8005916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800591a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591e:	60d3      	str	r3, [r2, #12]
 8005920:	e00f      	b.n	8005942 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	791b      	ldrb	r3, [r3, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10b      	bne.n	8005942 <USB_HC_StartXfer+0x86>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	795b      	ldrb	r3, [r3, #5]
 800592e:	2b01      	cmp	r3, #1
 8005930:	d107      	bne.n	8005942 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	4619      	mov	r1, r3
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fb6b 	bl	8006014 <USB_DoPing>
        return HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	e232      	b.n	8005da8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	799b      	ldrb	r3, [r3, #6]
 8005946:	2b01      	cmp	r3, #1
 8005948:	d158      	bne.n	80059fc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800594a:	2301      	movs	r3, #1
 800594c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	78db      	ldrb	r3, [r3, #3]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d007      	beq.n	8005966 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005956:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	8a92      	ldrh	r2, [r2, #20]
 800595c:	fb03 f202 	mul.w	r2, r3, r2
 8005960:	68bb      	ldr	r3, [r7, #8]
 8005962:	61da      	str	r2, [r3, #28]
 8005964:	e07c      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	7c9b      	ldrb	r3, [r3, #18]
 800596a:	2b01      	cmp	r3, #1
 800596c:	d130      	bne.n	80059d0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	6a1b      	ldr	r3, [r3, #32]
 8005972:	2bbc      	cmp	r3, #188	@ 0xbc
 8005974:	d918      	bls.n	80059a8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	8a9b      	ldrh	r3, [r3, #20]
 800597a:	461a      	mov	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	69da      	ldr	r2, [r3, #28]
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d003      	beq.n	8005998 <USB_HC_StartXfer+0xdc>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	68db      	ldr	r3, [r3, #12]
 8005994:	2b02      	cmp	r3, #2
 8005996:	d103      	bne.n	80059a0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2202      	movs	r2, #2
 800599c:	60da      	str	r2, [r3, #12]
 800599e:	e05f      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2201      	movs	r2, #1
 80059a4:	60da      	str	r2, [r3, #12]
 80059a6:	e05b      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	6a1a      	ldr	r2, [r3, #32]
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	68db      	ldr	r3, [r3, #12]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d007      	beq.n	80059c8 <USB_HC_StartXfer+0x10c>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d003      	beq.n	80059c8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2204      	movs	r2, #4
 80059c4:	60da      	str	r2, [r3, #12]
 80059c6:	e04b      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	2203      	movs	r2, #3
 80059cc:	60da      	str	r2, [r3, #12]
 80059ce:	e047      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 80059d0:	79fb      	ldrb	r3, [r7, #7]
 80059d2:	2b01      	cmp	r3, #1
 80059d4:	d10d      	bne.n	80059f2 <USB_HC_StartXfer+0x136>
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	8a92      	ldrh	r2, [r2, #20]
 80059de:	4293      	cmp	r3, r2
 80059e0:	d907      	bls.n	80059f2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	8a92      	ldrh	r2, [r2, #20]
 80059e8:	fb03 f202 	mul.w	r2, r3, r2
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	61da      	str	r2, [r3, #28]
 80059f0:	e036      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	6a1a      	ldr	r2, [r3, #32]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	61da      	str	r2, [r3, #28]
 80059fa:	e031      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	6a1b      	ldr	r3, [r3, #32]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d018      	beq.n	8005a36 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	8a92      	ldrh	r2, [r2, #20]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	8a92      	ldrh	r2, [r2, #20]
 8005a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a18:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005a1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005a1c:	8b7b      	ldrh	r3, [r7, #26]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d90b      	bls.n	8005a3a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8005a22:	8b7b      	ldrh	r3, [r7, #26]
 8005a24:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	8a92      	ldrh	r2, [r2, #20]
 8005a2c:	fb03 f202 	mul.w	r2, r3, r2
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	61da      	str	r2, [r3, #28]
 8005a34:	e001      	b.n	8005a3a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8005a36:	2301      	movs	r3, #1
 8005a38:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	78db      	ldrb	r3, [r3, #3]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005a42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	8a92      	ldrh	r2, [r2, #20]
 8005a48:	fb03 f202 	mul.w	r2, r3, r2
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	61da      	str	r2, [r3, #28]
 8005a50:	e006      	b.n	8005a60 <USB_HC_StartXfer+0x1a4>
 8005a52:	bf00      	nop
 8005a54:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005a58:	68bb      	ldr	r3, [r7, #8]
 8005a5a:	6a1a      	ldr	r2, [r3, #32]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005a6a:	04d9      	lsls	r1, r3, #19
 8005a6c:	4ba3      	ldr	r3, [pc, #652]	@ (8005cfc <USB_HC_StartXfer+0x440>)
 8005a6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	7d9b      	ldrb	r3, [r3, #22]
 8005a76:	075b      	lsls	r3, r3, #29
 8005a78:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a7c:	69f9      	ldr	r1, [r7, #28]
 8005a7e:	0148      	lsls	r0, r1, #5
 8005a80:	6a39      	ldr	r1, [r7, #32]
 8005a82:	4401      	add	r1, r0
 8005a84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a8c:	79fb      	ldrb	r3, [r7, #7]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d009      	beq.n	8005aa6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6999      	ldr	r1, [r3, #24]
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aa2:	460a      	mov	r2, r1
 8005aa4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 0301 	and.w	r3, r3, #1
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	bf0c      	ite	eq
 8005ab6:	2301      	moveq	r3, #1
 8005ab8:	2300      	movne	r3, #0
 8005aba:	b2db      	uxtb	r3, r3
 8005abc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	015a      	lsls	r2, r3, #5
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	69fa      	ldr	r2, [r7, #28]
 8005ace:	0151      	lsls	r1, r2, #5
 8005ad0:	6a3a      	ldr	r2, [r7, #32]
 8005ad2:	440a      	add	r2, r1
 8005ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ad8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005adc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	7e7b      	ldrb	r3, [r7, #25]
 8005aee:	075b      	lsls	r3, r3, #29
 8005af0:	69f9      	ldr	r1, [r7, #28]
 8005af2:	0148      	lsls	r0, r1, #5
 8005af4:	6a39      	ldr	r1, [r7, #32]
 8005af6:	4401      	add	r1, r0
 8005af8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005afc:	4313      	orrs	r3, r2
 8005afe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	799b      	ldrb	r3, [r3, #6]
 8005b04:	2b01      	cmp	r3, #1
 8005b06:	f040 80c3 	bne.w	8005c90 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	7c5b      	ldrb	r3, [r3, #17]
 8005b0e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b14:	4313      	orrs	r3, r2
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	0151      	lsls	r1, r2, #5
 8005b1a:	6a3a      	ldr	r2, [r7, #32]
 8005b1c:	440a      	add	r2, r1
 8005b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005b22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005b26:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	015a      	lsls	r2, r3, #5
 8005b2c:	6a3b      	ldr	r3, [r7, #32]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	69fa      	ldr	r2, [r7, #28]
 8005b38:	0151      	lsls	r1, r2, #5
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	440a      	add	r2, r1
 8005b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8005b46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	79db      	ldrb	r3, [r3, #7]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d123      	bne.n	8005b98 <USB_HC_StartXfer+0x2dc>
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	78db      	ldrb	r3, [r3, #3]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d11f      	bne.n	8005b98 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	6a3a      	ldr	r2, [r7, #32]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b76:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b84:	68db      	ldr	r3, [r3, #12]
 8005b86:	69fa      	ldr	r2, [r7, #28]
 8005b88:	0151      	lsls	r1, r2, #5
 8005b8a:	6a3a      	ldr	r2, [r7, #32]
 8005b8c:	440a      	add	r2, r1
 8005b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b96:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	7c9b      	ldrb	r3, [r3, #18]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d003      	beq.n	8005ba8 <USB_HC_StartXfer+0x2ec>
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	7c9b      	ldrb	r3, [r3, #18]
 8005ba4:	2b03      	cmp	r3, #3
 8005ba6:	d117      	bne.n	8005bd8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d113      	bne.n	8005bd8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	78db      	ldrb	r3, [r3, #3]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d10f      	bne.n	8005bd8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	69fa      	ldr	r2, [r7, #28]
 8005bc8:	0151      	lsls	r1, r2, #5
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	440a      	add	r2, r1
 8005bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bd6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	7c9b      	ldrb	r3, [r3, #18]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d162      	bne.n	8005ca6 <USB_HC_StartXfer+0x3ea>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d15e      	bne.n	8005ca6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	3b01      	subs	r3, #1
 8005bee:	2b03      	cmp	r3, #3
 8005bf0:	d858      	bhi.n	8005ca4 <USB_HC_StartXfer+0x3e8>
 8005bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <USB_HC_StartXfer+0x33c>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c09 	.word	0x08005c09
 8005bfc:	08005c2b 	.word	0x08005c2b
 8005c00:	08005c4d 	.word	0x08005c4d
 8005c04:	08005c6f 	.word	0x08005c6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	6a3b      	ldr	r3, [r7, #32]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	69fa      	ldr	r2, [r7, #28]
 8005c18:	0151      	lsls	r1, r2, #5
 8005c1a:	6a3a      	ldr	r2, [r7, #32]
 8005c1c:	440a      	add	r2, r1
 8005c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c26:	6053      	str	r3, [r2, #4]
          break;
 8005c28:	e03d      	b.n	8005ca6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	69fa      	ldr	r2, [r7, #28]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c44:	f043 030e 	orr.w	r3, r3, #14
 8005c48:	6053      	str	r3, [r2, #4]
          break;
 8005c4a:	e02c      	b.n	8005ca6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	69fa      	ldr	r2, [r7, #28]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	6a3a      	ldr	r2, [r7, #32]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005c6a:	6053      	str	r3, [r2, #4]
          break;
 8005c6c:	e01b      	b.n	8005ca6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	015a      	lsls	r2, r3, #5
 8005c72:	6a3b      	ldr	r3, [r7, #32]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	69fa      	ldr	r2, [r7, #28]
 8005c7e:	0151      	lsls	r1, r2, #5
 8005c80:	6a3a      	ldr	r2, [r7, #32]
 8005c82:	440a      	add	r2, r1
 8005c84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c8c:	6053      	str	r3, [r2, #4]
          break;
 8005c8e:	e00a      	b.n	8005ca6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	6053      	str	r3, [r2, #4]
 8005ca2:	e000      	b.n	8005ca6 <USB_HC_StartXfer+0x3ea>
          break;
 8005ca4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	6a3b      	ldr	r3, [r7, #32]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005cbc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	78db      	ldrb	r3, [r3, #3]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d004      	beq.n	8005cd0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ccc:	613b      	str	r3, [r7, #16]
 8005cce:	e003      	b.n	8005cd8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cd6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005cde:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cec:	461a      	mov	r2, r3
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	e055      	b.n	8005da8 <USB_HC_StartXfer+0x4ec>
 8005cfc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	78db      	ldrb	r3, [r3, #3]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d14e      	bne.n	8005da6 <USB_HC_StartXfer+0x4ea>
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6a1b      	ldr	r3, [r3, #32]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d04a      	beq.n	8005da6 <USB_HC_StartXfer+0x4ea>
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	79db      	ldrb	r3, [r3, #7]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d146      	bne.n	8005da6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	7c9b      	ldrb	r3, [r3, #18]
 8005d1c:	2b03      	cmp	r3, #3
 8005d1e:	d831      	bhi.n	8005d84 <USB_HC_StartXfer+0x4c8>
 8005d20:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <USB_HC_StartXfer+0x46c>)
 8005d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d26:	bf00      	nop
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d5d 	.word	0x08005d5d
 8005d30:	08005d39 	.word	0x08005d39
 8005d34:	08005d5d 	.word	0x08005d5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	6a1b      	ldr	r3, [r3, #32]
 8005d3c:	3303      	adds	r3, #3
 8005d3e:	089b      	lsrs	r3, r3, #2
 8005d40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005d42:	8afa      	ldrh	r2, [r7, #22]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d91c      	bls.n	8005d88 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	f043 0220 	orr.w	r2, r3, #32
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d5a:	e015      	b.n	8005d88 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	3303      	adds	r3, #3
 8005d62:	089b      	lsrs	r3, r3, #2
 8005d64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005d66:	8afa      	ldrh	r2, [r7, #22]
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d90a      	bls.n	8005d8c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	619a      	str	r2, [r3, #24]
        }
        break;
 8005d82:	e003      	b.n	8005d8c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8005d84:	bf00      	nop
 8005d86:	e002      	b.n	8005d8e <USB_HC_StartXfer+0x4d2>
        break;
 8005d88:	bf00      	nop
 8005d8a:	e000      	b.n	8005d8e <USB_HC_StartXfer+0x4d2>
        break;
 8005d8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	6999      	ldr	r1, [r3, #24]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	785a      	ldrb	r2, [r3, #1]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	6a1b      	ldr	r3, [r3, #32]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	9000      	str	r0, [sp, #0]
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff f9c9 	bl	8005138 <USB_WritePacket>
  }

  return HAL_OK;
 8005da6:	2300      	movs	r3, #0
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3728      	adds	r7, #40	@ 0x28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005dc2:	695b      	ldr	r3, [r3, #20]
 8005dc4:	b29b      	uxth	r3, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3714      	adds	r7, #20
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b089      	sub	sp, #36	@ 0x24
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	6078      	str	r0, [r7, #4]
 8005dda:	460b      	mov	r3, r1
 8005ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	015a      	lsls	r2, r3, #5
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	4413      	add	r3, r2
 8005df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	0c9b      	lsrs	r3, r3, #18
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	69fb      	ldr	r3, [r7, #28]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	0fdb      	lsrs	r3, r3, #31
 8005e10:	f003 0301 	and.w	r3, r3, #1
 8005e14:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	69fb      	ldr	r3, [r7, #28]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	0fdb      	lsrs	r3, r3, #31
 8005e26:	f003 0301 	and.w	r3, r3, #1
 8005e2a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d10d      	bne.n	8005e54 <USB_HC_Halt+0x82>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <USB_HC_Halt+0x82>
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d005      	beq.n	8005e50 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d002      	beq.n	8005e50 <USB_HC_Halt+0x7e>
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2b03      	cmp	r3, #3
 8005e4e:	d101      	bne.n	8005e54 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	e0d8      	b.n	8006006 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d002      	beq.n	8005e60 <USB_HC_Halt+0x8e>
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	d173      	bne.n	8005f48 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005e7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005e7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f003 0320 	and.w	r3, r3, #32
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d14a      	bne.n	8005f22 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d133      	bne.n	8005f00 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	69ba      	ldr	r2, [r7, #24]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	69fa      	ldr	r2, [r7, #28]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005eb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eb6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	015a      	lsls	r2, r3, #5
 8005ebc:	69fb      	ldr	r3, [r7, #28]
 8005ebe:	4413      	add	r3, r2
 8005ec0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	0151      	lsls	r1, r2, #5
 8005eca:	69fa      	ldr	r2, [r7, #28]
 8005ecc:	440a      	add	r2, r1
 8005ece:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ed2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ed6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	3301      	adds	r3, #1
 8005edc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ee4:	d82e      	bhi.n	8005f44 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ee6:	69bb      	ldr	r3, [r7, #24]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	69fb      	ldr	r3, [r7, #28]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ef8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005efc:	d0ec      	beq.n	8005ed8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005efe:	e081      	b.n	8006004 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	0151      	lsls	r1, r2, #5
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	440a      	add	r2, r1
 8005f16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f1a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f1e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f20:	e070      	b.n	8006004 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	69ba      	ldr	r2, [r7, #24]
 8005f32:	0151      	lsls	r1, r2, #5
 8005f34:	69fa      	ldr	r2, [r7, #28]
 8005f36:	440a      	add	r2, r1
 8005f38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005f40:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f42:	e05f      	b.n	8006004 <USB_HC_Halt+0x232>
            break;
 8005f44:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005f46:	e05d      	b.n	8006004 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005f48:	69bb      	ldr	r3, [r7, #24]
 8005f4a:	015a      	lsls	r2, r3, #5
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	4413      	add	r3, r2
 8005f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69ba      	ldr	r2, [r7, #24]
 8005f58:	0151      	lsls	r1, r2, #5
 8005f5a:	69fa      	ldr	r2, [r7, #28]
 8005f5c:	440a      	add	r2, r1
 8005f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f62:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f66:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d133      	bne.n	8005fe0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005f78:	69bb      	ldr	r3, [r7, #24]
 8005f7a:	015a      	lsls	r2, r3, #5
 8005f7c:	69fb      	ldr	r3, [r7, #28]
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	0151      	lsls	r1, r2, #5
 8005f8a:	69fa      	ldr	r2, [r7, #28]
 8005f8c:	440a      	add	r2, r1
 8005f8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005f92:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005f96:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005fb6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005fc4:	d81d      	bhi.n	8006002 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	015a      	lsls	r2, r3, #5
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	4413      	add	r3, r2
 8005fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005fdc:	d0ec      	beq.n	8005fb8 <USB_HC_Halt+0x1e6>
 8005fde:	e011      	b.n	8006004 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	015a      	lsls	r2, r3, #5
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4413      	add	r3, r2
 8005fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	69ba      	ldr	r2, [r7, #24]
 8005ff0:	0151      	lsls	r1, r2, #5
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	440a      	add	r2, r1
 8005ff6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ffa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	e000      	b.n	8006004 <USB_HC_Halt+0x232>
          break;
 8006002:	bf00      	nop
    }
  }

  return HAL_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3724      	adds	r7, #36	@ 0x24
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr
	...

08006014 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006024:	78fb      	ldrb	r3, [r7, #3]
 8006026:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006028:	2301      	movs	r3, #1
 800602a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	04da      	lsls	r2, r3, #19
 8006030:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <USB_DoPing+0x74>)
 8006032:	4013      	ands	r3, r2
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	697a      	ldr	r2, [r7, #20]
 800603a:	440a      	add	r2, r1
 800603c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006040:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006044:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006046:	693b      	ldr	r3, [r7, #16]
 8006048:	015a      	lsls	r2, r3, #5
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800605c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006064:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	4413      	add	r3, r2
 800606e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006072:	461a      	mov	r2, r3
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	371c      	adds	r7, #28
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	1ff80000 	.word	0x1ff80000

0800608c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006094:	2300      	movs	r3, #0
 8006096:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800609c:	2300      	movs	r3, #0
 800609e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7fe ff8c 	bl	8004fbe <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060a6:	2110      	movs	r1, #16
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f7fe ffe5 	bl	8005078 <USB_FlushTxFifo>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f7ff f80f 	bl	80050dc <USB_FlushRxFifo>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80060c8:	2300      	movs	r3, #0
 80060ca:	61bb      	str	r3, [r7, #24]
 80060cc:	e01f      	b.n	800610e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80060ce:	69bb      	ldr	r3, [r7, #24]
 80060d0:	015a      	lsls	r2, r3, #5
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	4413      	add	r3, r2
 80060d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80060f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	015a      	lsls	r2, r3, #5
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006102:	461a      	mov	r2, r3
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	3301      	adds	r3, #1
 800610c:	61bb      	str	r3, [r7, #24]
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	2b0f      	cmp	r3, #15
 8006112:	d9dc      	bls.n	80060ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006114:	2300      	movs	r3, #0
 8006116:	61bb      	str	r3, [r7, #24]
 8006118:	e034      	b.n	8006184 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	015a      	lsls	r2, r3, #5
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	4413      	add	r3, r2
 8006122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006130:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006138:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006140:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	4413      	add	r3, r2
 800614a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800614e:	461a      	mov	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	3301      	adds	r3, #1
 8006158:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006160:	d80c      	bhi.n	800617c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	015a      	lsls	r2, r3, #5
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	4413      	add	r3, r2
 800616a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006178:	d0ec      	beq.n	8006154 <USB_StopHost+0xc8>
 800617a:	e000      	b.n	800617e <USB_StopHost+0xf2>
        break;
 800617c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	3301      	adds	r3, #1
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b0f      	cmp	r3, #15
 8006188:	d9c7      	bls.n	800611a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006190:	461a      	mov	r2, r3
 8006192:	f04f 33ff 	mov.w	r3, #4294967295
 8006196:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f04f 32ff 	mov.w	r2, #4294967295
 800619e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7fe fefb 	bl	8004f9c <USB_EnableGlobalInt>

  return ret;
 80061a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3720      	adds	r7, #32
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 80061b4:	4904      	ldr	r1, [pc, #16]	@ (80061c8 <MX_FATFS_Init+0x18>)
 80061b6:	4805      	ldr	r0, [pc, #20]	@ (80061cc <MX_FATFS_Init+0x1c>)
 80061b8:	f008 ffc4 	bl	800f144 <FATFS_LinkDriver>
 80061bc:	4603      	mov	r3, r0
 80061be:	461a      	mov	r2, r3
 80061c0:	4b03      	ldr	r3, [pc, #12]	@ (80061d0 <MX_FATFS_Init+0x20>)
 80061c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80061c4:	bf00      	nop
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	20000230 	.word	0x20000230
 80061cc:	08014224 	.word	0x08014224
 80061d0:	2000022c 	.word	0x2000022c

080061d4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80061d4:	b480      	push	{r7}
 80061d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80061d8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80061da:	4618      	mov	r0, r3
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 80061ee:	2300      	movs	r3, #0
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	370c      	adds	r7, #12
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b084      	sub	sp, #16
 8006200:	af00      	add	r7, sp, #0
 8006202:	4603      	mov	r3, r0
 8006204:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	4619      	mov	r1, r3
 800620e:	4808      	ldr	r0, [pc, #32]	@ (8006230 <USBH_status+0x34>)
 8006210:	f000 fe71 	bl	8006ef6 <USBH_MSC_UnitIsReady>
 8006214:	4603      	mov	r3, r0
 8006216:	2b00      	cmp	r3, #0
 8006218:	d002      	beq.n	8006220 <USBH_status+0x24>
  {
    res = RES_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	73fb      	strb	r3, [r7, #15]
 800621e:	e001      	b.n	8006224 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8006220:	2301      	movs	r3, #1
 8006222:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	20006c80 	.word	0x20006c80

08006234 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b094      	sub	sp, #80	@ 0x50
 8006238:	af02      	add	r7, sp, #8
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	4603      	mov	r3, r0
 8006242:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 800624a:	7bf9      	ldrb	r1, [r7, #15]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	9300      	str	r3, [sp, #0]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	4813      	ldr	r0, [pc, #76]	@ (80062a4 <USBH_read+0x70>)
 8006256:	f000 fe98 	bl	8006f8a <USBH_MSC_Read>
 800625a:	4603      	mov	r3, r0
 800625c:	2b00      	cmp	r3, #0
 800625e:	d103      	bne.n	8006268 <USBH_read+0x34>
  {
    res = RES_OK;
 8006260:	2300      	movs	r3, #0
 8006262:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006266:	e017      	b.n	8006298 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8006268:	f107 0210 	add.w	r2, r7, #16
 800626c:	7bfb      	ldrb	r3, [r7, #15]
 800626e:	4619      	mov	r1, r3
 8006270:	480c      	ldr	r0, [pc, #48]	@ (80062a4 <USBH_read+0x70>)
 8006272:	f000 fe66 	bl	8006f42 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8006276:	7f7b      	ldrb	r3, [r7, #29]
 8006278:	2b3a      	cmp	r3, #58	@ 0x3a
 800627a:	d005      	beq.n	8006288 <USBH_read+0x54>
 800627c:	2b3a      	cmp	r3, #58	@ 0x3a
 800627e:	dc07      	bgt.n	8006290 <USBH_read+0x5c>
 8006280:	2b04      	cmp	r3, #4
 8006282:	d001      	beq.n	8006288 <USBH_read+0x54>
 8006284:	2b28      	cmp	r3, #40	@ 0x28
 8006286:	d103      	bne.n	8006290 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8006288:	2303      	movs	r3, #3
 800628a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800628e:	e003      	b.n	8006298 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006296:	bf00      	nop
    }
  }

  return res;
 8006298:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800629c:	4618      	mov	r0, r3
 800629e:	3748      	adds	r7, #72	@ 0x48
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	20006c80 	.word	0x20006c80

080062a8 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b094      	sub	sp, #80	@ 0x50
 80062ac:	af02      	add	r7, sp, #8
 80062ae:	60b9      	str	r1, [r7, #8]
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	603b      	str	r3, [r7, #0]
 80062b4:	4603      	mov	r3, r0
 80062b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80062b8:	2301      	movs	r3, #1
 80062ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 80062be:	7bf9      	ldrb	r1, [r7, #15]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	4817      	ldr	r0, [pc, #92]	@ (8006328 <USBH_write+0x80>)
 80062ca:	f000 fec7 	bl	800705c <USBH_MSC_Write>
 80062ce:	4603      	mov	r3, r0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d103      	bne.n	80062dc <USBH_write+0x34>
  {
    res = RES_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80062da:	e01f      	b.n	800631c <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 80062dc:	f107 0210 	add.w	r2, r7, #16
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	4619      	mov	r1, r3
 80062e4:	4810      	ldr	r0, [pc, #64]	@ (8006328 <USBH_write+0x80>)
 80062e6:	f000 fe2c 	bl	8006f42 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 80062ea:	7f7b      	ldrb	r3, [r7, #29]
 80062ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80062ee:	d00d      	beq.n	800630c <USBH_write+0x64>
 80062f0:	2b3a      	cmp	r3, #58	@ 0x3a
 80062f2:	dc0f      	bgt.n	8006314 <USBH_write+0x6c>
 80062f4:	2b28      	cmp	r3, #40	@ 0x28
 80062f6:	d009      	beq.n	800630c <USBH_write+0x64>
 80062f8:	2b28      	cmp	r3, #40	@ 0x28
 80062fa:	dc0b      	bgt.n	8006314 <USBH_write+0x6c>
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d005      	beq.n	800630c <USBH_write+0x64>
 8006300:	2b27      	cmp	r3, #39	@ 0x27
 8006302:	d107      	bne.n	8006314 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8006304:	2302      	movs	r3, #2
 8006306:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800630a:	e007      	b.n	800631c <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 800630c:	2303      	movs	r3, #3
 800630e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 8006312:	e003      	b.n	800631c <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
      break;
 800631a:	bf00      	nop
    }
  }

  return res;
 800631c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006320:	4618      	mov	r0, r3
 8006322:	3748      	adds	r7, #72	@ 0x48
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	20006c80 	.word	0x20006c80

0800632c <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b090      	sub	sp, #64	@ 0x40
 8006330:	af00      	add	r7, sp, #0
 8006332:	4603      	mov	r3, r0
 8006334:	603a      	str	r2, [r7, #0]
 8006336:	71fb      	strb	r3, [r7, #7]
 8006338:	460b      	mov	r3, r1
 800633a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8006342:	79bb      	ldrb	r3, [r7, #6]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d852      	bhi.n	80063ee <USBH_ioctl+0xc2>
 8006348:	a201      	add	r2, pc, #4	@ (adr r2, 8006350 <USBH_ioctl+0x24>)
 800634a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800634e:	bf00      	nop
 8006350:	08006361 	.word	0x08006361
 8006354:	08006369 	.word	0x08006369
 8006358:	08006393 	.word	0x08006393
 800635c:	080063bf 	.word	0x080063bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006366:	e045      	b.n	80063f4 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006368:	f107 0208 	add.w	r2, r7, #8
 800636c:	79fb      	ldrb	r3, [r7, #7]
 800636e:	4619      	mov	r1, r3
 8006370:	4823      	ldr	r0, [pc, #140]	@ (8006400 <USBH_ioctl+0xd4>)
 8006372:	f000 fde6 	bl	8006f42 <USBH_MSC_GetLUNInfo>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8006388:	e034      	b.n	80063f4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 8006390:	e030      	b.n	80063f4 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8006392:	f107 0208 	add.w	r2, r7, #8
 8006396:	79fb      	ldrb	r3, [r7, #7]
 8006398:	4619      	mov	r1, r3
 800639a:	4819      	ldr	r0, [pc, #100]	@ (8006400 <USBH_ioctl+0xd4>)
 800639c:	f000 fdd1 	bl	8006f42 <USBH_MSC_GetLUNInfo>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d107      	bne.n	80063b6 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 80063a6:	8a3b      	ldrh	r3, [r7, #16]
 80063a8:	461a      	mov	r2, r3
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80063b4:	e01e      	b.n	80063f4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80063bc:	e01a      	b.n	80063f4 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 80063be:	f107 0208 	add.w	r2, r7, #8
 80063c2:	79fb      	ldrb	r3, [r7, #7]
 80063c4:	4619      	mov	r1, r3
 80063c6:	480e      	ldr	r0, [pc, #56]	@ (8006400 <USBH_ioctl+0xd4>)
 80063c8:	f000 fdbb 	bl	8006f42 <USBH_MSC_GetLUNInfo>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d109      	bne.n	80063e6 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 80063d2:	8a3b      	ldrh	r3, [r7, #16]
 80063d4:	0a5b      	lsrs	r3, r3, #9
 80063d6:	b29b      	uxth	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 80063de:	2300      	movs	r3, #0
 80063e0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 80063e4:	e006      	b.n	80063f4 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 80063e6:	2301      	movs	r3, #1
 80063e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    break;
 80063ec:	e002      	b.n	80063f4 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 80063ee:	2304      	movs	r3, #4
 80063f0:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return res;
 80063f4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3740      	adds	r7, #64	@ 0x40
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20006c80 	.word	0x20006c80

08006404 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006404:	b590      	push	{r4, r7, lr}
 8006406:	b089      	sub	sp, #36	@ 0x24
 8006408:	af04      	add	r7, sp, #16
 800640a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006412:	7919      	ldrb	r1, [r3, #4]
 8006414:	2350      	movs	r3, #80	@ 0x50
 8006416:	2206      	movs	r2, #6
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f001 fd76 	bl	8007f0a <USBH_FindInterface>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2bff      	cmp	r3, #255	@ 0xff
 8006426:	d002      	beq.n	800642e <USBH_MSC_InterfaceInit+0x2a>
 8006428:	7bfb      	ldrb	r3, [r7, #15]
 800642a:	2b01      	cmp	r3, #1
 800642c:	d901      	bls.n	8006432 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800642e:	2302      	movs	r3, #2
 8006430:	e106      	b.n	8006640 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f001 fd4b 	bl	8007ed2 <USBH_SelectInterface>
 800643c:	4603      	mov	r3, r0
 800643e:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006440:	7bbb      	ldrb	r3, [r7, #14]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d001      	beq.n	800644a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8006446:	2302      	movs	r3, #2
 8006448:	e0fa      	b.n	8006640 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8006450:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006454:	f00c fecc 	bl	80131f0 <malloc>
 8006458:	4603      	mov	r3, r0
 800645a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800646c:	2302      	movs	r3, #2
 800646e:	e0e7      	b.n	8006640 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8006470:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006474:	2100      	movs	r1, #0
 8006476:	68b8      	ldr	r0, [r7, #8]
 8006478:	f00c ff98 	bl	80133ac <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	211a      	movs	r1, #26
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	4413      	add	r3, r2
 8006488:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	b25b      	sxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	da16      	bge.n	80064c2 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	211a      	movs	r1, #26
 800649a:	fb01 f303 	mul.w	r3, r1, r3
 800649e:	4413      	add	r3, r2
 80064a0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80064a4:	781a      	ldrb	r2, [r3, #0]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	687a      	ldr	r2, [r7, #4]
 80064ae:	211a      	movs	r1, #26
 80064b0:	fb01 f303 	mul.w	r3, r1, r3
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064ba:	881a      	ldrh	r2, [r3, #0]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	815a      	strh	r2, [r3, #10]
 80064c0:	e015      	b.n	80064ee <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	211a      	movs	r1, #26
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	4413      	add	r3, r2
 80064ce:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80064d2:	781a      	ldrb	r2, [r3, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80064d8:	7bfb      	ldrb	r3, [r7, #15]
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	211a      	movs	r1, #26
 80064de:	fb01 f303 	mul.w	r3, r1, r3
 80064e2:	4413      	add	r3, r2
 80064e4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80064e8:	881a      	ldrh	r2, [r3, #0]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
 80064f0:	687a      	ldr	r2, [r7, #4]
 80064f2:	211a      	movs	r1, #26
 80064f4:	fb01 f303 	mul.w	r3, r1, r3
 80064f8:	4413      	add	r3, r2
 80064fa:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80064fe:	781b      	ldrb	r3, [r3, #0]
 8006500:	b25b      	sxtb	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	da16      	bge.n	8006534 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	211a      	movs	r1, #26
 800650c:	fb01 f303 	mul.w	r3, r1, r3
 8006510:	4413      	add	r3, r2
 8006512:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006516:	781a      	ldrb	r2, [r3, #0]
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	687a      	ldr	r2, [r7, #4]
 8006520:	211a      	movs	r1, #26
 8006522:	fb01 f303 	mul.w	r3, r1, r3
 8006526:	4413      	add	r3, r2
 8006528:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800652c:	881a      	ldrh	r2, [r3, #0]
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	815a      	strh	r2, [r3, #10]
 8006532:	e015      	b.n	8006560 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	211a      	movs	r1, #26
 800653a:	fb01 f303 	mul.w	r3, r1, r3
 800653e:	4413      	add	r3, r2
 8006540:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8006544:	781a      	ldrb	r2, [r3, #0]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
 800654c:	687a      	ldr	r2, [r7, #4]
 800654e:	211a      	movs	r1, #26
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	4413      	add	r3, r2
 8006556:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800655a:	881a      	ldrh	r2, [r3, #0]
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	2200      	movs	r2, #0
 8006564:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	2200      	movs	r2, #0
 800656a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	2200      	movs	r2, #0
 8006570:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	799b      	ldrb	r3, [r3, #6]
 8006576:	4619      	mov	r1, r3
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f003 fa62 	bl	8009a42 <USBH_AllocPipe>
 800657e:	4603      	mov	r3, r0
 8006580:	461a      	mov	r2, r3
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	79db      	ldrb	r3, [r3, #7]
 800658a:	4619      	mov	r1, r3
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f003 fa58 	bl	8009a42 <USBH_AllocPipe>
 8006592:	4603      	mov	r3, r0
 8006594:	461a      	mov	r2, r3
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fe02 	bl	80071a4 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	799b      	ldrb	r3, [r3, #6]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d01e      	beq.n	80065e6 <USBH_MSC_InterfaceInit+0x1e2>
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	891b      	ldrh	r3, [r3, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d01a      	beq.n	80065e6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	7959      	ldrb	r1, [r3, #5]
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	7998      	ldrb	r0, [r3, #6]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	8912      	ldrh	r2, [r2, #8]
 80065c8:	9202      	str	r2, [sp, #8]
 80065ca:	2202      	movs	r2, #2
 80065cc:	9201      	str	r2, [sp, #4]
 80065ce:	9300      	str	r3, [sp, #0]
 80065d0:	4623      	mov	r3, r4
 80065d2:	4602      	mov	r2, r0
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f003 fa05 	bl	80099e4 <USBH_OpenPipe>
 80065da:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	79db      	ldrb	r3, [r3, #7]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d02c      	beq.n	800663e <USBH_MSC_InterfaceInit+0x23a>
 80065e4:	e001      	b.n	80065ea <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e02a      	b.n	8006640 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	895b      	ldrh	r3, [r3, #10]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d025      	beq.n	800663e <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	7919      	ldrb	r1, [r3, #4]
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	79d8      	ldrb	r0, [r3, #7]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	8952      	ldrh	r2, [r2, #10]
 800660a:	9202      	str	r2, [sp, #8]
 800660c:	2202      	movs	r2, #2
 800660e:	9201      	str	r2, [sp, #4]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4623      	mov	r3, r4
 8006614:	4602      	mov	r2, r0
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f003 f9e4 	bl	80099e4 <USBH_OpenPipe>
 800661c:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	791b      	ldrb	r3, [r3, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	4619      	mov	r1, r3
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f00c fd45 	bl	80130b6 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	795b      	ldrb	r3, [r3, #5]
 8006630:	2200      	movs	r2, #0
 8006632:	4619      	mov	r1, r3
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f00c fd3e 	bl	80130b6 <USBH_LL_SetToggle>

  return USBH_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	e000      	b.n	8006640 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800663e:	2303      	movs	r3, #3
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	bd90      	pop	{r4, r7, pc}

08006648 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	795b      	ldrb	r3, [r3, #5]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d00e      	beq.n	8006680 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	795b      	ldrb	r3, [r3, #5]
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f003 f9da 	bl	8009a22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	795b      	ldrb	r3, [r3, #5]
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f003 fa05 	bl	8009a84 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	791b      	ldrb	r3, [r3, #4]
 800668c:	4619      	mov	r1, r3
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f003 f9c7 	bl	8009a22 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	791b      	ldrb	r3, [r3, #4]
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f003 f9f2 	bl	8009a84 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00b      	beq.n	80066ca <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066b8:	69db      	ldr	r3, [r3, #28]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f00c fda0 	bl	8013200 <free>
    phost->pActiveClass->pData = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066c6:	2200      	movs	r2, #0
 80066c8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3710      	adds	r7, #16
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b084      	sub	sp, #16
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80066e2:	69db      	ldr	r3, [r3, #28]
 80066e4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80066e6:	2301      	movs	r3, #1
 80066e8:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	7b9b      	ldrb	r3, [r3, #14]
 80066ee:	2b03      	cmp	r3, #3
 80066f0:	d041      	beq.n	8006776 <USBH_MSC_ClassRequest+0xa2>
 80066f2:	2b03      	cmp	r3, #3
 80066f4:	dc4b      	bgt.n	800678e <USBH_MSC_ClassRequest+0xba>
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d001      	beq.n	80066fe <USBH_MSC_ClassRequest+0x2a>
 80066fa:	2b02      	cmp	r3, #2
 80066fc:	d147      	bne.n	800678e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4619      	mov	r1, r3
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fd30 	bl	8007168 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 800670c:	7bfb      	ldrb	r3, [r7, #15]
 800670e:	2b03      	cmp	r3, #3
 8006710:	d104      	bne.n	800671c <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	2200      	movs	r2, #0
 8006716:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8006718:	2300      	movs	r3, #0
 800671a:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 800671c:	7bfb      	ldrb	r3, [r7, #15]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d137      	bne.n	8006792 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	781b      	ldrb	r3, [r3, #0]
 8006726:	2b02      	cmp	r3, #2
 8006728:	d804      	bhi.n	8006734 <USBH_MSC_ClassRequest+0x60>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	3301      	adds	r3, #1
 8006730:	b2da      	uxtb	r2, r3
 8006732:	e000      	b.n	8006736 <USBH_MSC_ClassRequest+0x62>
 8006734:	2202      	movs	r2, #2
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 800673a:	2300      	movs	r3, #0
 800673c:	73bb      	strb	r3, [r7, #14]
 800673e:	e014      	b.n	800676a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	2134      	movs	r1, #52	@ 0x34
 8006746:	fb01 f303 	mul.w	r3, r1, r3
 800674a:	4413      	add	r3, r2
 800674c:	3392      	adds	r3, #146	@ 0x92
 800674e:	2202      	movs	r2, #2
 8006750:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8006752:	7bbb      	ldrb	r3, [r7, #14]
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	2134      	movs	r1, #52	@ 0x34
 8006758:	fb01 f303 	mul.w	r3, r1, r3
 800675c:	4413      	add	r3, r2
 800675e:	33c1      	adds	r3, #193	@ 0xc1
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	3301      	adds	r3, #1
 8006768:	73bb      	strb	r3, [r7, #14]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	7bba      	ldrb	r2, [r7, #14]
 8006770:	429a      	cmp	r2, r3
 8006772:	d3e5      	bcc.n	8006740 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8006774:	e00d      	b.n	8006792 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8006776:	2100      	movs	r1, #0
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f002 fabd 	bl	8008cf8 <USBH_ClrFeature>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d108      	bne.n	8006796 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	7bda      	ldrb	r2, [r3, #15]
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800678c:	e003      	b.n	8006796 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800678e:	bf00      	nop
 8006790:	e002      	b.n	8006798 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006792:	bf00      	nop
 8006794:	e000      	b.n	8006798 <USBH_MSC_ClassRequest+0xc4>
      break;
 8006796:	bf00      	nop
  }

  return status;
 8006798:	7bfb      	ldrb	r3, [r7, #15]
}
 800679a:	4618      	mov	r0, r3
 800679c:	3710      	adds	r7, #16
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 80067b6:	2301      	movs	r3, #1
 80067b8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 80067ba:	2301      	movs	r3, #1
 80067bc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 80067be:	2301      	movs	r3, #1
 80067c0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	7b1b      	ldrb	r3, [r3, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <USBH_MSC_Process+0x2e>
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	f000 828b 	beq.w	8006ce6 <USBH_MSC_Process+0x542>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 80067d0:	e28c      	b.n	8006cec <USBH_MSC_Process+0x548>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80067d8:	693a      	ldr	r2, [r7, #16]
 80067da:	7812      	ldrb	r2, [r2, #0]
 80067dc:	4293      	cmp	r3, r2
 80067de:	f080 8266 	bcs.w	8006cae <USBH_MSC_Process+0x50a>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80067e8:	4619      	mov	r1, r3
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	2334      	movs	r3, #52	@ 0x34
 80067ee:	fb01 f303 	mul.w	r3, r1, r3
 80067f2:	4413      	add	r3, r2
 80067f4:	3391      	adds	r3, #145	@ 0x91
 80067f6:	2201      	movs	r2, #1
 80067f8:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006800:	4619      	mov	r1, r3
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	2334      	movs	r3, #52	@ 0x34
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	4413      	add	r3, r2
 800680c:	3390      	adds	r3, #144	@ 0x90
 800680e:	781b      	ldrb	r3, [r3, #0]
 8006810:	2b08      	cmp	r3, #8
 8006812:	f200 8234 	bhi.w	8006c7e <USBH_MSC_Process+0x4da>
 8006816:	a201      	add	r2, pc, #4	@ (adr r2, 800681c <USBH_MSC_Process+0x78>)
 8006818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681c:	08006841 	.word	0x08006841
 8006820:	08006c7f 	.word	0x08006c7f
 8006824:	08006909 	.word	0x08006909
 8006828:	08006a8d 	.word	0x08006a8d
 800682c:	08006867 	.word	0x08006867
 8006830:	08006b59 	.word	0x08006b59
 8006834:	08006c7f 	.word	0x08006c7f
 8006838:	08006c7f 	.word	0x08006c7f
 800683c:	08006c6d 	.word	0x08006c6d
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006846:	4619      	mov	r1, r3
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	2334      	movs	r3, #52	@ 0x34
 800684c:	fb01 f303 	mul.w	r3, r1, r3
 8006850:	4413      	add	r3, r2
 8006852:	3390      	adds	r3, #144	@ 0x90
 8006854:	2204      	movs	r2, #4
 8006856:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
            break;
 8006864:	e214      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800686c:	b2d9      	uxtb	r1, r3
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006874:	461a      	mov	r2, r3
 8006876:	2334      	movs	r3, #52	@ 0x34
 8006878:	fb02 f303 	mul.w	r3, r2, r3
 800687c:	3398      	adds	r3, #152	@ 0x98
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	4413      	add	r3, r2
 8006882:	3307      	adds	r3, #7
 8006884:	461a      	mov	r2, r3
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 f835 	bl	80078f6 <USBH_MSC_SCSI_Inquiry>
 800688c:	4603      	mov	r3, r0
 800688e:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006890:	7bfb      	ldrb	r3, [r7, #15]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d10b      	bne.n	80068ae <USBH_MSC_Process+0x10a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800689c:	4619      	mov	r1, r3
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	2334      	movs	r3, #52	@ 0x34
 80068a2:	fb01 f303 	mul.w	r3, r1, r3
 80068a6:	4413      	add	r3, r2
 80068a8:	3390      	adds	r3, #144	@ 0x90
 80068aa:	2202      	movs	r2, #2
 80068ac:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d10c      	bne.n	80068ce <USBH_MSC_Process+0x12a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80068ba:	4619      	mov	r1, r3
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	2334      	movs	r3, #52	@ 0x34
 80068c0:	fb01 f303 	mul.w	r3, r1, r3
 80068c4:	4413      	add	r3, r2
 80068c6:	3390      	adds	r3, #144	@ 0x90
 80068c8:	2205      	movs	r2, #5
 80068ca:	701a      	strb	r2, [r3, #0]
            break;
 80068cc:	e1d9      	b.n	8006c82 <USBH_MSC_Process+0x4de>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80068ce:	7bfb      	ldrb	r3, [r7, #15]
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	f040 81d6 	bne.w	8006c82 <USBH_MSC_Process+0x4de>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80068dc:	4619      	mov	r1, r3
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	2334      	movs	r3, #52	@ 0x34
 80068e2:	fb01 f303 	mul.w	r3, r1, r3
 80068e6:	4413      	add	r3, r2
 80068e8:	3390      	adds	r3, #144	@ 0x90
 80068ea:	2201      	movs	r2, #1
 80068ec:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80068f4:	4619      	mov	r1, r3
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	2334      	movs	r3, #52	@ 0x34
 80068fa:	fb01 f303 	mul.w	r3, r1, r3
 80068fe:	4413      	add	r3, r2
 8006900:	3391      	adds	r3, #145	@ 0x91
 8006902:	2202      	movs	r2, #2
 8006904:	701a      	strb	r2, [r3, #0]
            break;
 8006906:	e1bc      	b.n	8006c82 <USBH_MSC_Process+0x4de>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800690e:	b2db      	uxtb	r3, r3
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 ff32 	bl	800777c <USBH_MSC_SCSI_TestUnitReady>
 8006918:	4603      	mov	r3, r0
 800691a:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 800691c:	7bbb      	ldrb	r3, [r7, #14]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d149      	bne.n	80069b6 <USBH_MSC_Process+0x212>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006928:	4619      	mov	r1, r3
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	2334      	movs	r3, #52	@ 0x34
 800692e:	fb01 f303 	mul.w	r3, r1, r3
 8006932:	4413      	add	r3, r2
 8006934:	3392      	adds	r3, #146	@ 0x92
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00c      	beq.n	8006956 <USBH_MSC_Process+0x1b2>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006942:	4619      	mov	r1, r3
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	2334      	movs	r3, #52	@ 0x34
 8006948:	fb01 f303 	mul.w	r3, r1, r3
 800694c:	4413      	add	r3, r2
 800694e:	33c1      	adds	r3, #193	@ 0xc1
 8006950:	2201      	movs	r2, #1
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	e00b      	b.n	800696e <USBH_MSC_Process+0x1ca>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800695c:	4619      	mov	r1, r3
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	2334      	movs	r3, #52	@ 0x34
 8006962:	fb01 f303 	mul.w	r3, r1, r3
 8006966:	4413      	add	r3, r2
 8006968:	33c1      	adds	r3, #193	@ 0xc1
 800696a:	2200      	movs	r2, #0
 800696c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006974:	4619      	mov	r1, r3
 8006976:	693a      	ldr	r2, [r7, #16]
 8006978:	2334      	movs	r3, #52	@ 0x34
 800697a:	fb01 f303 	mul.w	r3, r1, r3
 800697e:	4413      	add	r3, r2
 8006980:	3390      	adds	r3, #144	@ 0x90
 8006982:	2203      	movs	r2, #3
 8006984:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 800698c:	4619      	mov	r1, r3
 800698e:	693a      	ldr	r2, [r7, #16]
 8006990:	2334      	movs	r3, #52	@ 0x34
 8006992:	fb01 f303 	mul.w	r3, r1, r3
 8006996:	4413      	add	r3, r2
 8006998:	3391      	adds	r3, #145	@ 0x91
 800699a:	2200      	movs	r2, #0
 800699c:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80069a4:	4619      	mov	r1, r3
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	2334      	movs	r3, #52	@ 0x34
 80069aa:	fb01 f303 	mul.w	r3, r1, r3
 80069ae:	4413      	add	r3, r2
 80069b0:	3392      	adds	r3, #146	@ 0x92
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80069b6:	7bbb      	ldrb	r3, [r7, #14]
 80069b8:	2b02      	cmp	r3, #2
 80069ba:	d14a      	bne.n	8006a52 <USBH_MSC_Process+0x2ae>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80069c2:	4619      	mov	r1, r3
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	2334      	movs	r3, #52	@ 0x34
 80069c8:	fb01 f303 	mul.w	r3, r1, r3
 80069cc:	4413      	add	r3, r2
 80069ce:	3392      	adds	r3, #146	@ 0x92
 80069d0:	781b      	ldrb	r3, [r3, #0]
 80069d2:	2b02      	cmp	r3, #2
 80069d4:	d00c      	beq.n	80069f0 <USBH_MSC_Process+0x24c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80069dc:	4619      	mov	r1, r3
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	2334      	movs	r3, #52	@ 0x34
 80069e2:	fb01 f303 	mul.w	r3, r1, r3
 80069e6:	4413      	add	r3, r2
 80069e8:	33c1      	adds	r3, #193	@ 0xc1
 80069ea:	2201      	movs	r2, #1
 80069ec:	701a      	strb	r2, [r3, #0]
 80069ee:	e00b      	b.n	8006a08 <USBH_MSC_Process+0x264>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80069f0:	693b      	ldr	r3, [r7, #16]
 80069f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 80069f6:	4619      	mov	r1, r3
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	2334      	movs	r3, #52	@ 0x34
 80069fc:	fb01 f303 	mul.w	r3, r1, r3
 8006a00:	4413      	add	r3, r2
 8006a02:	33c1      	adds	r3, #193	@ 0xc1
 8006a04:	2200      	movs	r2, #0
 8006a06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a0e:	4619      	mov	r1, r3
 8006a10:	693a      	ldr	r2, [r7, #16]
 8006a12:	2334      	movs	r3, #52	@ 0x34
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	4413      	add	r3, r2
 8006a1a:	3390      	adds	r3, #144	@ 0x90
 8006a1c:	2205      	movs	r2, #5
 8006a1e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a26:	4619      	mov	r1, r3
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	2334      	movs	r3, #52	@ 0x34
 8006a2c:	fb01 f303 	mul.w	r3, r1, r3
 8006a30:	4413      	add	r3, r2
 8006a32:	3391      	adds	r3, #145	@ 0x91
 8006a34:	2201      	movs	r2, #1
 8006a36:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a3e:	4619      	mov	r1, r3
 8006a40:	693a      	ldr	r2, [r7, #16]
 8006a42:	2334      	movs	r3, #52	@ 0x34
 8006a44:	fb01 f303 	mul.w	r3, r1, r3
 8006a48:	4413      	add	r3, r2
 8006a4a:	3392      	adds	r3, #146	@ 0x92
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	701a      	strb	r2, [r3, #0]
            break;
 8006a50:	e119      	b.n	8006c86 <USBH_MSC_Process+0x4e2>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006a52:	7bbb      	ldrb	r3, [r7, #14]
 8006a54:	2b04      	cmp	r3, #4
 8006a56:	f040 8116 	bne.w	8006c86 <USBH_MSC_Process+0x4e2>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a60:	4619      	mov	r1, r3
 8006a62:	693a      	ldr	r2, [r7, #16]
 8006a64:	2334      	movs	r3, #52	@ 0x34
 8006a66:	fb01 f303 	mul.w	r3, r1, r3
 8006a6a:	4413      	add	r3, r2
 8006a6c:	3390      	adds	r3, #144	@ 0x90
 8006a6e:	2201      	movs	r2, #1
 8006a70:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a78:	4619      	mov	r1, r3
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	2334      	movs	r3, #52	@ 0x34
 8006a7e:	fb01 f303 	mul.w	r3, r1, r3
 8006a82:	4413      	add	r3, r2
 8006a84:	3391      	adds	r3, #145	@ 0x91
 8006a86:	2202      	movs	r2, #2
 8006a88:	701a      	strb	r2, [r3, #0]
            break;
 8006a8a:	e0fc      	b.n	8006c86 <USBH_MSC_Process+0x4e2>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a92:	b2d9      	uxtb	r1, r3
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2334      	movs	r3, #52	@ 0x34
 8006a9e:	fb02 f303 	mul.w	r3, r2, r3
 8006aa2:	3390      	adds	r3, #144	@ 0x90
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	4413      	add	r3, r2
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fea8 	bl	8007802 <USBH_MSC_SCSI_ReadCapacity>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d120      	bne.n	8006afe <USBH_MSC_Process+0x35a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	693a      	ldr	r2, [r7, #16]
 8006ac6:	2334      	movs	r3, #52	@ 0x34
 8006ac8:	fb01 f303 	mul.w	r3, r1, r3
 8006acc:	4413      	add	r3, r2
 8006ace:	3390      	adds	r3, #144	@ 0x90
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ada:	4619      	mov	r1, r3
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	2334      	movs	r3, #52	@ 0x34
 8006ae0:	fb01 f303 	mul.w	r3, r1, r3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	3391      	adds	r3, #145	@ 0x91
 8006ae8:	2200      	movs	r2, #0
 8006aea:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006af2:	3301      	adds	r3, #1
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8006afc:	e0c5      	b.n	8006c8a <USBH_MSC_Process+0x4e6>
            else if (scsi_status == USBH_FAIL)
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d10c      	bne.n	8006b1e <USBH_MSC_Process+0x37a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	693a      	ldr	r2, [r7, #16]
 8006b0e:	2334      	movs	r3, #52	@ 0x34
 8006b10:	fb01 f303 	mul.w	r3, r1, r3
 8006b14:	4413      	add	r3, r2
 8006b16:	3390      	adds	r3, #144	@ 0x90
 8006b18:	2205      	movs	r2, #5
 8006b1a:	701a      	strb	r2, [r3, #0]
            break;
 8006b1c:	e0b5      	b.n	8006c8a <USBH_MSC_Process+0x4e6>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	f040 80b2 	bne.w	8006c8a <USBH_MSC_Process+0x4e6>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	2334      	movs	r3, #52	@ 0x34
 8006b32:	fb01 f303 	mul.w	r3, r1, r3
 8006b36:	4413      	add	r3, r2
 8006b38:	3390      	adds	r3, #144	@ 0x90
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006b44:	4619      	mov	r1, r3
 8006b46:	693a      	ldr	r2, [r7, #16]
 8006b48:	2334      	movs	r3, #52	@ 0x34
 8006b4a:	fb01 f303 	mul.w	r3, r1, r3
 8006b4e:	4413      	add	r3, r2
 8006b50:	3391      	adds	r3, #145	@ 0x91
 8006b52:	2202      	movs	r2, #2
 8006b54:	701a      	strb	r2, [r3, #0]
            break;
 8006b56:	e098      	b.n	8006c8a <USBH_MSC_Process+0x4e6>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006b5e:	b2d9      	uxtb	r1, r3
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006b66:	461a      	mov	r2, r3
 8006b68:	2334      	movs	r3, #52	@ 0x34
 8006b6a:	fb02 f303 	mul.w	r3, r2, r3
 8006b6e:	3398      	adds	r3, #152	@ 0x98
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	3304      	adds	r3, #4
 8006b76:	461a      	mov	r2, r3
 8006b78:	6878      	ldr	r0, [r7, #4]
 8006b7a:	f000 ff61 	bl	8007a40 <USBH_MSC_SCSI_RequestSense>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d145      	bne.n	8006c14 <USBH_MSC_Process+0x470>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006b8e:	4619      	mov	r1, r3
 8006b90:	693a      	ldr	r2, [r7, #16]
 8006b92:	2334      	movs	r3, #52	@ 0x34
 8006b94:	fb01 f303 	mul.w	r3, r1, r3
 8006b98:	4413      	add	r3, r2
 8006b9a:	339c      	adds	r3, #156	@ 0x9c
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	2b06      	cmp	r3, #6
 8006ba0:	d00c      	beq.n	8006bbc <USBH_MSC_Process+0x418>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006ba8:	4619      	mov	r1, r3
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	2334      	movs	r3, #52	@ 0x34
 8006bae:	fb01 f303 	mul.w	r3, r1, r3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	339c      	adds	r3, #156	@ 0x9c
 8006bb6:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	d117      	bne.n	8006bec <USBH_MSC_Process+0x448>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	f242 720f 	movw	r2, #9999	@ 0x270f
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d80c      	bhi.n	8006bec <USBH_MSC_Process+0x448>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006bd8:	4619      	mov	r1, r3
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	2334      	movs	r3, #52	@ 0x34
 8006bde:	fb01 f303 	mul.w	r3, r1, r3
 8006be2:	4413      	add	r3, r2
 8006be4:	3390      	adds	r3, #144	@ 0x90
 8006be6:	2202      	movs	r2, #2
 8006be8:	701a      	strb	r2, [r3, #0]
                  break;
 8006bea:	e051      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	2334      	movs	r3, #52	@ 0x34
 8006bf8:	fb01 f303 	mul.w	r3, r1, r3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	3390      	adds	r3, #144	@ 0x90
 8006c00:	2201      	movs	r2, #1
 8006c02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            if (scsi_status == USBH_FAIL)
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d10c      	bne.n	8006c34 <USBH_MSC_Process+0x490>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c20:	4619      	mov	r1, r3
 8006c22:	693a      	ldr	r2, [r7, #16]
 8006c24:	2334      	movs	r3, #52	@ 0x34
 8006c26:	fb01 f303 	mul.w	r3, r1, r3
 8006c2a:	4413      	add	r3, r2
 8006c2c:	3390      	adds	r3, #144	@ 0x90
 8006c2e:	2208      	movs	r2, #8
 8006c30:	701a      	strb	r2, [r3, #0]
            break;
 8006c32:	e02c      	b.n	8006c8e <USBH_MSC_Process+0x4ea>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b04      	cmp	r3, #4
 8006c38:	d129      	bne.n	8006c8e <USBH_MSC_Process+0x4ea>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c40:	4619      	mov	r1, r3
 8006c42:	693a      	ldr	r2, [r7, #16]
 8006c44:	2334      	movs	r3, #52	@ 0x34
 8006c46:	fb01 f303 	mul.w	r3, r1, r3
 8006c4a:	4413      	add	r3, r2
 8006c4c:	3390      	adds	r3, #144	@ 0x90
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c58:	4619      	mov	r1, r3
 8006c5a:	693a      	ldr	r2, [r7, #16]
 8006c5c:	2334      	movs	r3, #52	@ 0x34
 8006c5e:	fb01 f303 	mul.w	r3, r1, r3
 8006c62:	4413      	add	r3, r2
 8006c64:	3391      	adds	r3, #145	@ 0x91
 8006c66:	2202      	movs	r2, #2
 8006c68:	701a      	strb	r2, [r3, #0]
            break;
 8006c6a:	e010      	b.n	8006c8e <USBH_MSC_Process+0x4ea>
            MSC_Handle->current_lun++;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8006c72:	3301      	adds	r3, #1
 8006c74:	b29a      	uxth	r2, r3
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8006c7c:	e008      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
            break;
 8006c7e:	bf00      	nop
 8006c80:	e006      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
            break;
 8006c82:	bf00      	nop
 8006c84:	e004      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
            break;
 8006c86:	bf00      	nop
 8006c88:	e002      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
            break;
 8006c8a:	bf00      	nop
 8006c8c:	e000      	b.n	8006c90 <USBH_MSC_Process+0x4ec>
            break;
 8006c8e:	bf00      	nop
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2204      	movs	r2, #4
 8006c94:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f008 fe42 	bl	800f930 <osMessageQueuePut>
      break;
 8006cac:	e01e      	b.n	8006cec <USBH_MSC_Process+0x548>
        MSC_Handle->current_lun = 0U;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_IDLE;
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	2201      	movs	r2, #1
 8006cba:	731a      	strb	r2, [r3, #12]
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2204      	movs	r2, #4
 8006cc0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f008 fe2c 	bl	800f930 <osMessageQueuePut>
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8006cde:	2102      	movs	r1, #2
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
      break;
 8006ce4:	e002      	b.n	8006cec <USBH_MSC_Process+0x548>
      error = USBH_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8006cea:	bf00      	nop
  }
  return error;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	370c      	adds	r7, #12
 8006d06:	46bd      	mov	sp, r7
 8006d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0c:	4770      	bx	lr

08006d0e <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b088      	sub	sp, #32
 8006d12:	af02      	add	r7, sp, #8
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8006d24:	2301      	movs	r3, #1
 8006d26:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	693a      	ldr	r2, [r7, #16]
 8006d30:	2134      	movs	r1, #52	@ 0x34
 8006d32:	fb01 f303 	mul.w	r3, r1, r3
 8006d36:	4413      	add	r3, r2
 8006d38:	3390      	adds	r3, #144	@ 0x90
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b07      	cmp	r3, #7
 8006d3e:	d04b      	beq.n	8006dd8 <USBH_MSC_RdWrProcess+0xca>
 8006d40:	2b07      	cmp	r3, #7
 8006d42:	f300 80d2 	bgt.w	8006eea <USBH_MSC_RdWrProcess+0x1dc>
 8006d46:	2b05      	cmp	r3, #5
 8006d48:	f000 8089 	beq.w	8006e5e <USBH_MSC_RdWrProcess+0x150>
 8006d4c:	2b06      	cmp	r3, #6
 8006d4e:	f040 80cc 	bne.w	8006eea <USBH_MSC_RdWrProcess+0x1dc>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006d52:	78f9      	ldrb	r1, [r7, #3]
 8006d54:	2300      	movs	r3, #0
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	6878      	ldr	r0, [r7, #4]
 8006d5e:	f000 ff53 	bl	8007c08 <USBH_MSC_SCSI_Read>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10b      	bne.n	8006d84 <USBH_MSC_RdWrProcess+0x76>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006d6c:	78fb      	ldrb	r3, [r7, #3]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	2134      	movs	r1, #52	@ 0x34
 8006d72:	fb01 f303 	mul.w	r3, r1, r3
 8006d76:	4413      	add	r3, r2
 8006d78:	3390      	adds	r3, #144	@ 0x90
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
 8006d82:	e01a      	b.n	8006dba <USBH_MSC_RdWrProcess+0xac>
      }
      else if (scsi_status == USBH_FAIL)
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d109      	bne.n	8006d9e <USBH_MSC_RdWrProcess+0x90>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006d8a:	78fb      	ldrb	r3, [r7, #3]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	2134      	movs	r1, #52	@ 0x34
 8006d90:	fb01 f303 	mul.w	r3, r1, r3
 8006d94:	4413      	add	r3, r2
 8006d96:	3390      	adds	r3, #144	@ 0x90
 8006d98:	2205      	movs	r2, #5
 8006d9a:	701a      	strb	r2, [r3, #0]
 8006d9c:	e00d      	b.n	8006dba <USBH_MSC_RdWrProcess+0xac>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006d9e:	7bfb      	ldrb	r3, [r7, #15]
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d10a      	bne.n	8006dba <USBH_MSC_RdWrProcess+0xac>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006da4:	78fb      	ldrb	r3, [r7, #3]
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	2134      	movs	r1, #52	@ 0x34
 8006daa:	fb01 f303 	mul.w	r3, r1, r3
 8006dae:	4413      	add	r3, r2
 8006db0:	3390      	adds	r3, #144	@ 0x90
 8006db2:	2208      	movs	r2, #8
 8006db4:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006db6:	2302      	movs	r3, #2
 8006db8:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f008 fdad 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 8006dd6:	e089      	b.n	8006eec <USBH_MSC_RdWrProcess+0x1de>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8006dd8:	78f9      	ldrb	r1, [r7, #3]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	2300      	movs	r3, #0
 8006de0:	2200      	movs	r2, #0
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 fea5 	bl	8007b32 <USBH_MSC_SCSI_Write>
 8006de8:	4603      	mov	r3, r0
 8006dea:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006dec:	7bfb      	ldrb	r3, [r7, #15]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <USBH_MSC_RdWrProcess+0xfc>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006df2:	78fb      	ldrb	r3, [r7, #3]
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	2134      	movs	r1, #52	@ 0x34
 8006df8:	fb01 f303 	mul.w	r3, r1, r3
 8006dfc:	4413      	add	r3, r2
 8006dfe:	3390      	adds	r3, #144	@ 0x90
 8006e00:	2201      	movs	r2, #1
 8006e02:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006e04:	2300      	movs	r3, #0
 8006e06:	75fb      	strb	r3, [r7, #23]
 8006e08:	e01a      	b.n	8006e40 <USBH_MSC_RdWrProcess+0x132>
      }
      else if (scsi_status == USBH_FAIL)
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d109      	bne.n	8006e24 <USBH_MSC_RdWrProcess+0x116>
      {
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	693a      	ldr	r2, [r7, #16]
 8006e14:	2134      	movs	r1, #52	@ 0x34
 8006e16:	fb01 f303 	mul.w	r3, r1, r3
 8006e1a:	4413      	add	r3, r2
 8006e1c:	3390      	adds	r3, #144	@ 0x90
 8006e1e:	2205      	movs	r2, #5
 8006e20:	701a      	strb	r2, [r3, #0]
 8006e22:	e00d      	b.n	8006e40 <USBH_MSC_RdWrProcess+0x132>
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b04      	cmp	r3, #4
 8006e28:	d10a      	bne.n	8006e40 <USBH_MSC_RdWrProcess+0x132>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006e2a:	78fb      	ldrb	r3, [r7, #3]
 8006e2c:	693a      	ldr	r2, [r7, #16]
 8006e2e:	2134      	movs	r1, #52	@ 0x34
 8006e30:	fb01 f303 	mul.w	r3, r1, r3
 8006e34:	4413      	add	r3, r2
 8006e36:	3390      	adds	r3, #144	@ 0x90
 8006e38:	2208      	movs	r2, #8
 8006e3a:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2204      	movs	r2, #4
 8006e44:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006e54:	2300      	movs	r3, #0
 8006e56:	2200      	movs	r2, #0
 8006e58:	f008 fd6a 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 8006e5c:	e046      	b.n	8006eec <USBH_MSC_RdWrProcess+0x1de>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8006e5e:	78fb      	ldrb	r3, [r7, #3]
 8006e60:	2234      	movs	r2, #52	@ 0x34
 8006e62:	fb02 f303 	mul.w	r3, r2, r3
 8006e66:	3398      	adds	r3, #152	@ 0x98
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	4413      	add	r3, r2
 8006e6c:	1d1a      	adds	r2, r3, #4
 8006e6e:	78fb      	ldrb	r3, [r7, #3]
 8006e70:	4619      	mov	r1, r3
 8006e72:	6878      	ldr	r0, [r7, #4]
 8006e74:	f000 fde4 	bl	8007a40 <USBH_MSC_SCSI_RequestSense>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d113      	bne.n	8006eaa <USBH_MSC_RdWrProcess+0x19c>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006e82:	78fb      	ldrb	r3, [r7, #3]
 8006e84:	693a      	ldr	r2, [r7, #16]
 8006e86:	2134      	movs	r1, #52	@ 0x34
 8006e88:	fb01 f303 	mul.w	r3, r1, r3
 8006e8c:	4413      	add	r3, r2
 8006e8e:	3390      	adds	r3, #144	@ 0x90
 8006e90:	2201      	movs	r2, #1
 8006e92:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006e94:	78fb      	ldrb	r3, [r7, #3]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	2134      	movs	r1, #52	@ 0x34
 8006e9a:	fb01 f303 	mul.w	r3, r1, r3
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3391      	adds	r3, #145	@ 0x91
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	2b02      	cmp	r3, #2
 8006eae:	d00d      	beq.n	8006ecc <USBH_MSC_RdWrProcess+0x1be>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b04      	cmp	r3, #4
 8006eb4:	d10a      	bne.n	8006ecc <USBH_MSC_RdWrProcess+0x1be>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	693a      	ldr	r2, [r7, #16]
 8006eba:	2134      	movs	r1, #52	@ 0x34
 8006ebc:	fb01 f303 	mul.w	r3, r1, r3
 8006ec0:	4413      	add	r3, r2
 8006ec2:	3390      	adds	r3, #144	@ 0x90
 8006ec4:	2208      	movs	r2, #8
 8006ec6:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006ec8:	2302      	movs	r3, #2
 8006eca:	75fb      	strb	r3, [r7, #23]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2204      	movs	r2, #4
 8006ed0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f008 fd24 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 8006ee8:	e000      	b.n	8006eec <USBH_MSC_RdWrProcess+0x1de>

    default:
      break;
 8006eea:	bf00      	nop

  }
  return error;
 8006eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}

08006ef6 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006ef6:	b480      	push	{r7}
 8006ef8:	b085      	sub	sp, #20
 8006efa:	af00      	add	r7, sp, #0
 8006efc:	6078      	str	r0, [r7, #4]
 8006efe:	460b      	mov	r3, r1
 8006f00:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f08:	69db      	ldr	r3, [r3, #28]
 8006f0a:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b0b      	cmp	r3, #11
 8006f14:	d10c      	bne.n	8006f30 <USBH_MSC_UnitIsReady+0x3a>
 8006f16:	78fb      	ldrb	r3, [r7, #3]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	2134      	movs	r1, #52	@ 0x34
 8006f1c:	fb01 f303 	mul.w	r3, r1, r3
 8006f20:	4413      	add	r3, r2
 8006f22:	3391      	adds	r3, #145	@ 0x91
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d102      	bne.n	8006f30 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	73fb      	strb	r3, [r7, #15]
 8006f2e:	e001      	b.n	8006f34 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b086      	sub	sp, #24
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	60f8      	str	r0, [r7, #12]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	607a      	str	r2, [r7, #4]
 8006f4e:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006f56:	69db      	ldr	r3, [r3, #28]
 8006f58:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b2db      	uxtb	r3, r3
 8006f60:	2b0b      	cmp	r3, #11
 8006f62:	d10d      	bne.n	8006f80 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2234      	movs	r2, #52	@ 0x34
 8006f68:	fb02 f303 	mul.w	r3, r2, r3
 8006f6c:	3390      	adds	r3, #144	@ 0x90
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4413      	add	r3, r2
 8006f72:	2234      	movs	r2, #52	@ 0x34
 8006f74:	4619      	mov	r1, r3
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f00c fa5c 	bl	8013434 <memcpy>
    return USBH_OK;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	e000      	b.n	8006f82 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006f80:	2302      	movs	r3, #2
  }
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3718      	adds	r7, #24
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b088      	sub	sp, #32
 8006f8e:	af02      	add	r7, sp, #8
 8006f90:	60f8      	str	r0, [r7, #12]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
 8006f96:	460b      	mov	r3, r1
 8006f98:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d00e      	beq.n	8006fce <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006fb6:	2b0b      	cmp	r3, #11
 8006fb8:	d109      	bne.n	8006fce <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006fba:	7afb      	ldrb	r3, [r7, #11]
 8006fbc:	697a      	ldr	r2, [r7, #20]
 8006fbe:	2134      	movs	r1, #52	@ 0x34
 8006fc0:	fb01 f303 	mul.w	r3, r1, r3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3390      	adds	r3, #144	@ 0x90
 8006fc8:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d001      	beq.n	8006fd2 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006fce:	2302      	movs	r3, #2
 8006fd0:	e040      	b.n	8007054 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	2206      	movs	r2, #6
 8006fd6:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006fd8:	7afb      	ldrb	r3, [r7, #11]
 8006fda:	697a      	ldr	r2, [r7, #20]
 8006fdc:	2134      	movs	r1, #52	@ 0x34
 8006fde:	fb01 f303 	mul.w	r3, r1, r3
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3390      	adds	r3, #144	@ 0x90
 8006fe6:	2206      	movs	r2, #6
 8006fe8:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006fea:	7afb      	ldrb	r3, [r7, #11]
 8006fec:	b29a      	uxth	r2, r3
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8006ff4:	7af9      	ldrb	r1, [r7, #11]
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fe02 	bl	8007c08 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800700a:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800700c:	e016      	b.n	800703c <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	1ad2      	subs	r2, r2, r3
 8007018:	6a3b      	ldr	r3, [r7, #32]
 800701a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800701e:	fb01 f303 	mul.w	r3, r1, r3
 8007022:	429a      	cmp	r2, r3
 8007024:	d805      	bhi.n	8007032 <USBH_MSC_Read+0xa8>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800702c:	b2db      	uxtb	r3, r3
 800702e:	2b00      	cmp	r3, #0
 8007030:	d104      	bne.n	800703c <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	2201      	movs	r2, #1
 8007036:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 8007038:	2302      	movs	r3, #2
 800703a:	e00b      	b.n	8007054 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800703c:	7afb      	ldrb	r3, [r7, #11]
 800703e:	4619      	mov	r1, r3
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff fe64 	bl	8006d0e <USBH_MSC_RdWrProcess>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d0e0      	beq.n	800700e <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	2201      	movs	r2, #1
 8007050:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3718      	adds	r7, #24
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}

0800705c <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b088      	sub	sp, #32
 8007060:	af02      	add	r7, sp, #8
 8007062:	60f8      	str	r0, [r7, #12]
 8007064:	607a      	str	r2, [r7, #4]
 8007066:	603b      	str	r3, [r7, #0]
 8007068:	460b      	mov	r3, r1
 800706a:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007072:	69db      	ldr	r3, [r3, #28]
 8007074:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00e      	beq.n	80070a0 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8007088:	2b0b      	cmp	r3, #11
 800708a:	d109      	bne.n	80070a0 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800708c:	7afb      	ldrb	r3, [r7, #11]
 800708e:	697a      	ldr	r2, [r7, #20]
 8007090:	2134      	movs	r1, #52	@ 0x34
 8007092:	fb01 f303 	mul.w	r3, r1, r3
 8007096:	4413      	add	r3, r2
 8007098:	3390      	adds	r3, #144	@ 0x90
 800709a:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 800709c:	2b01      	cmp	r3, #1
 800709e:	d001      	beq.n	80070a4 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80070a0:	2302      	movs	r3, #2
 80070a2:	e040      	b.n	8007126 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2207      	movs	r2, #7
 80070a8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	697a      	ldr	r2, [r7, #20]
 80070ae:	2134      	movs	r1, #52	@ 0x34
 80070b0:	fb01 f303 	mul.w	r3, r1, r3
 80070b4:	4413      	add	r3, r2
 80070b6:	3390      	adds	r3, #144	@ 0x90
 80070b8:	2207      	movs	r2, #7
 80070ba:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	b29a      	uxth	r2, r3
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80070c6:	7af9      	ldrb	r1, [r7, #11]
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	9300      	str	r3, [sp, #0]
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	68f8      	ldr	r0, [r7, #12]
 80070d2:	f000 fd2e 	bl	8007b32 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80070dc:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80070de:	e016      	b.n	800710e <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	@ 0x3c4
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	1ad2      	subs	r2, r2, r3
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	f242 7110 	movw	r1, #10000	@ 0x2710
 80070f0:	fb01 f303 	mul.w	r3, r1, r3
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d805      	bhi.n	8007104 <USBH_MSC_Write+0xa8>
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d104      	bne.n	800710e <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	2201      	movs	r2, #1
 8007108:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800710a:	2302      	movs	r3, #2
 800710c:	e00b      	b.n	8007126 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800710e:	7afb      	ldrb	r3, [r7, #11]
 8007110:	4619      	mov	r1, r3
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fdfb 	bl	8006d0e <USBH_MSC_RdWrProcess>
 8007118:	4603      	mov	r3, r0
 800711a:	2b01      	cmp	r3, #1
 800711c:	d0e0      	beq.n	80070e0 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	2201      	movs	r2, #1
 8007122:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b082      	sub	sp, #8
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2221      	movs	r2, #33	@ 0x21
 800713a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	22ff      	movs	r2, #255	@ 0xff
 8007140:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8007154:	2200      	movs	r2, #0
 8007156:	2100      	movs	r1, #0
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f002 f902 	bl	8009362 <USBH_CtlReq>
 800715e:	4603      	mov	r3, r0
}
 8007160:	4618      	mov	r0, r3
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}

08007168 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	22a1      	movs	r2, #161	@ 0xa1
 8007176:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	22fe      	movs	r2, #254	@ 0xfe
 800717c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8007190:	2201      	movs	r2, #1
 8007192:	6839      	ldr	r1, [r7, #0]
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f002 f8e4 	bl	8009362 <USBH_CtlReq>
 800719a:	4603      	mov	r3, r0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3708      	adds	r7, #8
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80071b2:	69db      	ldr	r3, [r3, #28]
 80071b4:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4a09      	ldr	r2, [pc, #36]	@ (80071e0 <USBH_MSC_BOT_Init+0x3c>)
 80071ba:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4a09      	ldr	r2, [pc, #36]	@ (80071e4 <USBH_MSC_BOT_Init+0x40>)
 80071c0:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2201      	movs	r2, #1
 80071c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	4618      	mov	r0, r3
 80071d6:	3714      	adds	r7, #20
 80071d8:	46bd      	mov	sp, r7
 80071da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071de:	4770      	bx	lr
 80071e0:	43425355 	.word	0x43425355
 80071e4:	20304050 	.word	0x20304050

080071e8 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b088      	sub	sp, #32
 80071ec:	af02      	add	r7, sp, #8
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80071f4:	2301      	movs	r3, #1
 80071f6:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80071f8:	2301      	movs	r3, #1
 80071fa:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80071fc:	2301      	movs	r3, #1
 80071fe:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007200:	2300      	movs	r3, #0
 8007202:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007218:	3b01      	subs	r3, #1
 800721a:	2b0a      	cmp	r3, #10
 800721c:	f200 822a 	bhi.w	8007674 <USBH_MSC_BOT_Process+0x48c>
 8007220:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <USBH_MSC_BOT_Process+0x40>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007255 	.word	0x08007255
 800722c:	0800727d 	.word	0x0800727d
 8007230:	0800733b 	.word	0x0800733b
 8007234:	08007359 	.word	0x08007359
 8007238:	08007415 	.word	0x08007415
 800723c:	08007437 	.word	0x08007437
 8007240:	08007523 	.word	0x08007523
 8007244:	0800753f 	.word	0x0800753f
 8007248:	080075c9 	.word	0x080075c9
 800724c:	080075f9 	.word	0x080075f9
 8007250:	0800765b 	.word	0x0800765b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800725c:	693b      	ldr	r3, [r7, #16]
 800725e:	2202      	movs	r2, #2
 8007260:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	795b      	ldrb	r3, [r3, #5]
 800726e:	2201      	movs	r2, #1
 8007270:	9200      	str	r2, [sp, #0]
 8007272:	221f      	movs	r2, #31
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f002 fb72 	bl	800995e <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800727a:	e20a      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	795b      	ldrb	r3, [r3, #5]
 8007280:	4619      	mov	r1, r3
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f00b fef6 	bl	8013074 <USBH_LL_GetURBState>
 8007288:	4603      	mov	r3, r0
 800728a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800728c:	7d3b      	ldrb	r3, [r7, #20]
 800728e:	2b01      	cmp	r3, #1
 8007290:	d126      	bne.n	80072e0 <USBH_MSC_BOT_Process+0xf8>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00f      	beq.n	80072ba <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80072a0:	b25b      	sxtb	r3, r3
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	da04      	bge.n	80072b0 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	2203      	movs	r2, #3
 80072aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80072ae:	e008      	b.n	80072c2 <USBH_MSC_BOT_Process+0xda>
          }
          else
          {
            /* Data Direction is OUT */
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	2205      	movs	r2, #5
 80072b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80072b8:	e003      	b.n	80072c2 <USBH_MSC_BOT_Process+0xda>
        }

        else
        {
          /* If there is NO Data Transfer Stage */
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2207      	movs	r2, #7
 80072be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2202      	movs	r2, #2
 80072c6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80072d6:	2300      	movs	r3, #0
 80072d8:	2200      	movs	r2, #0
 80072da:	f008 fb29 	bl	800f930 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80072de:	e1cb      	b.n	8007678 <USBH_MSC_BOT_Process+0x490>
      else if (URB_Status == USBH_URB_NOTREADY)
 80072e0:	7d3b      	ldrb	r3, [r7, #20]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d112      	bne.n	800730c <USBH_MSC_BOT_Process+0x124>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007302:	2300      	movs	r3, #0
 8007304:	2200      	movs	r2, #0
 8007306:	f008 fb13 	bl	800f930 <osMessageQueuePut>
      break;
 800730a:	e1b5      	b.n	8007678 <USBH_MSC_BOT_Process+0x490>
        if (URB_Status == USBH_URB_STALL)
 800730c:	7d3b      	ldrb	r3, [r7, #20]
 800730e:	2b05      	cmp	r3, #5
 8007310:	f040 81b2 	bne.w	8007678 <USBH_MSC_BOT_Process+0x490>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	220a      	movs	r2, #10
 8007318:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007330:	2300      	movs	r3, #0
 8007332:	2200      	movs	r2, #0
 8007334:	f008 fafc 	bl	800f930 <osMessageQueuePut>
      break;
 8007338:	e19e      	b.n	8007678 <USBH_MSC_BOT_Process+0x490>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	895a      	ldrh	r2, [r3, #10]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	791b      	ldrb	r3, [r3, #4]
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f002 fb2d 	bl	80099a8 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	2204      	movs	r2, #4
 8007352:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 8007356:	e19c      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	791b      	ldrb	r3, [r3, #4]
 800735c:	4619      	mov	r1, r3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f00b fe88 	bl	8013074 <USBH_LL_GetURBState>
 8007364:	4603      	mov	r3, r0
 8007366:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007368:	7d3b      	ldrb	r3, [r7, #20]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d13b      	bne.n	80073e6 <USBH_MSC_BOT_Process+0x1fe>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	8952      	ldrh	r2, [r2, #10]
 8007376:	4293      	cmp	r3, r2
 8007378:	d910      	bls.n	800739c <USBH_MSC_BOT_Process+0x1b4>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800737a:	693b      	ldr	r3, [r7, #16]
 800737c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	8952      	ldrh	r2, [r2, #10]
 8007384:	441a      	add	r2, r3
 8007386:	693b      	ldr	r3, [r7, #16]
 8007388:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800738c:	693b      	ldr	r3, [r7, #16]
 800738e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007390:	693a      	ldr	r2, [r7, #16]
 8007392:	8952      	ldrh	r2, [r2, #10]
 8007394:	1a9a      	subs	r2, r3, r2
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	65da      	str	r2, [r3, #92]	@ 0x5c
 800739a:	e002      	b.n	80073a2 <USBH_MSC_BOT_Process+0x1ba>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800739c:	693b      	ldr	r3, [r7, #16]
 800739e:	2200      	movs	r2, #0
 80073a0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <USBH_MSC_BOT_Process+0x1d8>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	895a      	ldrh	r2, [r3, #10]
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	791b      	ldrb	r3, [r3, #4]
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f002 faf5 	bl	80099a8 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 80073be:	e15d      	b.n	800767c <USBH_MSC_BOT_Process+0x494>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80073c0:	693b      	ldr	r3, [r7, #16]
 80073c2:	2207      	movs	r2, #7
 80073c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80073dc:	2300      	movs	r3, #0
 80073de:	2200      	movs	r2, #0
 80073e0:	f008 faa6 	bl	800f930 <osMessageQueuePut>
      break;
 80073e4:	e14a      	b.n	800767c <USBH_MSC_BOT_Process+0x494>
      else if (URB_Status == USBH_URB_STALL)
 80073e6:	7d3b      	ldrb	r3, [r7, #20]
 80073e8:	2b05      	cmp	r3, #5
 80073ea:	f040 8147 	bne.w	800767c <USBH_MSC_BOT_Process+0x494>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	2209      	movs	r2, #9
 80073f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2202      	movs	r2, #2
 80073fa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800740a:	2300      	movs	r3, #0
 800740c:	2200      	movs	r2, #0
 800740e:	f008 fa8f 	bl	800f930 <osMessageQueuePut>
      break;
 8007412:	e133      	b.n	800767c <USBH_MSC_BOT_Process+0x494>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	891a      	ldrh	r2, [r3, #8]
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	795b      	ldrb	r3, [r3, #5]
 8007422:	2001      	movs	r0, #1
 8007424:	9000      	str	r0, [sp, #0]
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f002 fa99 	bl	800995e <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	2206      	movs	r2, #6
 8007430:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007434:	e12d      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	795b      	ldrb	r3, [r3, #5]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f00b fe19 	bl	8013074 <USBH_LL_GetURBState>
 8007442:	4603      	mov	r3, r0
 8007444:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8007446:	7d3b      	ldrb	r3, [r7, #20]
 8007448:	2b01      	cmp	r3, #1
 800744a:	d13d      	bne.n	80074c8 <USBH_MSC_BOT_Process+0x2e0>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007450:	693a      	ldr	r2, [r7, #16]
 8007452:	8912      	ldrh	r2, [r2, #8]
 8007454:	4293      	cmp	r3, r2
 8007456:	d910      	bls.n	800747a <USBH_MSC_BOT_Process+0x292>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800745e:	693a      	ldr	r2, [r7, #16]
 8007460:	8912      	ldrh	r2, [r2, #8]
 8007462:	441a      	add	r2, r3
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	8912      	ldrh	r2, [r2, #8]
 8007472:	1a9a      	subs	r2, r3, r2
 8007474:	693b      	ldr	r3, [r7, #16]
 8007476:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007478:	e002      	b.n	8007480 <USBH_MSC_BOT_Process+0x298>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	2200      	movs	r2, #0
 800747e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00c      	beq.n	80074a2 <USBH_MSC_BOT_Process+0x2ba>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	891a      	ldrh	r2, [r3, #8]
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	795b      	ldrb	r3, [r3, #5]
 8007496:	2001      	movs	r0, #1
 8007498:	9000      	str	r0, [sp, #0]
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f002 fa5f 	bl	800995e <USBH_BulkSendData>
 80074a0:	e003      	b.n	80074aa <USBH_MSC_BOT_Process+0x2c2>
                                  MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);
        }
        else
        {
          /* If value was 0, and successful transfer, then change the state */
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2207      	movs	r2, #7
 80074a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2202      	movs	r2, #2
 80074ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80074be:	2300      	movs	r3, #0
 80074c0:	2200      	movs	r2, #0
 80074c2:	f008 fa35 	bl	800f930 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 80074c6:	e0db      	b.n	8007680 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_NOTREADY)
 80074c8:	7d3b      	ldrb	r3, [r7, #20]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d112      	bne.n	80074f4 <USBH_MSC_BOT_Process+0x30c>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	2205      	movs	r2, #5
 80074d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2202      	movs	r2, #2
 80074da:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80074ea:	2300      	movs	r3, #0
 80074ec:	2200      	movs	r2, #0
 80074ee:	f008 fa1f 	bl	800f930 <osMessageQueuePut>
      break;
 80074f2:	e0c5      	b.n	8007680 <USBH_MSC_BOT_Process+0x498>
      else if (URB_Status == USBH_URB_STALL)
 80074f4:	7d3b      	ldrb	r3, [r7, #20]
 80074f6:	2b05      	cmp	r3, #5
 80074f8:	f040 80c2 	bne.w	8007680 <USBH_MSC_BOT_Process+0x498>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	220a      	movs	r2, #10
 8007500:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2202      	movs	r2, #2
 8007508:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007518:	2300      	movs	r3, #0
 800751a:	2200      	movs	r2, #0
 800751c:	f008 fa08 	bl	800f930 <osMessageQueuePut>
      break;
 8007520:	e0ae      	b.n	8007680 <USBH_MSC_BOT_Process+0x498>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8007522:	693b      	ldr	r3, [r7, #16]
 8007524:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	791b      	ldrb	r3, [r3, #4]
 800752c:	220d      	movs	r2, #13
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f002 fa3a 	bl	80099a8 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	2208      	movs	r2, #8
 8007538:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800753c:	e0a9      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	791b      	ldrb	r3, [r3, #4]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f00b fd95 	bl	8013074 <USBH_LL_GetURBState>
 800754a:	4603      	mov	r3, r0
 800754c:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800754e:	7d3b      	ldrb	r3, [r7, #20]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d123      	bne.n	800759c <USBH_MSC_BOT_Process+0x3b4>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007554:	693b      	ldr	r3, [r7, #16]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 f8c5 	bl	80076f4 <USBH_MSC_DecodeCSW>
 800756a:	4603      	mov	r3, r0
 800756c:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800756e:	7d7b      	ldrb	r3, [r7, #21]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d102      	bne.n	800757a <USBH_MSC_BOT_Process+0x392>
        {
          status = USBH_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	75fb      	strb	r3, [r7, #23]
 8007578:	e001      	b.n	800757e <USBH_MSC_BOT_Process+0x396>
        }
        else
        {
          status = USBH_FAIL;
 800757a:	2302      	movs	r3, #2
 800757c:	75fb      	strb	r3, [r7, #23]
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2202      	movs	r2, #2
 8007582:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8007592:	2300      	movs	r3, #0
 8007594:	2200      	movs	r2, #0
 8007596:	f008 f9cb 	bl	800f930 <osMessageQueuePut>
#endif
      }
      else
      {
      }
      break;
 800759a:	e073      	b.n	8007684 <USBH_MSC_BOT_Process+0x49c>
      else if (URB_Status == USBH_URB_STALL)
 800759c:	7d3b      	ldrb	r3, [r7, #20]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d170      	bne.n	8007684 <USBH_MSC_BOT_Process+0x49c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	2209      	movs	r2, #9
 80075a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        phost->os_msg = (uint32_t)USBH_URB_EVENT;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2202      	movs	r2, #2
 80075ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80075be:	2300      	movs	r3, #0
 80075c0:	2200      	movs	r2, #0
 80075c2:	f008 f9b5 	bl	800f930 <osMessageQueuePut>
      break;
 80075c6:	e05d      	b.n	8007684 <USBH_MSC_BOT_Process+0x49c>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80075c8:	78fb      	ldrb	r3, [r7, #3]
 80075ca:	2200      	movs	r2, #0
 80075cc:	4619      	mov	r1, r3
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f864 	bl	800769c <USBH_MSC_BOT_Abort>
 80075d4:	4603      	mov	r3, r0
 80075d6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80075d8:	7dbb      	ldrb	r3, [r7, #22]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d104      	bne.n	80075e8 <USBH_MSC_BOT_Process+0x400>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80075de:	693b      	ldr	r3, [r7, #16]
 80075e0:	2207      	movs	r2, #7
 80075e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80075e6:	e04f      	b.n	8007688 <USBH_MSC_BOT_Process+0x4a0>
      else if (error == USBH_UNRECOVERED_ERROR)
 80075e8:	7dbb      	ldrb	r3, [r7, #22]
 80075ea:	2b04      	cmp	r3, #4
 80075ec:	d14c      	bne.n	8007688 <USBH_MSC_BOT_Process+0x4a0>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	220b      	movs	r2, #11
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80075f6:	e047      	b.n	8007688 <USBH_MSC_BOT_Process+0x4a0>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80075f8:	78fb      	ldrb	r3, [r7, #3]
 80075fa:	2201      	movs	r2, #1
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f84c 	bl	800769c <USBH_MSC_BOT_Abort>
 8007604:	4603      	mov	r3, r0
 8007606:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8007608:	7dbb      	ldrb	r3, [r7, #22]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d11d      	bne.n	800764a <USBH_MSC_BOT_Process+0x462>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	795b      	ldrb	r3, [r3, #5]
 8007612:	4619      	mov	r1, r3
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f00b fd81 	bl	801311c <USBH_LL_GetToggle>
 800761a:	4603      	mov	r3, r0
 800761c:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	7959      	ldrb	r1, [r3, #5]
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	f1c3 0301 	rsb	r3, r3, #1
 8007628:	b2db      	uxtb	r3, r3
 800762a:	461a      	mov	r2, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f00b fd42 	bl	80130b6 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f00b fd3b 	bl	80130b6 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	2209      	movs	r2, #9
 8007644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8007648:	e020      	b.n	800768c <USBH_MSC_BOT_Process+0x4a4>
        if (error == USBH_UNRECOVERED_ERROR)
 800764a:	7dbb      	ldrb	r3, [r7, #22]
 800764c:	2b04      	cmp	r3, #4
 800764e:	d11d      	bne.n	800768c <USBH_MSC_BOT_Process+0x4a4>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	220b      	movs	r2, #11
 8007654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8007658:	e018      	b.n	800768c <USBH_MSC_BOT_Process+0x4a4>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f7ff fd67 	bl	800712e <USBH_MSC_BOT_REQ_Reset>
 8007660:	4603      	mov	r3, r0
 8007662:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007664:	7dfb      	ldrb	r3, [r7, #23]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d112      	bne.n	8007690 <USBH_MSC_BOT_Process+0x4a8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8007672:	e00d      	b.n	8007690 <USBH_MSC_BOT_Process+0x4a8>

    default:
      break;
 8007674:	bf00      	nop
 8007676:	e00c      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8007678:	bf00      	nop
 800767a:	e00a      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800767c:	bf00      	nop
 800767e:	e008      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8007680:	bf00      	nop
 8007682:	e006      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8007684:	bf00      	nop
 8007686:	e004      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8007688:	bf00      	nop
 800768a:	e002      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 800768c:	bf00      	nop
 800768e:	e000      	b.n	8007692 <USBH_MSC_BOT_Process+0x4aa>
      break;
 8007690:	bf00      	nop
  }
  return status;
 8007692:	7dfb      	ldrb	r3, [r7, #23]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3718      	adds	r7, #24
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}

0800769c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
 80076a8:	4613      	mov	r3, r2
 80076aa:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 80076ac:	2302      	movs	r3, #2
 80076ae:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076b6:	69db      	ldr	r3, [r3, #28]
 80076b8:	60bb      	str	r3, [r7, #8]

  switch (dir)
 80076ba:	78bb      	ldrb	r3, [r7, #2]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d002      	beq.n	80076c6 <USBH_MSC_BOT_Abort+0x2a>
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d009      	beq.n	80076d8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80076c4:	e011      	b.n	80076ea <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	79db      	ldrb	r3, [r3, #7]
 80076ca:	4619      	mov	r1, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f001 fb13 	bl	8008cf8 <USBH_ClrFeature>
 80076d2:	4603      	mov	r3, r0
 80076d4:	73fb      	strb	r3, [r7, #15]
      break;
 80076d6:	e008      	b.n	80076ea <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	799b      	ldrb	r3, [r3, #6]
 80076dc:	4619      	mov	r1, r3
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	f001 fb0a 	bl	8008cf8 <USBH_ClrFeature>
 80076e4:	4603      	mov	r3, r0
 80076e6:	73fb      	strb	r3, [r7, #15]
      break;
 80076e8:	bf00      	nop
  }
  return status;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3710      	adds	r7, #16
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b084      	sub	sp, #16
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8007706:	2301      	movs	r3, #1
 8007708:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	791b      	ldrb	r3, [r3, #4]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f00b fc1d 	bl	8012f50 <USBH_LL_GetLastXferSize>
 8007716:	4603      	mov	r3, r0
 8007718:	2b0d      	cmp	r3, #13
 800771a:	d002      	beq.n	8007722 <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 800771c:	2302      	movs	r3, #2
 800771e:	73fb      	strb	r3, [r7, #15]
 8007720:	e024      	b.n	800776c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007726:	4a14      	ldr	r2, [pc, #80]	@ (8007778 <USBH_MSC_DecodeCSW+0x84>)
 8007728:	4293      	cmp	r3, r2
 800772a:	d11d      	bne.n	8007768 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007734:	429a      	cmp	r2, r3
 8007736:	d119      	bne.n	800776c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
 8007746:	e011      	b.n	800776c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800774e:	2b01      	cmp	r3, #1
 8007750:	d102      	bne.n	8007758 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8007752:	2301      	movs	r3, #1
 8007754:	73fb      	strb	r3, [r7, #15]
 8007756:	e009      	b.n	800776c <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800775e:	2b02      	cmp	r3, #2
 8007760:	d104      	bne.n	800776c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8007762:	2302      	movs	r3, #2
 8007764:	73fb      	strb	r3, [r7, #15]
 8007766:	e001      	b.n	800776c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8007768:	2302      	movs	r3, #2
 800776a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800776c:	7bfb      	ldrb	r3, [r7, #15]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	53425355 	.word	0x53425355

0800777c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b084      	sub	sp, #16
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	460b      	mov	r3, r1
 8007786:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007788:	2302      	movs	r3, #2
 800778a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007792:	69db      	ldr	r3, [r3, #28]
 8007794:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800779c:	2b01      	cmp	r3, #1
 800779e:	d002      	beq.n	80077a6 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d021      	beq.n	80077e8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80077a4:	e028      	b.n	80077f8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	2200      	movs	r2, #0
 80077aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	220a      	movs	r2, #10
 80077b8:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	3363      	adds	r3, #99	@ 0x63
 80077c0:	2210      	movs	r2, #16
 80077c2:	2100      	movs	r1, #0
 80077c4:	4618      	mov	r0, r3
 80077c6:	f00b fdf1 	bl	80133ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	2201      	movs	r2, #1
 80077d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80077da:	68bb      	ldr	r3, [r7, #8]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 80077e2:	2301      	movs	r3, #1
 80077e4:	73fb      	strb	r3, [r7, #15]
      break;
 80077e6:	e007      	b.n	80077f8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	4619      	mov	r1, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f7ff fcfb 	bl	80071e8 <USBH_MSC_BOT_Process>
 80077f2:	4603      	mov	r3, r0
 80077f4:	73fb      	strb	r3, [r7, #15]
      break;
 80077f6:	bf00      	nop
  }

  return error;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b086      	sub	sp, #24
 8007806:	af00      	add	r7, sp, #0
 8007808:	60f8      	str	r0, [r7, #12]
 800780a:	460b      	mov	r3, r1
 800780c:	607a      	str	r2, [r7, #4]
 800780e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY;
 8007810:	2301      	movs	r3, #1
 8007812:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800781a:	69db      	ldr	r3, [r3, #28]
 800781c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007824:	2b01      	cmp	r3, #1
 8007826:	d002      	beq.n	800782e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8007828:	2b02      	cmp	r3, #2
 800782a:	d027      	beq.n	800787c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800782c:	e05e      	b.n	80078ec <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	2208      	movs	r2, #8
 8007832:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	2280      	movs	r2, #128	@ 0x80
 8007838:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	220a      	movs	r2, #10
 8007840:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	3363      	adds	r3, #99	@ 0x63
 8007848:	2210      	movs	r2, #16
 800784a:	2100      	movs	r1, #0
 800784c:	4618      	mov	r0, r3
 800784e:	f00b fdad 	bl	80133ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	2225      	movs	r2, #37	@ 0x25
 8007856:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	2201      	movs	r2, #1
 800785e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	2202      	movs	r2, #2
 8007866:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800786a:	693b      	ldr	r3, [r7, #16]
 800786c:	f103 0210 	add.w	r2, r3, #16
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
      break;
 800787a:	e037      	b.n	80078ec <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800787c:	7afb      	ldrb	r3, [r7, #11]
 800787e:	4619      	mov	r1, r3
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fcb1 	bl	80071e8 <USBH_MSC_BOT_Process>
 8007886:	4603      	mov	r3, r0
 8007888:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800788a:	7dfb      	ldrb	r3, [r7, #23]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d12c      	bne.n	80078ea <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007896:	3303      	adds	r3, #3
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	461a      	mov	r2, r3
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078a2:	3302      	adds	r3, #2
 80078a4:	781b      	ldrb	r3, [r3, #0]
 80078a6:	021b      	lsls	r3, r3, #8
 80078a8:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078b0:	3301      	adds	r3, #1
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80078b6:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	061b      	lsls	r3, r3, #24
 80078c2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078ce:	3307      	adds	r3, #7
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	461a      	mov	r2, r3
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80078da:	3306      	adds	r3, #6
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	021b      	lsls	r3, r3, #8
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	4313      	orrs	r3, r2
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	809a      	strh	r2, [r3, #4]
      break;
 80078ea:	bf00      	nop
  }

  return error;
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3718      	adds	r7, #24
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b086      	sub	sp, #24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	460b      	mov	r3, r1
 8007900:	607a      	str	r2, [r7, #4]
 8007902:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8007904:	2302      	movs	r3, #2
 8007906:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800790e:	69db      	ldr	r3, [r3, #28]
 8007910:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007918:	2b01      	cmp	r3, #1
 800791a:	d002      	beq.n	8007922 <USBH_MSC_SCSI_Inquiry+0x2c>
 800791c:	2b02      	cmp	r3, #2
 800791e:	d03d      	beq.n	800799c <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8007920:	e089      	b.n	8007a36 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	2224      	movs	r2, #36	@ 0x24
 8007926:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007928:	693b      	ldr	r3, [r7, #16]
 800792a:	2280      	movs	r2, #128	@ 0x80
 800792c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	220a      	movs	r2, #10
 8007934:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	3363      	adds	r3, #99	@ 0x63
 800793c:	220a      	movs	r2, #10
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f00b fd33 	bl	80133ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8007946:	693b      	ldr	r3, [r7, #16]
 8007948:	2212      	movs	r2, #18
 800794a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	015b      	lsls	r3, r3, #5
 8007952:	b2da      	uxtb	r2, r3
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	2224      	movs	r2, #36	@ 0x24
 800796e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	2200      	movs	r2, #0
 8007976:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	2201      	movs	r2, #1
 800797e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	2202      	movs	r2, #2
 8007986:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800798a:	693b      	ldr	r3, [r7, #16]
 800798c:	f103 0210 	add.w	r2, r3, #16
 8007990:	693b      	ldr	r3, [r7, #16]
 8007992:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007996:	2301      	movs	r3, #1
 8007998:	75fb      	strb	r3, [r7, #23]
      break;
 800799a:	e04c      	b.n	8007a36 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800799c:	7afb      	ldrb	r3, [r7, #11]
 800799e:	4619      	mov	r1, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fc21 	bl	80071e8 <USBH_MSC_BOT_Process>
 80079a6:	4603      	mov	r3, r0
 80079a8:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d141      	bne.n	8007a34 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80079b0:	2222      	movs	r2, #34	@ 0x22
 80079b2:	2100      	movs	r1, #0
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f00b fcf9 	bl	80133ac <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	095b      	lsrs	r3, r3, #5
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079e2:	3301      	adds	r3, #1
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	b25b      	sxtb	r3, r3
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	da03      	bge.n	80079f4 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	2201      	movs	r2, #1
 80079f0:	709a      	strb	r2, [r3, #2]
 80079f2:	e002      	b.n	80079fa <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2200      	movs	r2, #0
 80079f8:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	1cd8      	adds	r0, r3, #3
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a04:	3308      	adds	r3, #8
 8007a06:	2208      	movs	r2, #8
 8007a08:	4619      	mov	r1, r3
 8007a0a:	f00b fd13 	bl	8013434 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f103 000c 	add.w	r0, r3, #12
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a1a:	3310      	adds	r3, #16
 8007a1c:	2210      	movs	r2, #16
 8007a1e:	4619      	mov	r1, r3
 8007a20:	f00b fd08 	bl	8013434 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	331d      	adds	r3, #29
 8007a28:	693a      	ldr	r2, [r7, #16]
 8007a2a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 8007a2e:	3220      	adds	r2, #32
 8007a30:	6812      	ldr	r2, [r2, #0]
 8007a32:	601a      	str	r2, [r3, #0]
      break;
 8007a34:	bf00      	nop
  }

  return error;
 8007a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3718      	adds	r7, #24
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	60f8      	str	r0, [r7, #12]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	607a      	str	r2, [r7, #4]
 8007a4c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007a4e:	2302      	movs	r3, #2
 8007a50:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a58:	69db      	ldr	r3, [r3, #28]
 8007a5a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d002      	beq.n	8007a6c <USBH_MSC_SCSI_RequestSense+0x2c>
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d03d      	beq.n	8007ae6 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007a6a:	e05d      	b.n	8007b28 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007a6c:	693b      	ldr	r3, [r7, #16]
 8007a6e:	220e      	movs	r2, #14
 8007a70:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	2280      	movs	r2, #128	@ 0x80
 8007a76:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	220a      	movs	r2, #10
 8007a7e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	3363      	adds	r3, #99	@ 0x63
 8007a86:	2210      	movs	r2, #16
 8007a88:	2100      	movs	r1, #0
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f00b fc8e 	bl	80133ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2203      	movs	r2, #3
 8007a94:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007a98:	7afb      	ldrb	r3, [r7, #11]
 8007a9a:	015b      	lsls	r3, r3, #5
 8007a9c:	b2da      	uxtb	r2, r3
 8007a9e:	693b      	ldr	r3, [r7, #16]
 8007aa0:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	220e      	movs	r2, #14
 8007ab8:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007abc:	693b      	ldr	r3, [r7, #16]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ac4:	693b      	ldr	r3, [r7, #16]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	f103 0210 	add.w	r2, r3, #16
 8007ada:	693b      	ldr	r3, [r7, #16]
 8007adc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ae4:	e020      	b.n	8007b28 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007ae6:	7afb      	ldrb	r3, [r7, #11]
 8007ae8:	4619      	mov	r1, r3
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f7ff fb7c 	bl	80071e8 <USBH_MSC_BOT_Process>
 8007af0:	4603      	mov	r3, r0
 8007af2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007af4:	7dfb      	ldrb	r3, [r7, #23]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d115      	bne.n	8007b26 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b00:	3302      	adds	r3, #2
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	f003 030f 	and.w	r3, r3, #15
 8007b08:	b2da      	uxtb	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b14:	7b1a      	ldrb	r2, [r3, #12]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8007b1a:	693b      	ldr	r3, [r7, #16]
 8007b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b20:	7b5a      	ldrb	r2, [r3, #13]
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	709a      	strb	r2, [r3, #2]
      break;
 8007b26:	bf00      	nop
  }

  return error;
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	60f8      	str	r0, [r7, #12]
 8007b3a:	607a      	str	r2, [r7, #4]
 8007b3c:	603b      	str	r3, [r7, #0]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007b42:	2302      	movs	r3, #2
 8007b44:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d002      	beq.n	8007b60 <USBH_MSC_SCSI_Write+0x2e>
 8007b5a:	2b02      	cmp	r3, #2
 8007b5c:	d047      	beq.n	8007bee <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007b5e:	e04e      	b.n	8007bfe <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8007b66:	461a      	mov	r2, r3
 8007b68:	6a3b      	ldr	r3, [r7, #32]
 8007b6a:	fb03 f202 	mul.w	r2, r3, r2
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8007b72:	693b      	ldr	r3, [r7, #16]
 8007b74:	2200      	movs	r2, #0
 8007b76:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	220a      	movs	r2, #10
 8007b7e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	3363      	adds	r3, #99	@ 0x63
 8007b86:	2210      	movs	r2, #16
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f00b fc0e 	bl	80133ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 8007b90:	693b      	ldr	r3, [r7, #16]
 8007b92:	222a      	movs	r2, #42	@ 0x2a
 8007b94:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007b98:	79fa      	ldrb	r2, [r7, #7]
 8007b9a:	693b      	ldr	r3, [r7, #16]
 8007b9c:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007ba0:	79ba      	ldrb	r2, [r7, #6]
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007ba8:	797a      	ldrb	r2, [r7, #5]
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007bb0:	1d3b      	adds	r3, r7, #4
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8007bba:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8007bc4:	f107 0320 	add.w	r3, r7, #32
 8007bc8:	781a      	ldrb	r2, [r3, #0]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007bd8:	693b      	ldr	r3, [r7, #16]
 8007bda:	2202      	movs	r2, #2
 8007bdc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	683a      	ldr	r2, [r7, #0]
 8007be4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007be8:	2301      	movs	r3, #1
 8007bea:	75fb      	strb	r3, [r7, #23]
      break;
 8007bec:	e007      	b.n	8007bfe <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007bee:	7afb      	ldrb	r3, [r7, #11]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f7ff faf8 	bl	80071e8 <USBH_MSC_BOT_Process>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	75fb      	strb	r3, [r7, #23]
      break;
 8007bfc:	bf00      	nop
  }

  return error;
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	3718      	adds	r7, #24
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	60f8      	str	r0, [r7, #12]
 8007c10:	607a      	str	r2, [r7, #4]
 8007c12:	603b      	str	r3, [r7, #0]
 8007c14:	460b      	mov	r3, r1
 8007c16:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL;
 8007c18:	2302      	movs	r3, #2
 8007c1a:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8007c26:	693b      	ldr	r3, [r7, #16]
 8007c28:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d002      	beq.n	8007c36 <USBH_MSC_SCSI_Read+0x2e>
 8007c30:	2b02      	cmp	r3, #2
 8007c32:	d047      	beq.n	8007cc4 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8007c34:	e04e      	b.n	8007cd4 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8007c36:	693b      	ldr	r3, [r7, #16]
 8007c38:	f8b3 3098 	ldrh.w	r3, [r3, #152]	@ 0x98
 8007c3c:	461a      	mov	r2, r3
 8007c3e:	6a3b      	ldr	r3, [r7, #32]
 8007c40:	fb03 f202 	mul.w	r2, r3, r2
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	2280      	movs	r2, #128	@ 0x80
 8007c4c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	220a      	movs	r2, #10
 8007c54:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	3363      	adds	r3, #99	@ 0x63
 8007c5c:	2210      	movs	r2, #16
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f00b fba3 	bl	80133ac <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	2228      	movs	r2, #40	@ 0x28
 8007c6a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007c6e:	79fa      	ldrb	r2, [r7, #7]
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007c76:	79ba      	ldrb	r2, [r7, #6]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007c7e:	797a      	ldrb	r2, [r7, #5]
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007c86:	1d3b      	adds	r3, r7, #4
 8007c88:	781a      	ldrb	r2, [r3, #0]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]);
 8007c90:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	f883 206a 	strb.w	r2, [r3, #106]	@ 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]);
 8007c9a:	f107 0320 	add.w	r3, r7, #32
 8007c9e:	781a      	ldrb	r2, [r3, #0]
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cc2:	e007      	b.n	8007cd4 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	4619      	mov	r1, r3
 8007cc8:	68f8      	ldr	r0, [r7, #12]
 8007cca:	f7ff fa8d 	bl	80071e8 <USBH_MSC_BOT_Process>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	75fb      	strb	r3, [r7, #23]
      break;
 8007cd2:	bf00      	nop
  }

  return error;
 8007cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
	...

08007ce0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b084      	sub	sp, #16
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	60f8      	str	r0, [r7, #12]
 8007ce8:	60b9      	str	r1, [r7, #8]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d101      	bne.n	8007cf8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007cf4:	2302      	movs	r3, #2
 8007cf6:	e045      	b.n	8007d84 <USBH_Init+0xa4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	79fa      	ldrb	r2, [r7, #7]
 8007cfc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f841 	bl	8007d98 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d003      	beq.n	8007d44 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	68ba      	ldr	r2, [r7, #8]
 8007d40:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);

#else

  /* Create USB Host Queue */
  phost->os_event = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(uint32_t), NULL);
 8007d44:	2200      	movs	r2, #0
 8007d46:	2104      	movs	r1, #4
 8007d48:	2010      	movs	r0, #16
 8007d4a:	f007 fd7d 	bl	800f848 <osMessageQueueNew>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
  USBH_Thread_Atrr.name = "USBH_Queue";
 8007d56:	4b0d      	ldr	r3, [pc, #52]	@ (8007d8c <USBH_Init+0xac>)
 8007d58:	4a0d      	ldr	r2, [pc, #52]	@ (8007d90 <USBH_Init+0xb0>)
 8007d5a:	601a      	str	r2, [r3, #0]

#if defined (USBH_PROCESS_STACK_SIZE)
  USBH_Thread_Atrr.stack_size = USBH_PROCESS_STACK_SIZE;
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	@ (8007d8c <USBH_Init+0xac>)
 8007d5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007d62:	615a      	str	r2, [r3, #20]
#else
  USBH_Thread_Atrr.stack_size = (8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  USBH_Thread_Atrr.priority = USBH_PROCESS_PRIO;
 8007d64:	4b09      	ldr	r3, [pc, #36]	@ (8007d8c <USBH_Init+0xac>)
 8007d66:	2218      	movs	r2, #24
 8007d68:	619a      	str	r2, [r3, #24]
  phost->thread = osThreadNew(USBH_Process_OS, phost, &USBH_Thread_Atrr);
 8007d6a:	4a08      	ldr	r2, [pc, #32]	@ (8007d8c <USBH_Init+0xac>)
 8007d6c:	68f9      	ldr	r1, [r7, #12]
 8007d6e:	4809      	ldr	r0, [pc, #36]	@ (8007d94 <USBH_Init+0xb4>)
 8007d70:	f007 fb94 	bl	800f49c <osThreadNew>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007d7c:	68f8      	ldr	r0, [r7, #12]
 8007d7e:	f00b f833 	bl	8012de8 <USBH_LL_Init>

  return USBH_OK;
 8007d82:	2300      	movs	r3, #0
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3710      	adds	r7, #16
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	bd80      	pop	{r7, pc}
 8007d8c:	200022d0 	.word	0x200022d0
 8007d90:	08014170 	.word	0x08014170
 8007d94:	08008a49 	.word	0x08008a49

08007d98 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007da0:	2300      	movs	r3, #0
 8007da2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007da4:	2300      	movs	r3, #0
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	e009      	b.n	8007dbe <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007daa:	687a      	ldr	r2, [r7, #4]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	33e0      	adds	r3, #224	@ 0xe0
 8007db0:	009b      	lsls	r3, r3, #2
 8007db2:	4413      	add	r3, r2
 8007db4:	2200      	movs	r2, #0
 8007db6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	3301      	adds	r3, #1
 8007dbc:	60fb      	str	r3, [r7, #12]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2b0f      	cmp	r3, #15
 8007dc2:	d9f2      	bls.n	8007daa <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	e009      	b.n	8007dde <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	3301      	adds	r3, #1
 8007ddc:	60fb      	str	r3, [r7, #12]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007de4:	d3f1      	bcc.n	8007dca <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2201      	movs	r2, #1
 8007e04:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2240      	movs	r2, #64	@ 0x40
 8007e0a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2200      	movs	r2, #0
 8007e26:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	331c      	adds	r3, #28
 8007e36:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f00b fab5 	bl	80133ac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007e48:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f00b faac 	bl	80133ac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007e5a:	2212      	movs	r2, #18
 8007e5c:	2100      	movs	r1, #0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f00b faa4 	bl	80133ac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007e6a:	223e      	movs	r2, #62	@ 0x3e
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f00b fa9c 	bl	80133ac <memset>

  return USBH_OK;
 8007e74:	2300      	movs	r3, #0
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007e7e:	b480      	push	{r7}
 8007e80:	b085      	sub	sp, #20
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d016      	beq.n	8007ec0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d10e      	bne.n	8007eba <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007ea2:	1c59      	adds	r1, r3, #1
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	33de      	adds	r3, #222	@ 0xde
 8007eae:	6839      	ldr	r1, [r7, #0]
 8007eb0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	73fb      	strb	r3, [r7, #15]
 8007eb8:	e004      	b.n	8007ec4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007eba:	2302      	movs	r3, #2
 8007ebc:	73fb      	strb	r3, [r7, #15]
 8007ebe:	e001      	b.n	8007ec4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b085      	sub	sp, #20
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007ee8:	78fa      	ldrb	r2, [r7, #3]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d204      	bcs.n	8007ef8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	78fa      	ldrb	r2, [r7, #3]
 8007ef2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007ef6:	e001      	b.n	8007efc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007ef8:	2302      	movs	r3, #2
 8007efa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr

08007f0a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007f0a:	b480      	push	{r7}
 8007f0c:	b087      	sub	sp, #28
 8007f0e:	af00      	add	r7, sp, #0
 8007f10:	6078      	str	r0, [r7, #4]
 8007f12:	4608      	mov	r0, r1
 8007f14:	4611      	mov	r1, r2
 8007f16:	461a      	mov	r2, r3
 8007f18:	4603      	mov	r3, r0
 8007f1a:	70fb      	strb	r3, [r7, #3]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70bb      	strb	r3, [r7, #2]
 8007f20:	4613      	mov	r3, r2
 8007f22:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007f24:	2300      	movs	r3, #0
 8007f26:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007f32:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f34:	e025      	b.n	8007f82 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007f36:	7dfb      	ldrb	r3, [r7, #23]
 8007f38:	221a      	movs	r2, #26
 8007f3a:	fb02 f303 	mul.w	r3, r2, r3
 8007f3e:	3308      	adds	r3, #8
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	4413      	add	r3, r2
 8007f44:	3302      	adds	r3, #2
 8007f46:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	795b      	ldrb	r3, [r3, #5]
 8007f4c:	78fa      	ldrb	r2, [r7, #3]
 8007f4e:	429a      	cmp	r2, r3
 8007f50:	d002      	beq.n	8007f58 <USBH_FindInterface+0x4e>
 8007f52:	78fb      	ldrb	r3, [r7, #3]
 8007f54:	2bff      	cmp	r3, #255	@ 0xff
 8007f56:	d111      	bne.n	8007f7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007f5c:	78ba      	ldrb	r2, [r7, #2]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d002      	beq.n	8007f68 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f62:	78bb      	ldrb	r3, [r7, #2]
 8007f64:	2bff      	cmp	r3, #255	@ 0xff
 8007f66:	d109      	bne.n	8007f7c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f68:	693b      	ldr	r3, [r7, #16]
 8007f6a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007f6c:	787a      	ldrb	r2, [r7, #1]
 8007f6e:	429a      	cmp	r2, r3
 8007f70:	d002      	beq.n	8007f78 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007f72:	787b      	ldrb	r3, [r7, #1]
 8007f74:	2bff      	cmp	r3, #255	@ 0xff
 8007f76:	d101      	bne.n	8007f7c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007f78:	7dfb      	ldrb	r3, [r7, #23]
 8007f7a:	e006      	b.n	8007f8a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007f7c:	7dfb      	ldrb	r3, [r7, #23]
 8007f7e:	3301      	adds	r3, #1
 8007f80:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007f82:	7dfb      	ldrb	r3, [r7, #23]
 8007f84:	2b01      	cmp	r3, #1
 8007f86:	d9d6      	bls.n	8007f36 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007f88:	23ff      	movs	r3, #255	@ 0xff
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007f96:	b580      	push	{r7, lr}
 8007f98:	b082      	sub	sp, #8
 8007f9a:	af00      	add	r7, sp, #0
 8007f9c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f00a ff5e 	bl	8012e60 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f00b f877 	bl	801309a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007fac:	2300      	movs	r3, #0
}
 8007fae:	4618      	mov	r0, r3
 8007fb0:	3708      	adds	r7, #8
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
	...

08007fb8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af04      	add	r7, sp, #16
 8007fbe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d102      	bne.n	8007fda <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2203      	movs	r2, #3
 8007fd8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b0b      	cmp	r3, #11
 8007fe2:	f200 8244 	bhi.w	800846e <USBH_Process+0x4b6>
 8007fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fec <USBH_Process+0x34>)
 8007fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fec:	0800801d 	.word	0x0800801d
 8007ff0:	0800806b 	.word	0x0800806b
 8007ff4:	080080ef 	.word	0x080080ef
 8007ff8:	080083ed 	.word	0x080083ed
 8007ffc:	0800846f 	.word	0x0800846f
 8008000:	080081ab 	.word	0x080081ab
 8008004:	08008377 	.word	0x08008377
 8008008:	080081fd 	.word	0x080081fd
 800800c:	08008239 	.word	0x08008239
 8008010:	08008271 	.word	0x08008271
 8008014:	080082cf 	.word	0x080082cf
 8008018:	080083d5 	.word	0x080083d5
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008022:	b2db      	uxtb	r3, r3
 8008024:	2b00      	cmp	r3, #0
 8008026:	f000 8224 	beq.w	8008472 <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2201      	movs	r2, #1
 800802e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008030:	20c8      	movs	r0, #200	@ 0xc8
 8008032:	f00b f8a6 	bl	8013182 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f00a ff6f 	bl	8012f1a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008060:	2300      	movs	r3, #0
 8008062:	2200      	movs	r2, #0
 8008064:	f007 fc64 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      }
      break;
 8008068:	e203      	b.n	8008472 <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008070:	2b01      	cmp	r3, #1
 8008072:	d107      	bne.n	8008084 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2200      	movs	r2, #0
 8008078:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2202      	movs	r2, #2
 8008080:	701a      	strb	r2, [r3, #0]
 8008082:	e025      	b.n	80080d0 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800808a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800808e:	d914      	bls.n	80080ba <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008096:	3301      	adds	r3, #1
 8008098:	b2da      	uxtb	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80080a6:	2b03      	cmp	r3, #3
 80080a8:	d903      	bls.n	80080b2 <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	220d      	movs	r2, #13
 80080ae:	701a      	strb	r2, [r3, #0]
 80080b0:	e00e      	b.n	80080d0 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2200      	movs	r2, #0
 80080b6:	701a      	strb	r2, [r3, #0]
 80080b8:	e00a      	b.n	80080d0 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80080c0:	f103 020a 	add.w	r2, r3, #10
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80080ca:	200a      	movs	r0, #10
 80080cc:	f00b f859 	bl	8013182 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80080e4:	2300      	movs	r3, #0
 80080e6:	2200      	movs	r2, #0
 80080e8:	f007 fc22 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 80080ec:	e1c8      	b.n	8008480 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d005      	beq.n	8008104 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080fe:	2104      	movs	r1, #4
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008104:	2064      	movs	r0, #100	@ 0x64
 8008106:	f00b f83c 	bl	8013182 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800810a:	6878      	ldr	r0, [r7, #4]
 800810c:	f00a fede 	bl	8012ecc <USBH_LL_GetSpeed>
 8008110:	4603      	mov	r3, r0
 8008112:	461a      	mov	r2, r3
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2205      	movs	r2, #5
 800811e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008120:	2100      	movs	r1, #0
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f001 fc8d 	bl	8009a42 <USBH_AllocPipe>
 8008128:	4603      	mov	r3, r0
 800812a:	461a      	mov	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008130:	2180      	movs	r1, #128	@ 0x80
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 fc85 	bl	8009a42 <USBH_AllocPipe>
 8008138:	4603      	mov	r3, r0
 800813a:	461a      	mov	r2, r3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7919      	ldrb	r1, [r3, #4]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008154:	9202      	str	r2, [sp, #8]
 8008156:	2200      	movs	r2, #0
 8008158:	9201      	str	r2, [sp, #4]
 800815a:	9300      	str	r3, [sp, #0]
 800815c:	4603      	mov	r3, r0
 800815e:	2280      	movs	r2, #128	@ 0x80
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 fc3f 	bl	80099e4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	7959      	ldrb	r1, [r3, #5]
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800817a:	9202      	str	r2, [sp, #8]
 800817c:	2200      	movs	r2, #0
 800817e:	9201      	str	r2, [sp, #4]
 8008180:	9300      	str	r3, [sp, #0]
 8008182:	4603      	mov	r3, r0
 8008184:	2200      	movs	r2, #0
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f001 fc2c 	bl	80099e4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80081a0:	2300      	movs	r3, #0
 80081a2:	2200      	movs	r2, #0
 80081a4:	f007 fbc4 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 80081a8:	e16a      	b.n	8008480 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f96e 	bl	800848c <USBH_HandleEnum>
 80081b0:	4603      	mov	r3, r0
 80081b2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80081b4:	7bbb      	ldrb	r3, [r7, #14]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f040 815c 	bne.w	8008476 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d103      	bne.n	80081d8 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2208      	movs	r2, #8
 80081d4:	701a      	strb	r2, [r3, #0]
 80081d6:	e002      	b.n	80081de <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2207      	movs	r2, #7
 80081dc:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2205      	movs	r2, #5
 80081e2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80081f2:	2300      	movs	r3, #0
 80081f4:	2200      	movs	r2, #0
 80081f6:	f007 fb9b 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      }
      break;
 80081fa:	e13c      	b.n	8008476 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008202:	2b00      	cmp	r3, #0
 8008204:	f000 8139 	beq.w	800847a <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800820e:	2101      	movs	r1, #1
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2208      	movs	r2, #8
 8008218:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2205      	movs	r2, #5
 800821e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800822e:	2300      	movs	r3, #0
 8008230:	2200      	movs	r2, #0
 8008232:	f007 fb7d 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      }
    }
    break;
 8008236:	e120      	b.n	800847a <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f000 fd12 	bl	8008c6a <USBH_SetCfg>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d102      	bne.n	8008252 <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2209      	movs	r2, #9
 8008250:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008266:	2300      	movs	r3, #0
 8008268:	2200      	movs	r2, #0
 800826a:	f007 fb61 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 800826e:	e107      	b.n	8008480 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008276:	f003 0320 	and.w	r3, r3, #32
 800827a:	2b00      	cmp	r3, #0
 800827c:	d015      	beq.n	80082aa <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800827e:	2101      	movs	r1, #1
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 fd15 	bl	8008cb0 <USBH_SetFeature>
 8008286:	4603      	mov	r3, r0
 8008288:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	b2db      	uxtb	r3, r3
 800828e:	2b00      	cmp	r3, #0
 8008290:	d103      	bne.n	800829a <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	220a      	movs	r2, #10
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e00a      	b.n	80082b0 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b03      	cmp	r3, #3
 80082a0:	d106      	bne.n	80082b0 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	220a      	movs	r2, #10
 80082a6:	701a      	strb	r2, [r3, #0]
 80082a8:	e002      	b.n	80082b0 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	220a      	movs	r2, #10
 80082ae:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80082c4:	2300      	movs	r3, #0
 80082c6:	2200      	movs	r2, #0
 80082c8:	f007 fb32 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 80082cc:	e0d8      	b.n	8008480 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d03f      	beq.n	8008358 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80082e0:	2300      	movs	r3, #0
 80082e2:	73fb      	strb	r3, [r7, #15]
 80082e4:	e016      	b.n	8008314 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80082e6:	7bfa      	ldrb	r2, [r7, #15]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	32de      	adds	r2, #222	@ 0xde
 80082ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f0:	791a      	ldrb	r2, [r3, #4]
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d108      	bne.n	800830e <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80082fc:	7bfa      	ldrb	r2, [r7, #15]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32de      	adds	r2, #222	@ 0xde
 8008302:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800830c:	e005      	b.n	800831a <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800830e:	7bfb      	ldrb	r3, [r7, #15]
 8008310:	3301      	adds	r3, #1
 8008312:	73fb      	strb	r3, [r7, #15]
 8008314:	7bfb      	ldrb	r3, [r7, #15]
 8008316:	2b00      	cmp	r3, #0
 8008318:	d0e5      	beq.n	80082e6 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008320:	2b00      	cmp	r3, #0
 8008322:	d016      	beq.n	8008352 <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	4798      	blx	r3
 8008330:	4603      	mov	r3, r0
 8008332:	2b00      	cmp	r3, #0
 8008334:	d109      	bne.n	800834a <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2206      	movs	r2, #6
 800833a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008342:	2103      	movs	r1, #3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	4798      	blx	r3
 8008348:	e006      	b.n	8008358 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	220d      	movs	r2, #13
 800834e:	701a      	strb	r2, [r3, #0]
 8008350:	e002      	b.n	8008358 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220d      	movs	r2, #13
 8008356:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2205      	movs	r2, #5
 800835c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800836c:	2300      	movs	r3, #0
 800836e:	2200      	movs	r2, #0
 8008370:	f007 fade 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 8008374:	e084      	b.n	8008480 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800837c:	2b00      	cmp	r3, #0
 800837e:	d017      	beq.n	80083b0 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008386:	691b      	ldr	r3, [r3, #16]
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	4798      	blx	r3
 800838c:	4603      	mov	r3, r0
 800838e:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008390:	7bbb      	ldrb	r3, [r7, #14]
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d103      	bne.n	80083a0 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	220b      	movs	r2, #11
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e00a      	b.n	80083b6 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 80083a0:	7bbb      	ldrb	r3, [r7, #14]
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	d106      	bne.n	80083b6 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	220d      	movs	r2, #13
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e002      	b.n	80083b6 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	220d      	movs	r2, #13
 80083b4:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2205      	movs	r2, #5
 80083ba:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80083ca:	2300      	movs	r3, #0
 80083cc:	2200      	movs	r2, #0
 80083ce:	f007 faaf 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 80083d2:	e055      	b.n	8008480 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d04f      	beq.n	800847e <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083e4:	695b      	ldr	r3, [r3, #20]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
      }
      break;
 80083ea:	e048      	b.n	800847e <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f7ff fccf 	bl	8007d98 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008400:	2b00      	cmp	r3, #0
 8008402:	d009      	beq.n	8008418 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008428:	2105      	movs	r1, #5
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008434:	b2db      	uxtb	r3, r3
 8008436:	2b01      	cmp	r3, #1
 8008438:	d107      	bne.n	800844a <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2200      	movs	r2, #0
 800843e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff fda7 	bl	8007f96 <USBH_Start>
 8008448:	e002      	b.n	8008450 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f00a fd08 	bl	8012e60 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008464:	2300      	movs	r3, #0
 8008466:	2200      	movs	r2, #0
 8008468:	f007 fa62 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      break;
 800846c:	e008      	b.n	8008480 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 800846e:	bf00      	nop
 8008470:	e006      	b.n	8008480 <USBH_Process+0x4c8>
      break;
 8008472:	bf00      	nop
 8008474:	e004      	b.n	8008480 <USBH_Process+0x4c8>
      break;
 8008476:	bf00      	nop
 8008478:	e002      	b.n	8008480 <USBH_Process+0x4c8>
    break;
 800847a:	bf00      	nop
 800847c:	e000      	b.n	8008480 <USBH_Process+0x4c8>
      break;
 800847e:	bf00      	nop
  }
  return USBH_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop

0800848c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b088      	sub	sp, #32
 8008490:	af04      	add	r7, sp, #16
 8008492:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008494:	2301      	movs	r3, #1
 8008496:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008498:	2301      	movs	r3, #1
 800849a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	785b      	ldrb	r3, [r3, #1]
 80084a0:	2b07      	cmp	r3, #7
 80084a2:	f200 8204 	bhi.w	80088ae <USBH_HandleEnum+0x422>
 80084a6:	a201      	add	r2, pc, #4	@ (adr r2, 80084ac <USBH_HandleEnum+0x20>)
 80084a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ac:	080084cd 	.word	0x080084cd
 80084b0:	08008587 	.word	0x08008587
 80084b4:	080085f1 	.word	0x080085f1
 80084b8:	0800867b 	.word	0x0800867b
 80084bc:	080086e5 	.word	0x080086e5
 80084c0:	08008755 	.word	0x08008755
 80084c4:	080087f1 	.word	0x080087f1
 80084c8:	0800886f 	.word	0x0800886f
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80084cc:	2108      	movs	r1, #8
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fae8 	bl	8008aa4 <USBH_Get_DevDesc>
 80084d4:	4603      	mov	r3, r0
 80084d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80084d8:	7bbb      	ldrb	r3, [r7, #14]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d12e      	bne.n	800853c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	7919      	ldrb	r1, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008502:	9202      	str	r2, [sp, #8]
 8008504:	2200      	movs	r2, #0
 8008506:	9201      	str	r2, [sp, #4]
 8008508:	9300      	str	r3, [sp, #0]
 800850a:	4603      	mov	r3, r0
 800850c:	2280      	movs	r2, #128	@ 0x80
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 fa68 	bl	80099e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	7959      	ldrb	r1, [r3, #5]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008528:	9202      	str	r2, [sp, #8]
 800852a:	2200      	movs	r2, #0
 800852c:	9201      	str	r2, [sp, #4]
 800852e:	9300      	str	r3, [sp, #0]
 8008530:	4603      	mov	r3, r0
 8008532:	2200      	movs	r2, #0
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 fa55 	bl	80099e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800853a:	e1ba      	b.n	80088b2 <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800853c:	7bbb      	ldrb	r3, [r7, #14]
 800853e:	2b03      	cmp	r3, #3
 8008540:	f040 81b7 	bne.w	80088b2 <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800854a:	3301      	adds	r3, #1
 800854c:	b2da      	uxtb	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800855a:	2b03      	cmp	r3, #3
 800855c:	d903      	bls.n	8008566 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	220d      	movs	r2, #13
 8008562:	701a      	strb	r2, [r3, #0]
      break;
 8008564:	e1a5      	b.n	80088b2 <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	795b      	ldrb	r3, [r3, #5]
 800856a:	4619      	mov	r1, r3
 800856c:	6878      	ldr	r0, [r7, #4]
 800856e:	f001 fa89 	bl	8009a84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	791b      	ldrb	r3, [r3, #4]
 8008576:	4619      	mov	r1, r3
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 fa83 	bl	8009a84 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	701a      	strb	r2, [r3, #0]
      break;
 8008584:	e195      	b.n	80088b2 <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008586:	2112      	movs	r1, #18
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f000 fa8b 	bl	8008aa4 <USBH_Get_DevDesc>
 800858e:	4603      	mov	r3, r0
 8008590:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008592:	7bbb      	ldrb	r3, [r7, #14]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d103      	bne.n	80085a0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2202      	movs	r2, #2
 800859c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800859e:	e18a      	b.n	80088b6 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	f040 8187 	bne.w	80088b6 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085ae:	3301      	adds	r3, #1
 80085b0:	b2da      	uxtb	r2, r3
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80085be:	2b03      	cmp	r3, #3
 80085c0:	d903      	bls.n	80085ca <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	220d      	movs	r2, #13
 80085c6:	701a      	strb	r2, [r3, #0]
      break;
 80085c8:	e175      	b.n	80088b6 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	795b      	ldrb	r3, [r3, #5]
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f001 fa57 	bl	8009a84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	791b      	ldrb	r3, [r3, #4]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f001 fa51 	bl	8009a84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2200      	movs	r2, #0
 80085ec:	701a      	strb	r2, [r3, #0]
      break;
 80085ee:	e162      	b.n	80088b6 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80085f0:	2101      	movs	r1, #1
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fb15 	bl	8008c22 <USBH_SetAddress>
 80085f8:	4603      	mov	r3, r0
 80085fa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80085fc:	7bbb      	ldrb	r3, [r7, #14]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d130      	bne.n	8008664 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008602:	2002      	movs	r0, #2
 8008604:	f00a fdbd 	bl	8013182 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2203      	movs	r2, #3
 8008614:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7919      	ldrb	r1, [r3, #4]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008626:	687a      	ldr	r2, [r7, #4]
 8008628:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800862a:	9202      	str	r2, [sp, #8]
 800862c:	2200      	movs	r2, #0
 800862e:	9201      	str	r2, [sp, #4]
 8008630:	9300      	str	r3, [sp, #0]
 8008632:	4603      	mov	r3, r0
 8008634:	2280      	movs	r2, #128	@ 0x80
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f001 f9d4 	bl	80099e4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	7959      	ldrb	r1, [r3, #5]
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008650:	9202      	str	r2, [sp, #8]
 8008652:	2200      	movs	r2, #0
 8008654:	9201      	str	r2, [sp, #4]
 8008656:	9300      	str	r3, [sp, #0]
 8008658:	4603      	mov	r3, r0
 800865a:	2200      	movs	r2, #0
 800865c:	6878      	ldr	r0, [r7, #4]
 800865e:	f001 f9c1 	bl	80099e4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008662:	e12a      	b.n	80088ba <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008664:	7bbb      	ldrb	r3, [r7, #14]
 8008666:	2b03      	cmp	r3, #3
 8008668:	f040 8127 	bne.w	80088ba <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	220d      	movs	r2, #13
 8008670:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2200      	movs	r2, #0
 8008676:	705a      	strb	r2, [r3, #1]
      break;
 8008678:	e11f      	b.n	80088ba <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800867a:	2109      	movs	r1, #9
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fa3d 	bl	8008afc <USBH_Get_CfgDesc>
 8008682:	4603      	mov	r3, r0
 8008684:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008686:	7bbb      	ldrb	r3, [r7, #14]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d103      	bne.n	8008694 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2204      	movs	r2, #4
 8008690:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008692:	e114      	b.n	80088be <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008694:	7bbb      	ldrb	r3, [r7, #14]
 8008696:	2b03      	cmp	r3, #3
 8008698:	f040 8111 	bne.w	80088be <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80086a2:	3301      	adds	r3, #1
 80086a4:	b2da      	uxtb	r2, r3
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80086b2:	2b03      	cmp	r3, #3
 80086b4:	d903      	bls.n	80086be <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	220d      	movs	r2, #13
 80086ba:	701a      	strb	r2, [r3, #0]
      break;
 80086bc:	e0ff      	b.n	80088be <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	795b      	ldrb	r3, [r3, #5]
 80086c2:	4619      	mov	r1, r3
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f001 f9dd 	bl	8009a84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	791b      	ldrb	r3, [r3, #4]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f001 f9d7 	bl	8009a84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	701a      	strb	r2, [r3, #0]
      break;
 80086e2:	e0ec      	b.n	80088be <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 fa05 	bl	8008afc <USBH_Get_CfgDesc>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d103      	bne.n	8008704 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2205      	movs	r2, #5
 8008700:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008702:	e0de      	b.n	80088c2 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008704:	7bbb      	ldrb	r3, [r7, #14]
 8008706:	2b03      	cmp	r3, #3
 8008708:	f040 80db 	bne.w	80088c2 <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008712:	3301      	adds	r3, #1
 8008714:	b2da      	uxtb	r2, r3
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008722:	2b03      	cmp	r3, #3
 8008724:	d903      	bls.n	800872e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	220d      	movs	r2, #13
 800872a:	701a      	strb	r2, [r3, #0]
      break;
 800872c:	e0c9      	b.n	80088c2 <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	795b      	ldrb	r3, [r3, #5]
 8008732:	4619      	mov	r1, r3
 8008734:	6878      	ldr	r0, [r7, #4]
 8008736:	f001 f9a5 	bl	8009a84 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f001 f99f 	bl	8009a84 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	701a      	strb	r2, [r3, #0]
      break;
 8008752:	e0b6      	b.n	80088c2 <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800875a:	2b00      	cmp	r3, #0
 800875c:	d036      	beq.n	80087cc <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800876a:	23ff      	movs	r3, #255	@ 0xff
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 f9ef 	bl	8008b50 <USBH_Get_StringDesc>
 8008772:	4603      	mov	r3, r0
 8008774:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d111      	bne.n	80087a0 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2206      	movs	r2, #6
 8008780:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2205      	movs	r2, #5
 8008786:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008796:	2300      	movs	r3, #0
 8008798:	2200      	movs	r2, #0
 800879a:	f007 f8c9 	bl	800f930 <osMessageQueuePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800879e:	e092      	b.n	80088c6 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80087a0:	7bbb      	ldrb	r3, [r7, #14]
 80087a2:	2b03      	cmp	r3, #3
 80087a4:	f040 808f 	bne.w	80088c6 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2206      	movs	r2, #6
 80087ac:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	2205      	movs	r2, #5
 80087b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087c2:	2300      	movs	r3, #0
 80087c4:	2200      	movs	r2, #0
 80087c6:	f007 f8b3 	bl	800f930 <osMessageQueuePut>
      break;
 80087ca:	e07c      	b.n	80088c6 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2206      	movs	r2, #6
 80087d0:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2205      	movs	r2, #5
 80087d6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80087e6:	2300      	movs	r3, #0
 80087e8:	2200      	movs	r2, #0
 80087ea:	f007 f8a1 	bl	800f930 <osMessageQueuePut>
      break;
 80087ee:	e06a      	b.n	80088c6 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d027      	beq.n	800884a <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008806:	23ff      	movs	r3, #255	@ 0xff
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f000 f9a1 	bl	8008b50 <USBH_Get_StringDesc>
 800880e:	4603      	mov	r3, r0
 8008810:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008812:	7bbb      	ldrb	r3, [r7, #14]
 8008814:	2b00      	cmp	r3, #0
 8008816:	d103      	bne.n	8008820 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2207      	movs	r2, #7
 800881c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800881e:	e054      	b.n	80088ca <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008820:	7bbb      	ldrb	r3, [r7, #14]
 8008822:	2b03      	cmp	r3, #3
 8008824:	d151      	bne.n	80088ca <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2207      	movs	r2, #7
 800882a:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2205      	movs	r2, #5
 8008830:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008840:	2300      	movs	r3, #0
 8008842:	2200      	movs	r2, #0
 8008844:	f007 f874 	bl	800f930 <osMessageQueuePut>
      break;
 8008848:	e03f      	b.n	80088ca <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2207      	movs	r2, #7
 800884e:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2205      	movs	r2, #5
 8008854:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008864:	2300      	movs	r3, #0
 8008866:	2200      	movs	r2, #0
 8008868:	f007 f862 	bl	800f930 <osMessageQueuePut>
      break;
 800886c:	e02d      	b.n	80088ca <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008874:	2b00      	cmp	r3, #0
 8008876:	d017      	beq.n	80088a8 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008884:	23ff      	movs	r3, #255	@ 0xff
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f000 f962 	bl	8008b50 <USBH_Get_StringDesc>
 800888c:	4603      	mov	r3, r0
 800888e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008890:	7bbb      	ldrb	r3, [r7, #14]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d102      	bne.n	800889c <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008896:	2300      	movs	r3, #0
 8008898:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800889a:	e018      	b.n	80088ce <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800889c:	7bbb      	ldrb	r3, [r7, #14]
 800889e:	2b03      	cmp	r3, #3
 80088a0:	d115      	bne.n	80088ce <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	73fb      	strb	r3, [r7, #15]
      break;
 80088a6:	e012      	b.n	80088ce <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	73fb      	strb	r3, [r7, #15]
      break;
 80088ac:	e00f      	b.n	80088ce <USBH_HandleEnum+0x442>

    default:
      break;
 80088ae:	bf00      	nop
 80088b0:	e00e      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088b2:	bf00      	nop
 80088b4:	e00c      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088b6:	bf00      	nop
 80088b8:	e00a      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088ba:	bf00      	nop
 80088bc:	e008      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088be:	bf00      	nop
 80088c0:	e006      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088c2:	bf00      	nop
 80088c4:	e004      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088c6:	bf00      	nop
 80088c8:	e002      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088ca:	bf00      	nop
 80088cc:	e000      	b.n	80088d0 <USBH_HandleEnum+0x444>
      break;
 80088ce:	bf00      	nop
  }
  return Status;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop

080088dc <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80088dc:	b480      	push	{r7}
 80088de:	b083      	sub	sp, #12
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	683a      	ldr	r2, [r7, #0]
 80088ea:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80088ee:	bf00      	nop
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80088fa:	b580      	push	{r7, lr}
 80088fc:	b082      	sub	sp, #8
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008908:	1c5a      	adds	r2, r3, #1
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f000 f804 	bl	800891e <USBH_HandleSof>
}
 8008916:	bf00      	nop
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b082      	sub	sp, #8
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	781b      	ldrb	r3, [r3, #0]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b0b      	cmp	r3, #11
 800892e:	d10a      	bne.n	8008946 <USBH_HandleSof+0x28>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008936:	2b00      	cmp	r3, #0
 8008938:	d005      	beq.n	8008946 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008940:	699b      	ldr	r3, [r3, #24]
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	4798      	blx	r3
  }
}
 8008946:	bf00      	nop
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b082      	sub	sp, #8
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2201      	movs	r2, #1
 800895a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008972:	2300      	movs	r3, #0
 8008974:	2200      	movs	r2, #0
 8008976:	f006 ffdb 	bl	800f930 <osMessageQueuePut>
#endif
#endif

  return;
 800897a:	bf00      	nop
}
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8008992:	bf00      	nop
}
 8008994:	370c      	adds	r7, #12
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr

0800899e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b082      	sub	sp, #8
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2201      	movs	r2, #1
 80089c2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80089d2:	2300      	movs	r3, #0
 80089d4:	2200      	movs	r2, #0
 80089d6:	f006 ffab 	bl	800f930 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 80089da:	2300      	movs	r3, #0
}
 80089dc:	4618      	mov	r0, r3
 80089de:	3708      	adds	r7, #8
 80089e0:	46bd      	mov	sp, r7
 80089e2:	bd80      	pop	{r7, pc}

080089e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f00a fa46 	bl	8012e96 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	791b      	ldrb	r3, [r3, #4]
 8008a0e:	4619      	mov	r1, r3
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f001 f837 	bl	8009a84 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	795b      	ldrb	r3, [r3, #5]
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f001 f831 	bl	8009a84 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	2201      	movs	r2, #1
 8008a26:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a36:	2300      	movs	r3, #0
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f006 ff79 	bl	800f930 <osMessageQueuePut>
#endif
#endif

  return USBH_OK;
 8008a3e:	2300      	movs	r3, #0
}
 8008a40:	4618      	mov	r0, r3
 8008a42:	3708      	adds	r7, #8
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}

08008a48 <USBH_Process_OS>:
    }
  }
}
#else
static void USBH_Process_OS(void *argument)
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
  osStatus_t status;

  for (;;)
  {
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
                               &((USBH_HandleTypeDef *)argument)->os_msg, NULL, osWaitForever);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008a5c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a60:	2200      	movs	r2, #0
 8008a62:	f006 ffc5 	bl	800f9f0 <osMessageQueueGet>
 8008a66:	60f8      	str	r0, [r7, #12]
    if (status == osOK)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d1f0      	bne.n	8008a50 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff faa2 	bl	8007fb8 <USBH_Process>
    status = osMessageQueueGet(((USBH_HandleTypeDef *)argument)->os_event,
 8008a74:	e7ec      	b.n	8008a50 <USBH_Process_OS+0x8>

08008a76 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b082      	sub	sp, #8
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2201      	movs	r2, #1
 8008a82:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8008a92:	2300      	movs	r3, #0
 8008a94:	2200      	movs	r2, #0
 8008a96:	f006 ff4b 	bl	800f930 <osMessageQueuePut>
#endif

  return USBH_OK;
 8008a9a:	2300      	movs	r3, #0
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3708      	adds	r7, #8
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	460b      	mov	r3, r1
 8008aae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008ab0:	887b      	ldrh	r3, [r7, #2]
 8008ab2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ab6:	d901      	bls.n	8008abc <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008ab8:	2303      	movs	r3, #3
 8008aba:	e01b      	b.n	8008af4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008ac2:	887b      	ldrh	r3, [r7, #2]
 8008ac4:	9300      	str	r3, [sp, #0]
 8008ac6:	4613      	mov	r3, r2
 8008ac8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008acc:	2100      	movs	r1, #0
 8008ace:	6878      	ldr	r0, [r7, #4]
 8008ad0:	f000 f872 	bl	8008bb8 <USBH_GetDescriptor>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008ad8:	7bfb      	ldrb	r3, [r7, #15]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d109      	bne.n	8008af2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ae4:	887a      	ldrh	r2, [r7, #2]
 8008ae6:	4619      	mov	r1, r3
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 f929 	bl	8008d40 <USBH_ParseDevDesc>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b086      	sub	sp, #24
 8008b00:	af02      	add	r7, sp, #8
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	331c      	adds	r3, #28
 8008b0c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8008b0e:	887b      	ldrh	r3, [r7, #2]
 8008b10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b14:	d901      	bls.n	8008b1a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b16:	2303      	movs	r3, #3
 8008b18:	e016      	b.n	8008b48 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008b1a:	887b      	ldrh	r3, [r7, #2]
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b24:	2100      	movs	r1, #0
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 f846 	bl	8008bb8 <USBH_GetDescriptor>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008b30:	7bfb      	ldrb	r3, [r7, #15]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d107      	bne.n	8008b46 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008b36:	887b      	ldrh	r3, [r7, #2]
 8008b38:	461a      	mov	r2, r3
 8008b3a:	68b9      	ldr	r1, [r7, #8]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f9af 	bl	8008ea0 <USBH_ParseCfgDesc>
 8008b42:	4603      	mov	r3, r0
 8008b44:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3710      	adds	r7, #16
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af02      	add	r7, sp, #8
 8008b56:	60f8      	str	r0, [r7, #12]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	72fb      	strb	r3, [r7, #11]
 8008b60:	4613      	mov	r3, r2
 8008b62:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8008b64:	893b      	ldrh	r3, [r7, #8]
 8008b66:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008b6a:	d802      	bhi.n	8008b72 <USBH_Get_StringDesc+0x22>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d101      	bne.n	8008b76 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e01c      	b.n	8008bb0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8008b76:	7afb      	ldrb	r3, [r7, #11]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008b7e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8008b86:	893b      	ldrh	r3, [r7, #8]
 8008b88:	9300      	str	r3, [sp, #0]
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	2100      	movs	r1, #0
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 f812 	bl	8008bb8 <USBH_GetDescriptor>
 8008b94:	4603      	mov	r3, r0
 8008b96:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008b98:	7dfb      	ldrb	r3, [r7, #23]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d107      	bne.n	8008bae <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008ba4:	893a      	ldrh	r2, [r7, #8]
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 fb8d 	bl	80092c8 <USBH_ParseStringDesc>
  }

  return status;
 8008bae:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b084      	sub	sp, #16
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	72fb      	strb	r3, [r7, #11]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	789b      	ldrb	r3, [r3, #2]
 8008bce:	2b01      	cmp	r3, #1
 8008bd0:	d11c      	bne.n	8008c0c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8008bd2:	7afb      	ldrb	r3, [r7, #11]
 8008bd4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008bd8:	b2da      	uxtb	r2, r3
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	2206      	movs	r2, #6
 8008be2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	893a      	ldrh	r2, [r7, #8]
 8008be8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008bea:	893b      	ldrh	r3, [r7, #8]
 8008bec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008bf0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008bf4:	d104      	bne.n	8008c00 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f240 4209 	movw	r2, #1033	@ 0x409
 8008bfc:	829a      	strh	r2, [r3, #20]
 8008bfe:	e002      	b.n	8008c06 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2200      	movs	r2, #0
 8008c04:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	8b3a      	ldrh	r2, [r7, #24]
 8008c0a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008c0c:	8b3b      	ldrh	r3, [r7, #24]
 8008c0e:	461a      	mov	r2, r3
 8008c10:	6879      	ldr	r1, [r7, #4]
 8008c12:	68f8      	ldr	r0, [r7, #12]
 8008c14:	f000 fba5 	bl	8009362 <USBH_CtlReq>
 8008c18:	4603      	mov	r3, r0
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b082      	sub	sp, #8
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	789b      	ldrb	r3, [r3, #2]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d10f      	bne.n	8008c56 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2205      	movs	r2, #5
 8008c40:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8008c42:	78fb      	ldrb	r3, [r7, #3]
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c56:	2200      	movs	r2, #0
 8008c58:	2100      	movs	r1, #0
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 fb81 	bl	8009362 <USBH_CtlReq>
 8008c60:	4603      	mov	r3, r0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}

08008c6a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008c6a:	b580      	push	{r7, lr}
 8008c6c:	b082      	sub	sp, #8
 8008c6e:	af00      	add	r7, sp, #0
 8008c70:	6078      	str	r0, [r7, #4]
 8008c72:	460b      	mov	r3, r1
 8008c74:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	789b      	ldrb	r3, [r3, #2]
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d10e      	bne.n	8008c9c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2209      	movs	r2, #9
 8008c88:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	887a      	ldrh	r2, [r7, #2]
 8008c8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2200      	movs	r2, #0
 8008c94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	2100      	movs	r1, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fb5e 	bl	8009362 <USBH_CtlReq>
 8008ca6:	4603      	mov	r3, r0
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3708      	adds	r7, #8
 8008cac:	46bd      	mov	sp, r7
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	460b      	mov	r3, r1
 8008cba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	789b      	ldrb	r3, [r3, #2]
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d10f      	bne.n	8008ce4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2203      	movs	r2, #3
 8008cce:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8008cd0:	78fb      	ldrb	r3, [r7, #3]
 8008cd2:	b29a      	uxth	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f000 fb3a 	bl	8009362 <USBH_CtlReq>
 8008cee:	4603      	mov	r3, r0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	460b      	mov	r3, r1
 8008d02:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	789b      	ldrb	r3, [r3, #2]
 8008d08:	2b01      	cmp	r3, #1
 8008d0a:	d10f      	bne.n	8008d2c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2202      	movs	r2, #2
 8008d10:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008d1e:	78fb      	ldrb	r3, [r7, #3]
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	2100      	movs	r1, #0
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 fb16 	bl	8009362 <USBH_CtlReq>
 8008d36:	4603      	mov	r3, r0
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3708      	adds	r7, #8
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}

08008d40 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b087      	sub	sp, #28
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	60f8      	str	r0, [r7, #12]
 8008d48:	60b9      	str	r1, [r7, #8]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008d54:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d101      	bne.n	8008d64 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008d60:	2302      	movs	r3, #2
 8008d62:	e094      	b.n	8008e8e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	781a      	ldrb	r2, [r3, #0]
 8008d68:	693b      	ldr	r3, [r7, #16]
 8008d6a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	785a      	ldrb	r2, [r3, #1]
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	3302      	adds	r3, #2
 8008d78:	781b      	ldrb	r3, [r3, #0]
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	3303      	adds	r3, #3
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	4313      	orrs	r3, r2
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	791a      	ldrb	r2, [r3, #4]
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	795a      	ldrb	r2, [r3, #5]
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008d9e:	68bb      	ldr	r3, [r7, #8]
 8008da0:	799a      	ldrb	r2, [r3, #6]
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	79da      	ldrb	r2, [r3, #7]
 8008daa:	693b      	ldr	r3, [r7, #16]
 8008dac:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d004      	beq.n	8008dc2 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008dbe:	2b01      	cmp	r3, #1
 8008dc0:	d11b      	bne.n	8008dfa <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	79db      	ldrb	r3, [r3, #7]
 8008dc6:	2b20      	cmp	r3, #32
 8008dc8:	dc0f      	bgt.n	8008dea <USBH_ParseDevDesc+0xaa>
 8008dca:	2b08      	cmp	r3, #8
 8008dcc:	db0f      	blt.n	8008dee <USBH_ParseDevDesc+0xae>
 8008dce:	3b08      	subs	r3, #8
 8008dd0:	4a32      	ldr	r2, [pc, #200]	@ (8008e9c <USBH_ParseDevDesc+0x15c>)
 8008dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	bf14      	ite	ne
 8008dde:	2301      	movne	r3, #1
 8008de0:	2300      	moveq	r3, #0
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d106      	bne.n	8008df6 <USBH_ParseDevDesc+0xb6>
 8008de8:	e001      	b.n	8008dee <USBH_ParseDevDesc+0xae>
 8008dea:	2b40      	cmp	r3, #64	@ 0x40
 8008dec:	d003      	beq.n	8008df6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	2208      	movs	r2, #8
 8008df2:	71da      	strb	r2, [r3, #7]
        break;
 8008df4:	e000      	b.n	8008df8 <USBH_ParseDevDesc+0xb8>
        break;
 8008df6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008df8:	e00e      	b.n	8008e18 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e00:	2b02      	cmp	r3, #2
 8008e02:	d107      	bne.n	8008e14 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	79db      	ldrb	r3, [r3, #7]
 8008e08:	2b08      	cmp	r3, #8
 8008e0a:	d005      	beq.n	8008e18 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008e0c:	693b      	ldr	r3, [r7, #16]
 8008e0e:	2208      	movs	r2, #8
 8008e10:	71da      	strb	r2, [r3, #7]
 8008e12:	e001      	b.n	8008e18 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008e14:	2303      	movs	r3, #3
 8008e16:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008e18:	88fb      	ldrh	r3, [r7, #6]
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d936      	bls.n	8008e8c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	3308      	adds	r3, #8
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	461a      	mov	r2, r3
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	3309      	adds	r3, #9
 8008e2a:	781b      	ldrb	r3, [r3, #0]
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	4313      	orrs	r3, r2
 8008e32:	b29a      	uxth	r2, r3
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	330a      	adds	r3, #10
 8008e3c:	781b      	ldrb	r3, [r3, #0]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	68bb      	ldr	r3, [r7, #8]
 8008e42:	330b      	adds	r3, #11
 8008e44:	781b      	ldrb	r3, [r3, #0]
 8008e46:	021b      	lsls	r3, r3, #8
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	330c      	adds	r3, #12
 8008e56:	781b      	ldrb	r3, [r3, #0]
 8008e58:	461a      	mov	r2, r3
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	330d      	adds	r3, #13
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	021b      	lsls	r3, r3, #8
 8008e62:	b29b      	uxth	r3, r3
 8008e64:	4313      	orrs	r3, r2
 8008e66:	b29a      	uxth	r2, r3
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	7b9a      	ldrb	r2, [r3, #14]
 8008e70:	693b      	ldr	r3, [r7, #16]
 8008e72:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	7bda      	ldrb	r2, [r3, #15]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	7c1a      	ldrb	r2, [r3, #16]
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	7c5a      	ldrb	r2, [r3, #17]
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	01000101 	.word	0x01000101

08008ea0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08c      	sub	sp, #48	@ 0x30
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008eb4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d101      	bne.n	8008ed2 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e0da      	b.n	8009088 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	781a      	ldrb	r2, [r3, #0]
 8008eda:	6a3b      	ldr	r3, [r7, #32]
 8008edc:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	785a      	ldrb	r2, [r3, #1]
 8008ee2:	6a3b      	ldr	r3, [r7, #32]
 8008ee4:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	3302      	adds	r3, #2
 8008eea:	781b      	ldrb	r3, [r3, #0]
 8008eec:	461a      	mov	r2, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	3303      	adds	r3, #3
 8008ef2:	781b      	ldrb	r3, [r3, #0]
 8008ef4:	021b      	lsls	r3, r3, #8
 8008ef6:	b29b      	uxth	r3, r3
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	b29b      	uxth	r3, r3
 8008efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f00:	bf28      	it	cs
 8008f02:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008f06:	b29a      	uxth	r2, r3
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	791a      	ldrb	r2, [r3, #4]
 8008f10:	6a3b      	ldr	r3, [r7, #32]
 8008f12:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	795a      	ldrb	r2, [r3, #5]
 8008f18:	6a3b      	ldr	r3, [r7, #32]
 8008f1a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	799a      	ldrb	r2, [r3, #6]
 8008f20:	6a3b      	ldr	r3, [r7, #32]
 8008f22:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	79da      	ldrb	r2, [r3, #7]
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	7a1a      	ldrb	r2, [r3, #8]
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008f34:	6a3b      	ldr	r3, [r7, #32]
 8008f36:	781b      	ldrb	r3, [r3, #0]
 8008f38:	2b09      	cmp	r3, #9
 8008f3a:	d002      	beq.n	8008f42 <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008f3c:	6a3b      	ldr	r3, [r7, #32]
 8008f3e:	2209      	movs	r2, #9
 8008f40:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008f42:	88fb      	ldrh	r3, [r7, #6]
 8008f44:	2b09      	cmp	r3, #9
 8008f46:	f240 809d 	bls.w	8009084 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008f4a:	2309      	movs	r3, #9
 8008f4c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008f52:	e081      	b.n	8009058 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008f54:	f107 0316 	add.w	r3, r7, #22
 8008f58:	4619      	mov	r1, r3
 8008f5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f5c:	f000 f9e7 	bl	800932e <USBH_GetNextDesc>
 8008f60:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f64:	785b      	ldrb	r3, [r3, #1]
 8008f66:	2b04      	cmp	r3, #4
 8008f68:	d176      	bne.n	8009058 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f6c:	781b      	ldrb	r3, [r3, #0]
 8008f6e:	2b09      	cmp	r3, #9
 8008f70:	d002      	beq.n	8008f78 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f74:	2209      	movs	r2, #9
 8008f76:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008f78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008f7c:	221a      	movs	r2, #26
 8008f7e:	fb02 f303 	mul.w	r3, r2, r3
 8008f82:	3308      	adds	r3, #8
 8008f84:	6a3a      	ldr	r2, [r7, #32]
 8008f86:	4413      	add	r3, r2
 8008f88:	3302      	adds	r3, #2
 8008f8a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f8e:	69f8      	ldr	r0, [r7, #28]
 8008f90:	f000 f87e 	bl	8009090 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008f94:	2300      	movs	r3, #0
 8008f96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008f9e:	e043      	b.n	8009028 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008fa0:	f107 0316 	add.w	r3, r7, #22
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fa8:	f000 f9c1 	bl	800932e <USBH_GetNextDesc>
 8008fac:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b05      	cmp	r3, #5
 8008fb4:	d138      	bne.n	8009028 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	795b      	ldrb	r3, [r3, #5]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d113      	bne.n	8008fe6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008fbe:	69fb      	ldr	r3, [r7, #28]
 8008fc0:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d003      	beq.n	8008fce <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008fc6:	69fb      	ldr	r3, [r7, #28]
 8008fc8:	799b      	ldrb	r3, [r3, #6]
 8008fca:	2b03      	cmp	r3, #3
 8008fcc:	d10b      	bne.n	8008fe6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fce:	69fb      	ldr	r3, [r7, #28]
 8008fd0:	79db      	ldrb	r3, [r3, #7]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d10b      	bne.n	8008fee <USBH_ParseCfgDesc+0x14e>
 8008fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	2b09      	cmp	r3, #9
 8008fdc:	d007      	beq.n	8008fee <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe0:	2209      	movs	r2, #9
 8008fe2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fe4:	e003      	b.n	8008fee <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	2207      	movs	r2, #7
 8008fea:	701a      	strb	r2, [r3, #0]
 8008fec:	e000      	b.n	8008ff0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008fee:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008ff0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ff4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008ff8:	3201      	adds	r2, #1
 8008ffa:	00d2      	lsls	r2, r2, #3
 8008ffc:	211a      	movs	r1, #26
 8008ffe:	fb01 f303 	mul.w	r3, r1, r3
 8009002:	4413      	add	r3, r2
 8009004:	3308      	adds	r3, #8
 8009006:	6a3a      	ldr	r2, [r7, #32]
 8009008:	4413      	add	r3, r2
 800900a:	3304      	adds	r3, #4
 800900c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800900e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009010:	69b9      	ldr	r1, [r7, #24]
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 f870 	bl	80090f8 <USBH_ParseEPDesc>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800901e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009022:	3301      	adds	r3, #1
 8009024:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	791b      	ldrb	r3, [r3, #4]
 800902c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009030:	429a      	cmp	r2, r3
 8009032:	d204      	bcs.n	800903e <USBH_ParseCfgDesc+0x19e>
 8009034:	6a3b      	ldr	r3, [r7, #32]
 8009036:	885a      	ldrh	r2, [r3, #2]
 8009038:	8afb      	ldrh	r3, [r7, #22]
 800903a:	429a      	cmp	r2, r3
 800903c:	d8b0      	bhi.n	8008fa0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	791b      	ldrb	r3, [r3, #4]
 8009042:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009046:	429a      	cmp	r2, r3
 8009048:	d201      	bcs.n	800904e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800904a:	2303      	movs	r3, #3
 800904c:	e01c      	b.n	8009088 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800904e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009052:	3301      	adds	r3, #1
 8009054:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009058:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800905c:	2b01      	cmp	r3, #1
 800905e:	d805      	bhi.n	800906c <USBH_ParseCfgDesc+0x1cc>
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	885a      	ldrh	r2, [r3, #2]
 8009064:	8afb      	ldrh	r3, [r7, #22]
 8009066:	429a      	cmp	r2, r3
 8009068:	f63f af74 	bhi.w	8008f54 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800906c:	6a3b      	ldr	r3, [r7, #32]
 800906e:	791b      	ldrb	r3, [r3, #4]
 8009070:	2b02      	cmp	r3, #2
 8009072:	bf28      	it	cs
 8009074:	2302      	movcs	r3, #2
 8009076:	b2db      	uxtb	r3, r3
 8009078:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800907c:	429a      	cmp	r2, r3
 800907e:	d201      	bcs.n	8009084 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009080:	2303      	movs	r3, #3
 8009082:	e001      	b.n	8009088 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009084:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009088:	4618      	mov	r0, r3
 800908a:	3730      	adds	r7, #48	@ 0x30
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}

08009090 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009090:	b480      	push	{r7}
 8009092:	b083      	sub	sp, #12
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	781a      	ldrb	r2, [r3, #0]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	785a      	ldrb	r2, [r3, #1]
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	789a      	ldrb	r2, [r3, #2]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	78da      	ldrb	r2, [r3, #3]
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	3304      	adds	r3, #4
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	2b02      	cmp	r3, #2
 80090c2:	bf28      	it	cs
 80090c4:	2302      	movcs	r3, #2
 80090c6:	b2da      	uxtb	r2, r3
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	795a      	ldrb	r2, [r3, #5]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80090d4:	683b      	ldr	r3, [r7, #0]
 80090d6:	799a      	ldrb	r2, [r3, #6]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	79da      	ldrb	r2, [r3, #7]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	7a1a      	ldrb	r2, [r3, #8]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	721a      	strb	r2, [r3, #8]
}
 80090ec:	bf00      	nop
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b087      	sub	sp, #28
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	60f8      	str	r0, [r7, #12]
 8009100:	60b9      	str	r1, [r7, #8]
 8009102:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009104:	2300      	movs	r3, #0
 8009106:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	781a      	ldrb	r2, [r3, #0]
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	785a      	ldrb	r2, [r3, #1]
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	789a      	ldrb	r2, [r3, #2]
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	78da      	ldrb	r2, [r3, #3]
 8009124:	68bb      	ldr	r3, [r7, #8]
 8009126:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3304      	adds	r3, #4
 800912c:	781b      	ldrb	r3, [r3, #0]
 800912e:	461a      	mov	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3305      	adds	r3, #5
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	021b      	lsls	r3, r3, #8
 8009138:	b29b      	uxth	r3, r3
 800913a:	4313      	orrs	r3, r2
 800913c:	b29a      	uxth	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	799a      	ldrb	r2, [r3, #6]
 8009146:	68bb      	ldr	r3, [r7, #8]
 8009148:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	889b      	ldrh	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d009      	beq.n	8009166 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009156:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800915a:	d804      	bhi.n	8009166 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009164:	d901      	bls.n	800916a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009166:	2303      	movs	r3, #3
 8009168:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009170:	2b00      	cmp	r3, #0
 8009172:	d136      	bne.n	80091e2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	78db      	ldrb	r3, [r3, #3]
 8009178:	f003 0303 	and.w	r3, r3, #3
 800917c:	2b02      	cmp	r3, #2
 800917e:	d108      	bne.n	8009192 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	889b      	ldrh	r3, [r3, #4]
 8009184:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009188:	f240 8097 	bls.w	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800918c:	2303      	movs	r3, #3
 800918e:	75fb      	strb	r3, [r7, #23]
 8009190:	e093      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	78db      	ldrb	r3, [r3, #3]
 8009196:	f003 0303 	and.w	r3, r3, #3
 800919a:	2b00      	cmp	r3, #0
 800919c:	d107      	bne.n	80091ae <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	889b      	ldrh	r3, [r3, #4]
 80091a2:	2b40      	cmp	r3, #64	@ 0x40
 80091a4:	f240 8089 	bls.w	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80091a8:	2303      	movs	r3, #3
 80091aa:	75fb      	strb	r3, [r7, #23]
 80091ac:	e085      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	78db      	ldrb	r3, [r3, #3]
 80091b2:	f003 0303 	and.w	r3, r3, #3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d005      	beq.n	80091c6 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	78db      	ldrb	r3, [r3, #3]
 80091be:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80091c2:	2b03      	cmp	r3, #3
 80091c4:	d10a      	bne.n	80091dc <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	799b      	ldrb	r3, [r3, #6]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d003      	beq.n	80091d6 <USBH_ParseEPDesc+0xde>
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	799b      	ldrb	r3, [r3, #6]
 80091d2:	2b10      	cmp	r3, #16
 80091d4:	d970      	bls.n	80092b8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80091d6:	2303      	movs	r3, #3
 80091d8:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80091da:	e06d      	b.n	80092b8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80091dc:	2303      	movs	r3, #3
 80091de:	75fb      	strb	r3, [r7, #23]
 80091e0:	e06b      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d13c      	bne.n	8009266 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80091ec:	68bb      	ldr	r3, [r7, #8]
 80091ee:	78db      	ldrb	r3, [r3, #3]
 80091f0:	f003 0303 	and.w	r3, r3, #3
 80091f4:	2b02      	cmp	r3, #2
 80091f6:	d005      	beq.n	8009204 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	78db      	ldrb	r3, [r3, #3]
 80091fc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	889b      	ldrh	r3, [r3, #4]
 8009208:	2b40      	cmp	r3, #64	@ 0x40
 800920a:	d956      	bls.n	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800920c:	2303      	movs	r3, #3
 800920e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009210:	e053      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	78db      	ldrb	r3, [r3, #3]
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10e      	bne.n	800923c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	799b      	ldrb	r3, [r3, #6]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800922a:	2b10      	cmp	r3, #16
 800922c:	d803      	bhi.n	8009236 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009232:	2b40      	cmp	r3, #64	@ 0x40
 8009234:	d941      	bls.n	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009236:	2303      	movs	r3, #3
 8009238:	75fb      	strb	r3, [r7, #23]
 800923a:	e03e      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	78db      	ldrb	r3, [r3, #3]
 8009240:	f003 0303 	and.w	r3, r3, #3
 8009244:	2b03      	cmp	r3, #3
 8009246:	d10b      	bne.n	8009260 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	799b      	ldrb	r3, [r3, #6]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <USBH_ParseEPDesc+0x162>
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	889b      	ldrh	r3, [r3, #4]
 8009254:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009258:	d32f      	bcc.n	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800925a:	2303      	movs	r3, #3
 800925c:	75fb      	strb	r3, [r7, #23]
 800925e:	e02c      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009260:	2303      	movs	r3, #3
 8009262:	75fb      	strb	r3, [r7, #23]
 8009264:	e029      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800926c:	2b02      	cmp	r3, #2
 800926e:	d120      	bne.n	80092b2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	78db      	ldrb	r3, [r3, #3]
 8009274:	f003 0303 	and.w	r3, r3, #3
 8009278:	2b00      	cmp	r3, #0
 800927a:	d106      	bne.n	800928a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	889b      	ldrh	r3, [r3, #4]
 8009280:	2b08      	cmp	r3, #8
 8009282:	d01a      	beq.n	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009284:	2303      	movs	r3, #3
 8009286:	75fb      	strb	r3, [r7, #23]
 8009288:	e017      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	78db      	ldrb	r3, [r3, #3]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b03      	cmp	r3, #3
 8009294:	d10a      	bne.n	80092ac <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	799b      	ldrb	r3, [r3, #6]
 800929a:	2b00      	cmp	r3, #0
 800929c:	d003      	beq.n	80092a6 <USBH_ParseEPDesc+0x1ae>
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	889b      	ldrh	r3, [r3, #4]
 80092a2:	2b08      	cmp	r3, #8
 80092a4:	d909      	bls.n	80092ba <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80092a6:	2303      	movs	r3, #3
 80092a8:	75fb      	strb	r3, [r7, #23]
 80092aa:	e006      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80092ac:	2303      	movs	r3, #3
 80092ae:	75fb      	strb	r3, [r7, #23]
 80092b0:	e003      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80092b2:	2303      	movs	r3, #3
 80092b4:	75fb      	strb	r3, [r7, #23]
 80092b6:	e000      	b.n	80092ba <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80092b8:	bf00      	nop
  }

  return status;
 80092ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80092bc:	4618      	mov	r0, r3
 80092be:	371c      	adds	r7, #28
 80092c0:	46bd      	mov	sp, r7
 80092c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c6:	4770      	bx	lr

080092c8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	4613      	mov	r3, r2
 80092d4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	3301      	adds	r3, #1
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	2b03      	cmp	r3, #3
 80092de:	d120      	bne.n	8009322 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	781b      	ldrb	r3, [r3, #0]
 80092e4:	1e9a      	subs	r2, r3, #2
 80092e6:	88fb      	ldrh	r3, [r7, #6]
 80092e8:	4293      	cmp	r3, r2
 80092ea:	bf28      	it	cs
 80092ec:	4613      	movcs	r3, r2
 80092ee:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3302      	adds	r3, #2
 80092f4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80092f6:	2300      	movs	r3, #0
 80092f8:	82fb      	strh	r3, [r7, #22]
 80092fa:	e00b      	b.n	8009314 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80092fc:	8afb      	ldrh	r3, [r7, #22]
 80092fe:	68fa      	ldr	r2, [r7, #12]
 8009300:	4413      	add	r3, r2
 8009302:	781a      	ldrb	r2, [r3, #0]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	3301      	adds	r3, #1
 800930c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800930e:	8afb      	ldrh	r3, [r7, #22]
 8009310:	3302      	adds	r3, #2
 8009312:	82fb      	strh	r3, [r7, #22]
 8009314:	8afa      	ldrh	r2, [r7, #22]
 8009316:	8abb      	ldrh	r3, [r7, #20]
 8009318:	429a      	cmp	r2, r3
 800931a:	d3ef      	bcc.n	80092fc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	2200      	movs	r2, #0
 8009320:	701a      	strb	r2, [r3, #0]
  }
}
 8009322:	bf00      	nop
 8009324:	371c      	adds	r7, #28
 8009326:	46bd      	mov	sp, r7
 8009328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932c:	4770      	bx	lr

0800932e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800932e:	b480      	push	{r7}
 8009330:	b085      	sub	sp, #20
 8009332:	af00      	add	r7, sp, #0
 8009334:	6078      	str	r0, [r7, #4]
 8009336:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	881b      	ldrh	r3, [r3, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	7812      	ldrb	r2, [r2, #0]
 8009340:	4413      	add	r3, r2
 8009342:	b29a      	uxth	r2, r3
 8009344:	683b      	ldr	r3, [r7, #0]
 8009346:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	781b      	ldrb	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	4413      	add	r3, r2
 8009352:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009354:	68fb      	ldr	r3, [r7, #12]
}
 8009356:	4618      	mov	r0, r3
 8009358:	3714      	adds	r7, #20
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b086      	sub	sp, #24
 8009366:	af00      	add	r7, sp, #0
 8009368:	60f8      	str	r0, [r7, #12]
 800936a:	60b9      	str	r1, [r7, #8]
 800936c:	4613      	mov	r3, r2
 800936e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009370:	2301      	movs	r3, #1
 8009372:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	789b      	ldrb	r3, [r3, #2]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d002      	beq.n	8009382 <USBH_CtlReq+0x20>
 800937c:	2b02      	cmp	r3, #2
 800937e:	d01d      	beq.n	80093bc <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009380:	e043      	b.n	800940a <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	88fa      	ldrh	r2, [r7, #6]
 800938c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2201      	movs	r2, #1
 8009392:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2202      	movs	r2, #2
 8009398:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800939a:	2301      	movs	r3, #1
 800939c:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	2203      	movs	r2, #3
 80093a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80093b2:	2300      	movs	r3, #0
 80093b4:	2200      	movs	r2, #0
 80093b6:	f006 fabb 	bl	800f930 <osMessageQueuePut>
      break;
 80093ba:	e026      	b.n	800940a <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 80093bc:	68f8      	ldr	r0, [r7, #12]
 80093be:	f000 f829 	bl	8009414 <USBH_HandleControl>
 80093c2:	4603      	mov	r3, r0
 80093c4:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80093c6:	7dfb      	ldrb	r3, [r7, #23]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d002      	beq.n	80093d2 <USBH_CtlReq+0x70>
 80093cc:	7dfb      	ldrb	r3, [r7, #23]
 80093ce:	2b03      	cmp	r3, #3
 80093d0:	d106      	bne.n	80093e0 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2201      	movs	r2, #1
 80093d6:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	761a      	strb	r2, [r3, #24]
 80093de:	e005      	b.n	80093ec <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 80093e0:	7dfb      	ldrb	r3, [r7, #23]
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d102      	bne.n	80093ec <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2201      	movs	r2, #1
 80093ea:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2203      	movs	r2, #3
 80093f0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009400:	2300      	movs	r3, #0
 8009402:	2200      	movs	r2, #0
 8009404:	f006 fa94 	bl	800f930 <osMessageQueuePut>
      break;
 8009408:	bf00      	nop
  }
  return status;
 800940a:	7dfb      	ldrb	r3, [r7, #23]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af02      	add	r7, sp, #8
 800941a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800941c:	2301      	movs	r3, #1
 800941e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009420:	2300      	movs	r3, #0
 8009422:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7e1b      	ldrb	r3, [r3, #24]
 8009428:	3b01      	subs	r3, #1
 800942a:	2b0a      	cmp	r3, #10
 800942c:	f200 8229 	bhi.w	8009882 <USBH_HandleControl+0x46e>
 8009430:	a201      	add	r2, pc, #4	@ (adr r2, 8009438 <USBH_HandleControl+0x24>)
 8009432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009436:	bf00      	nop
 8009438:	08009465 	.word	0x08009465
 800943c:	0800947f 	.word	0x0800947f
 8009440:	08009521 	.word	0x08009521
 8009444:	08009547 	.word	0x08009547
 8009448:	080095d3 	.word	0x080095d3
 800944c:	080095fd 	.word	0x080095fd
 8009450:	080096bf 	.word	0x080096bf
 8009454:	080096e1 	.word	0x080096e1
 8009458:	08009773 	.word	0x08009773
 800945c:	08009799 	.word	0x08009799
 8009460:	0800982b 	.word	0x0800982b
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	f103 0110 	add.w	r1, r3, #16
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	795b      	ldrb	r3, [r3, #5]
 800946e:	461a      	mov	r2, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa17 	bl	80098a4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2202      	movs	r2, #2
 800947a:	761a      	strb	r2, [r3, #24]
      break;
 800947c:	e20c      	b.n	8009898 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	795b      	ldrb	r3, [r3, #5]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f009 fdf5 	bl	8013074 <USBH_LL_GetURBState>
 800948a:	4603      	mov	r3, r0
 800948c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800948e:	7bbb      	ldrb	r3, [r7, #14]
 8009490:	2b01      	cmp	r3, #1
 8009492:	d12c      	bne.n	80094ee <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	7c1b      	ldrb	r3, [r3, #16]
 8009498:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800949c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	8adb      	ldrh	r3, [r3, #22]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d00a      	beq.n	80094bc <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80094a6:	7b7b      	ldrb	r3, [r7, #13]
 80094a8:	2b80      	cmp	r3, #128	@ 0x80
 80094aa:	d103      	bne.n	80094b4 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2203      	movs	r2, #3
 80094b0:	761a      	strb	r2, [r3, #24]
 80094b2:	e00d      	b.n	80094d0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2205      	movs	r2, #5
 80094b8:	761a      	strb	r2, [r3, #24]
 80094ba:	e009      	b.n	80094d0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 80094bc:	7b7b      	ldrb	r3, [r7, #13]
 80094be:	2b80      	cmp	r3, #128	@ 0x80
 80094c0:	d103      	bne.n	80094ca <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2209      	movs	r2, #9
 80094c6:	761a      	strb	r2, [r3, #24]
 80094c8:	e002      	b.n	80094d0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2207      	movs	r2, #7
 80094ce:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2203      	movs	r2, #3
 80094d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80094e4:	2300      	movs	r3, #0
 80094e6:	2200      	movs	r2, #0
 80094e8:	f006 fa22 	bl	800f930 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80094ec:	e1cb      	b.n	8009886 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	2b04      	cmp	r3, #4
 80094f2:	d003      	beq.n	80094fc <USBH_HandleControl+0xe8>
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	2b02      	cmp	r3, #2
 80094f8:	f040 81c5 	bne.w	8009886 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	220b      	movs	r2, #11
 8009500:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2203      	movs	r2, #3
 8009506:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009516:	2300      	movs	r3, #0
 8009518:	2200      	movs	r2, #0
 800951a:	f006 fa09 	bl	800f930 <osMessageQueuePut>
      break;
 800951e:	e1b2      	b.n	8009886 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009526:	b29a      	uxth	r2, r3
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6899      	ldr	r1, [r3, #8]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	899a      	ldrh	r2, [r3, #12]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	791b      	ldrb	r3, [r3, #4]
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f9f2 	bl	8009922 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2204      	movs	r2, #4
 8009542:	761a      	strb	r2, [r3, #24]
      break;
 8009544:	e1a8      	b.n	8009898 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	791b      	ldrb	r3, [r3, #4]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f009 fd91 	bl	8013074 <USBH_LL_GetURBState>
 8009552:	4603      	mov	r3, r0
 8009554:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009556:	7bbb      	ldrb	r3, [r7, #14]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d110      	bne.n	800957e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2209      	movs	r2, #9
 8009560:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2203      	movs	r2, #3
 8009566:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009576:	2300      	movs	r3, #0
 8009578:	2200      	movs	r2, #0
 800957a:	f006 f9d9 	bl	800f930 <osMessageQueuePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800957e:	7bbb      	ldrb	r3, [r7, #14]
 8009580:	2b05      	cmp	r3, #5
 8009582:	d110      	bne.n	80095a6 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009584:	2303      	movs	r3, #3
 8009586:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2203      	movs	r2, #3
 800958c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800959c:	2300      	movs	r3, #0
 800959e:	2200      	movs	r2, #0
 80095a0:	f006 f9c6 	bl	800f930 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80095a4:	e171      	b.n	800988a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 80095a6:	7bbb      	ldrb	r3, [r7, #14]
 80095a8:	2b04      	cmp	r3, #4
 80095aa:	f040 816e 	bne.w	800988a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	220b      	movs	r2, #11
 80095b2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2203      	movs	r2, #3
 80095b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80095c8:	2300      	movs	r3, #0
 80095ca:	2200      	movs	r2, #0
 80095cc:	f006 f9b0 	bl	800f930 <osMessageQueuePut>
      break;
 80095d0:	e15b      	b.n	800988a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6899      	ldr	r1, [r3, #8]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	899a      	ldrh	r2, [r3, #12]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	795b      	ldrb	r3, [r3, #5]
 80095de:	2001      	movs	r0, #1
 80095e0:	9000      	str	r0, [sp, #0]
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f000 f978 	bl	80098d8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2206      	movs	r2, #6
 80095f8:	761a      	strb	r2, [r3, #24]
      break;
 80095fa:	e14d      	b.n	8009898 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	795b      	ldrb	r3, [r3, #5]
 8009600:	4619      	mov	r1, r3
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f009 fd36 	bl	8013074 <USBH_LL_GetURBState>
 8009608:	4603      	mov	r3, r0
 800960a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800960c:	7bbb      	ldrb	r3, [r7, #14]
 800960e:	2b01      	cmp	r3, #1
 8009610:	d111      	bne.n	8009636 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2207      	movs	r2, #7
 8009616:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2203      	movs	r2, #3
 800961c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800962c:	2300      	movs	r3, #0
 800962e:	2200      	movs	r2, #0
 8009630:	f006 f97e 	bl	800f930 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009634:	e12b      	b.n	800988e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009636:	7bbb      	ldrb	r3, [r7, #14]
 8009638:	2b05      	cmp	r3, #5
 800963a:	d113      	bne.n	8009664 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	220c      	movs	r2, #12
 8009640:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009642:	2303      	movs	r3, #3
 8009644:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2203      	movs	r2, #3
 800964a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800965a:	2300      	movs	r3, #0
 800965c:	2200      	movs	r2, #0
 800965e:	f006 f967 	bl	800f930 <osMessageQueuePut>
      break;
 8009662:	e114      	b.n	800988e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009664:	7bbb      	ldrb	r3, [r7, #14]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d111      	bne.n	800968e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2205      	movs	r2, #5
 800966e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2203      	movs	r2, #3
 8009674:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009684:	2300      	movs	r3, #0
 8009686:	2200      	movs	r2, #0
 8009688:	f006 f952 	bl	800f930 <osMessageQueuePut>
      break;
 800968c:	e0ff      	b.n	800988e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800968e:	7bbb      	ldrb	r3, [r7, #14]
 8009690:	2b04      	cmp	r3, #4
 8009692:	f040 80fc 	bne.w	800988e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	220b      	movs	r2, #11
 800969a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800969c:	2302      	movs	r3, #2
 800969e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2203      	movs	r2, #3
 80096a4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80096b4:	2300      	movs	r3, #0
 80096b6:	2200      	movs	r2, #0
 80096b8:	f006 f93a 	bl	800f930 <osMessageQueuePut>
      break;
 80096bc:	e0e7      	b.n	800988e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	791b      	ldrb	r3, [r3, #4]
 80096c2:	2200      	movs	r2, #0
 80096c4:	2100      	movs	r1, #0
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f000 f92b 	bl	8009922 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80096d2:	b29a      	uxth	r2, r3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2208      	movs	r2, #8
 80096dc:	761a      	strb	r2, [r3, #24]

      break;
 80096de:	e0db      	b.n	8009898 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	791b      	ldrb	r3, [r3, #4]
 80096e4:	4619      	mov	r1, r3
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f009 fcc4 	bl	8013074 <USBH_LL_GetURBState>
 80096ec:	4603      	mov	r3, r0
 80096ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80096f0:	7bbb      	ldrb	r3, [r7, #14]
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	d113      	bne.n	800971e <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	220d      	movs	r2, #13
 80096fa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2203      	movs	r2, #3
 8009704:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009714:	2300      	movs	r3, #0
 8009716:	2200      	movs	r2, #0
 8009718:	f006 f90a 	bl	800f930 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800971c:	e0b9      	b.n	8009892 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800971e:	7bbb      	ldrb	r3, [r7, #14]
 8009720:	2b04      	cmp	r3, #4
 8009722:	d111      	bne.n	8009748 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	220b      	movs	r2, #11
 8009728:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2203      	movs	r2, #3
 800972e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 800973e:	2300      	movs	r3, #0
 8009740:	2200      	movs	r2, #0
 8009742:	f006 f8f5 	bl	800f930 <osMessageQueuePut>
      break;
 8009746:	e0a4      	b.n	8009892 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 8009748:	7bbb      	ldrb	r3, [r7, #14]
 800974a:	2b05      	cmp	r3, #5
 800974c:	f040 80a1 	bne.w	8009892 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 8009750:	2303      	movs	r3, #3
 8009752:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2203      	movs	r2, #3
 8009758:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009768:	2300      	movs	r3, #0
 800976a:	2200      	movs	r2, #0
 800976c:	f006 f8e0 	bl	800f930 <osMessageQueuePut>
      break;
 8009770:	e08f      	b.n	8009892 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	795b      	ldrb	r3, [r3, #5]
 8009776:	2201      	movs	r2, #1
 8009778:	9200      	str	r2, [sp, #0]
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	6878      	ldr	r0, [r7, #4]
 8009780:	f000 f8aa 	bl	80098d8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800978a:	b29a      	uxth	r2, r3
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	220a      	movs	r2, #10
 8009794:	761a      	strb	r2, [r3, #24]
      break;
 8009796:	e07f      	b.n	8009898 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	795b      	ldrb	r3, [r3, #5]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f009 fc68 	bl	8013074 <USBH_LL_GetURBState>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d113      	bne.n	80097d6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 80097ae:	2300      	movs	r3, #0
 80097b0:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	220d      	movs	r2, #13
 80097b6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2203      	movs	r2, #3
 80097bc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80097cc:	2300      	movs	r3, #0
 80097ce:	2200      	movs	r2, #0
 80097d0:	f006 f8ae 	bl	800f930 <osMessageQueuePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80097d4:	e05f      	b.n	8009896 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	2b02      	cmp	r3, #2
 80097da:	d111      	bne.n	8009800 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2209      	movs	r2, #9
 80097e0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2203      	movs	r2, #3
 80097e6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 80097f6:	2300      	movs	r3, #0
 80097f8:	2200      	movs	r2, #0
 80097fa:	f006 f899 	bl	800f930 <osMessageQueuePut>
      break;
 80097fe:	e04a      	b.n	8009896 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 8009800:	7bbb      	ldrb	r3, [r7, #14]
 8009802:	2b04      	cmp	r3, #4
 8009804:	d147      	bne.n	8009896 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	220b      	movs	r2, #11
 800980a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2203      	movs	r2, #3
 8009810:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f503 7178 	add.w	r1, r3, #992	@ 0x3e0
 8009820:	2300      	movs	r3, #0
 8009822:	2200      	movs	r2, #0
 8009824:	f006 f884 	bl	800f930 <osMessageQueuePut>
      break;
 8009828:	e035      	b.n	8009896 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	7e5b      	ldrb	r3, [r3, #25]
 800982e:	3301      	adds	r3, #1
 8009830:	b2da      	uxtb	r2, r3
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	765a      	strb	r2, [r3, #25]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7e5b      	ldrb	r3, [r3, #25]
 800983a:	2b02      	cmp	r3, #2
 800983c:	d806      	bhi.n	800984c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800984a:	e025      	b.n	8009898 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009852:	2106      	movs	r1, #6
 8009854:	6878      	ldr	r0, [r7, #4]
 8009856:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	795b      	ldrb	r3, [r3, #5]
 8009862:	4619      	mov	r1, r3
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f000 f90d 	bl	8009a84 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	791b      	ldrb	r3, [r3, #4]
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f000 f907 	bl	8009a84 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2200      	movs	r2, #0
 800987a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800987c:	2302      	movs	r3, #2
 800987e:	73fb      	strb	r3, [r7, #15]
      break;
 8009880:	e00a      	b.n	8009898 <USBH_HandleControl+0x484>

    default:
      break;
 8009882:	bf00      	nop
 8009884:	e008      	b.n	8009898 <USBH_HandleControl+0x484>
      break;
 8009886:	bf00      	nop
 8009888:	e006      	b.n	8009898 <USBH_HandleControl+0x484>
      break;
 800988a:	bf00      	nop
 800988c:	e004      	b.n	8009898 <USBH_HandleControl+0x484>
      break;
 800988e:	bf00      	nop
 8009890:	e002      	b.n	8009898 <USBH_HandleControl+0x484>
      break;
 8009892:	bf00      	nop
 8009894:	e000      	b.n	8009898 <USBH_HandleControl+0x484>
      break;
 8009896:	bf00      	nop
  }

  return status;
 8009898:	7bfb      	ldrb	r3, [r7, #15]
}
 800989a:	4618      	mov	r0, r3
 800989c:	3710      	adds	r7, #16
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop

080098a4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af04      	add	r7, sp, #16
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	4613      	mov	r3, r2
 80098b0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098b2:	79f9      	ldrb	r1, [r7, #7]
 80098b4:	2300      	movs	r3, #0
 80098b6:	9303      	str	r3, [sp, #12]
 80098b8:	2308      	movs	r3, #8
 80098ba:	9302      	str	r3, [sp, #8]
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	9301      	str	r3, [sp, #4]
 80098c0:	2300      	movs	r3, #0
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2300      	movs	r3, #0
 80098c6:	2200      	movs	r2, #0
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	f009 fba2 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80098ce:	2300      	movs	r3, #0
}
 80098d0:	4618      	mov	r0, r3
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}

080098d8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b088      	sub	sp, #32
 80098dc:	af04      	add	r7, sp, #16
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4611      	mov	r1, r2
 80098e4:	461a      	mov	r2, r3
 80098e6:	460b      	mov	r3, r1
 80098e8:	80fb      	strh	r3, [r7, #6]
 80098ea:	4613      	mov	r3, r2
 80098ec:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80098fc:	7979      	ldrb	r1, [r7, #5]
 80098fe:	7e3b      	ldrb	r3, [r7, #24]
 8009900:	9303      	str	r3, [sp, #12]
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	9302      	str	r3, [sp, #8]
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	9301      	str	r3, [sp, #4]
 800990a:	2301      	movs	r3, #1
 800990c:	9300      	str	r3, [sp, #0]
 800990e:	2300      	movs	r3, #0
 8009910:	2200      	movs	r2, #0
 8009912:	68f8      	ldr	r0, [r7, #12]
 8009914:	f009 fb7d 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009918:	2300      	movs	r3, #0
}
 800991a:	4618      	mov	r0, r3
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b088      	sub	sp, #32
 8009926:	af04      	add	r7, sp, #16
 8009928:	60f8      	str	r0, [r7, #12]
 800992a:	60b9      	str	r1, [r7, #8]
 800992c:	4611      	mov	r1, r2
 800992e:	461a      	mov	r2, r3
 8009930:	460b      	mov	r3, r1
 8009932:	80fb      	strh	r3, [r7, #6]
 8009934:	4613      	mov	r3, r2
 8009936:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009938:	7979      	ldrb	r1, [r7, #5]
 800993a:	2300      	movs	r3, #0
 800993c:	9303      	str	r3, [sp, #12]
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	9302      	str	r3, [sp, #8]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	9301      	str	r3, [sp, #4]
 8009946:	2301      	movs	r3, #1
 8009948:	9300      	str	r3, [sp, #0]
 800994a:	2300      	movs	r3, #0
 800994c:	2201      	movs	r2, #1
 800994e:	68f8      	ldr	r0, [r7, #12]
 8009950:	f009 fb5f 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009954:	2300      	movs	r3, #0

}
 8009956:	4618      	mov	r0, r3
 8009958:	3710      	adds	r7, #16
 800995a:	46bd      	mov	sp, r7
 800995c:	bd80      	pop	{r7, pc}

0800995e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800995e:	b580      	push	{r7, lr}
 8009960:	b088      	sub	sp, #32
 8009962:	af04      	add	r7, sp, #16
 8009964:	60f8      	str	r0, [r7, #12]
 8009966:	60b9      	str	r1, [r7, #8]
 8009968:	4611      	mov	r1, r2
 800996a:	461a      	mov	r2, r3
 800996c:	460b      	mov	r3, r1
 800996e:	80fb      	strh	r3, [r7, #6]
 8009970:	4613      	mov	r3, r2
 8009972:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800997a:	2b00      	cmp	r3, #0
 800997c:	d001      	beq.n	8009982 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009982:	7979      	ldrb	r1, [r7, #5]
 8009984:	7e3b      	ldrb	r3, [r7, #24]
 8009986:	9303      	str	r3, [sp, #12]
 8009988:	88fb      	ldrh	r3, [r7, #6]
 800998a:	9302      	str	r3, [sp, #8]
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	9301      	str	r3, [sp, #4]
 8009990:	2301      	movs	r3, #1
 8009992:	9300      	str	r3, [sp, #0]
 8009994:	2302      	movs	r3, #2
 8009996:	2200      	movs	r2, #0
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f009 fb3a 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800999e:	2300      	movs	r3, #0
}
 80099a0:	4618      	mov	r0, r3
 80099a2:	3710      	adds	r7, #16
 80099a4:	46bd      	mov	sp, r7
 80099a6:	bd80      	pop	{r7, pc}

080099a8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b088      	sub	sp, #32
 80099ac:	af04      	add	r7, sp, #16
 80099ae:	60f8      	str	r0, [r7, #12]
 80099b0:	60b9      	str	r1, [r7, #8]
 80099b2:	4611      	mov	r1, r2
 80099b4:	461a      	mov	r2, r3
 80099b6:	460b      	mov	r3, r1
 80099b8:	80fb      	strh	r3, [r7, #6]
 80099ba:	4613      	mov	r3, r2
 80099bc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80099be:	7979      	ldrb	r1, [r7, #5]
 80099c0:	2300      	movs	r3, #0
 80099c2:	9303      	str	r3, [sp, #12]
 80099c4:	88fb      	ldrh	r3, [r7, #6]
 80099c6:	9302      	str	r3, [sp, #8]
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	9301      	str	r3, [sp, #4]
 80099cc:	2301      	movs	r3, #1
 80099ce:	9300      	str	r3, [sp, #0]
 80099d0:	2302      	movs	r3, #2
 80099d2:	2201      	movs	r2, #1
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f009 fb1c 	bl	8013012 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af04      	add	r7, sp, #16
 80099ea:	6078      	str	r0, [r7, #4]
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	461a      	mov	r2, r3
 80099f2:	4603      	mov	r3, r0
 80099f4:	70fb      	strb	r3, [r7, #3]
 80099f6:	460b      	mov	r3, r1
 80099f8:	70bb      	strb	r3, [r7, #2]
 80099fa:	4613      	mov	r3, r2
 80099fc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 80099fe:	7878      	ldrb	r0, [r7, #1]
 8009a00:	78ba      	ldrb	r2, [r7, #2]
 8009a02:	78f9      	ldrb	r1, [r7, #3]
 8009a04:	8b3b      	ldrh	r3, [r7, #24]
 8009a06:	9302      	str	r3, [sp, #8]
 8009a08:	7d3b      	ldrb	r3, [r7, #20]
 8009a0a:	9301      	str	r3, [sp, #4]
 8009a0c:	7c3b      	ldrb	r3, [r7, #16]
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	4603      	mov	r3, r0
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f009 faaf 	bl	8012f76 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3708      	adds	r7, #8
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}

08009a22 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009a22:	b580      	push	{r7, lr}
 8009a24:	b082      	sub	sp, #8
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	6078      	str	r0, [r7, #4]
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009a2e:	78fb      	ldrb	r3, [r7, #3]
 8009a30:	4619      	mov	r1, r3
 8009a32:	6878      	ldr	r0, [r7, #4]
 8009a34:	f009 face 	bl	8012fd4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009a38:	2300      	movs	r3, #0
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3708      	adds	r7, #8
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}

08009a42 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009a42:	b580      	push	{r7, lr}
 8009a44:	b084      	sub	sp, #16
 8009a46:	af00      	add	r7, sp, #0
 8009a48:	6078      	str	r0, [r7, #4]
 8009a4a:	460b      	mov	r3, r1
 8009a4c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f836 	bl	8009ac0 <USBH_GetFreePipe>
 8009a54:	4603      	mov	r3, r0
 8009a56:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009a58:	89fb      	ldrh	r3, [r7, #14]
 8009a5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d00a      	beq.n	8009a78 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009a62:	78fa      	ldrb	r2, [r7, #3]
 8009a64:	89fb      	ldrh	r3, [r7, #14]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a6e:	6879      	ldr	r1, [r7, #4]
 8009a70:	33e0      	adds	r3, #224	@ 0xe0
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009a78:	89fb      	ldrh	r3, [r7, #14]
 8009a7a:	b2db      	uxtb	r3, r3
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	3710      	adds	r7, #16
 8009a80:	46bd      	mov	sp, r7
 8009a82:	bd80      	pop	{r7, pc}

08009a84 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b083      	sub	sp, #12
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	6078      	str	r0, [r7, #4]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009a90:	78fb      	ldrb	r3, [r7, #3]
 8009a92:	2b0f      	cmp	r3, #15
 8009a94:	d80d      	bhi.n	8009ab2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009a96:	78fb      	ldrb	r3, [r7, #3]
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	33e0      	adds	r3, #224	@ 0xe0
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4413      	add	r3, r2
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	78fb      	ldrb	r3, [r7, #3]
 8009aa4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009aa8:	6879      	ldr	r1, [r7, #4]
 8009aaa:	33e0      	adds	r3, #224	@ 0xe0
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	440b      	add	r3, r1
 8009ab0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009ab2:	2300      	movs	r3, #0
}
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b085      	sub	sp, #20
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009acc:	2300      	movs	r3, #0
 8009ace:	73fb      	strb	r3, [r7, #15]
 8009ad0:	e00f      	b.n	8009af2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	33e0      	adds	r3, #224	@ 0xe0
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	4413      	add	r3, r2
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	e007      	b.n	8009afc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009aec:	7bfb      	ldrb	r3, [r7, #15]
 8009aee:	3301      	adds	r3, #1
 8009af0:	73fb      	strb	r3, [r7, #15]
 8009af2:	7bfb      	ldrb	r3, [r7, #15]
 8009af4:	2b0f      	cmp	r3, #15
 8009af6:	d9ec      	bls.n	8009ad2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	4603      	mov	r3, r0
 8009b10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009b12:	79fb      	ldrb	r3, [r7, #7]
 8009b14:	4a08      	ldr	r2, [pc, #32]	@ (8009b38 <disk_status+0x30>)
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	79fa      	ldrb	r2, [r7, #7]
 8009b20:	4905      	ldr	r1, [pc, #20]	@ (8009b38 <disk_status+0x30>)
 8009b22:	440a      	add	r2, r1
 8009b24:	7a12      	ldrb	r2, [r2, #8]
 8009b26:	4610      	mov	r0, r2
 8009b28:	4798      	blx	r3
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}
 8009b38:	2000231c 	.word	0x2000231c

08009b3c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	4603      	mov	r3, r0
 8009b44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b46:	2300      	movs	r3, #0
 8009b48:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b4a:	79fb      	ldrb	r3, [r7, #7]
 8009b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8009b88 <disk_initialize+0x4c>)
 8009b4e:	5cd3      	ldrb	r3, [r2, r3]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d114      	bne.n	8009b7e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b54:	79fb      	ldrb	r3, [r7, #7]
 8009b56:	4a0c      	ldr	r2, [pc, #48]	@ (8009b88 <disk_initialize+0x4c>)
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	4413      	add	r3, r2
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	79fa      	ldrb	r2, [r7, #7]
 8009b62:	4909      	ldr	r1, [pc, #36]	@ (8009b88 <disk_initialize+0x4c>)
 8009b64:	440a      	add	r2, r1
 8009b66:	7a12      	ldrb	r2, [r2, #8]
 8009b68:	4610      	mov	r0, r2
 8009b6a:	4798      	blx	r3
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d103      	bne.n	8009b7e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009b76:	79fb      	ldrb	r3, [r7, #7]
 8009b78:	4a03      	ldr	r2, [pc, #12]	@ (8009b88 <disk_initialize+0x4c>)
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	2000231c 	.word	0x2000231c

08009b8c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b8c:	b590      	push	{r4, r7, lr}
 8009b8e:	b087      	sub	sp, #28
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60b9      	str	r1, [r7, #8]
 8009b94:	607a      	str	r2, [r7, #4]
 8009b96:	603b      	str	r3, [r7, #0]
 8009b98:	4603      	mov	r3, r0
 8009b9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b9c:	7bfb      	ldrb	r3, [r7, #15]
 8009b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8009bc8 <disk_read+0x3c>)
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	4413      	add	r3, r2
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	689c      	ldr	r4, [r3, #8]
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4a07      	ldr	r2, [pc, #28]	@ (8009bc8 <disk_read+0x3c>)
 8009bac:	4413      	add	r3, r2
 8009bae:	7a18      	ldrb	r0, [r3, #8]
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	68b9      	ldr	r1, [r7, #8]
 8009bb6:	47a0      	blx	r4
 8009bb8:	4603      	mov	r3, r0
 8009bba:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	371c      	adds	r7, #28
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd90      	pop	{r4, r7, pc}
 8009bc6:	bf00      	nop
 8009bc8:	2000231c 	.word	0x2000231c

08009bcc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009bcc:	b590      	push	{r4, r7, lr}
 8009bce:	b087      	sub	sp, #28
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	60b9      	str	r1, [r7, #8]
 8009bd4:	607a      	str	r2, [r7, #4]
 8009bd6:	603b      	str	r3, [r7, #0]
 8009bd8:	4603      	mov	r3, r0
 8009bda:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	4a0a      	ldr	r2, [pc, #40]	@ (8009c08 <disk_write+0x3c>)
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	4413      	add	r3, r2
 8009be4:	685b      	ldr	r3, [r3, #4]
 8009be6:	68dc      	ldr	r4, [r3, #12]
 8009be8:	7bfb      	ldrb	r3, [r7, #15]
 8009bea:	4a07      	ldr	r2, [pc, #28]	@ (8009c08 <disk_write+0x3c>)
 8009bec:	4413      	add	r3, r2
 8009bee:	7a18      	ldrb	r0, [r3, #8]
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	687a      	ldr	r2, [r7, #4]
 8009bf4:	68b9      	ldr	r1, [r7, #8]
 8009bf6:	47a0      	blx	r4
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	371c      	adds	r7, #28
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd90      	pop	{r4, r7, pc}
 8009c06:	bf00      	nop
 8009c08:	2000231c 	.word	0x2000231c

08009c0c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b084      	sub	sp, #16
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	4603      	mov	r3, r0
 8009c14:	603a      	str	r2, [r7, #0]
 8009c16:	71fb      	strb	r3, [r7, #7]
 8009c18:	460b      	mov	r3, r1
 8009c1a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009c1c:	79fb      	ldrb	r3, [r7, #7]
 8009c1e:	4a09      	ldr	r2, [pc, #36]	@ (8009c44 <disk_ioctl+0x38>)
 8009c20:	009b      	lsls	r3, r3, #2
 8009c22:	4413      	add	r3, r2
 8009c24:	685b      	ldr	r3, [r3, #4]
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	79fa      	ldrb	r2, [r7, #7]
 8009c2a:	4906      	ldr	r1, [pc, #24]	@ (8009c44 <disk_ioctl+0x38>)
 8009c2c:	440a      	add	r2, r1
 8009c2e:	7a10      	ldrb	r0, [r2, #8]
 8009c30:	79b9      	ldrb	r1, [r7, #6]
 8009c32:	683a      	ldr	r2, [r7, #0]
 8009c34:	4798      	blx	r3
 8009c36:	4603      	mov	r3, r0
 8009c38:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}
 8009c44:	2000231c 	.word	0x2000231c

08009c48 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c48:	b480      	push	{r7}
 8009c4a:	b085      	sub	sp, #20
 8009c4c:	af00      	add	r7, sp, #0
 8009c4e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	3301      	adds	r3, #1
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c58:	89fb      	ldrh	r3, [r7, #14]
 8009c5a:	021b      	lsls	r3, r3, #8
 8009c5c:	b21a      	sxth	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	b21b      	sxth	r3, r3
 8009c64:	4313      	orrs	r3, r2
 8009c66:	b21b      	sxth	r3, r3
 8009c68:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c6a:	89fb      	ldrh	r3, [r7, #14]
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3714      	adds	r7, #20
 8009c70:	46bd      	mov	sp, r7
 8009c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c76:	4770      	bx	lr

08009c78 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b085      	sub	sp, #20
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	3303      	adds	r3, #3
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	021b      	lsls	r3, r3, #8
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	3202      	adds	r2, #2
 8009c90:	7812      	ldrb	r2, [r2, #0]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	3201      	adds	r2, #1
 8009c9e:	7812      	ldrb	r2, [r2, #0]
 8009ca0:	4313      	orrs	r3, r2
 8009ca2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	60fb      	str	r3, [r7, #12]
	return rv;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	3714      	adds	r7, #20
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr

08009cbe <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009cbe:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009cc2:	b09d      	sub	sp, #116	@ 0x74
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8009cc8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cca:	3307      	adds	r3, #7
 8009ccc:	781b      	ldrb	r3, [r3, #0]
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	469a      	mov	sl, r3
 8009cd4:	4693      	mov	fp, r2
 8009cd6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8009cda:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009cde:	f04f 0000 	mov.w	r0, #0
 8009ce2:	f04f 0100 	mov.w	r1, #0
 8009ce6:	0219      	lsls	r1, r3, #8
 8009ce8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009cec:	0210      	lsls	r0, r2, #8
 8009cee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009cf0:	3306      	adds	r3, #6
 8009cf2:	781b      	ldrb	r3, [r3, #0]
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	461c      	mov	r4, r3
 8009cfa:	4615      	mov	r5, r2
 8009cfc:	ea40 0804 	orr.w	r8, r0, r4
 8009d00:	ea41 0905 	orr.w	r9, r1, r5
 8009d04:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8009d08:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009d0c:	f04f 0000 	mov.w	r0, #0
 8009d10:	f04f 0100 	mov.w	r1, #0
 8009d14:	0219      	lsls	r1, r3, #8
 8009d16:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d1a:	0210      	lsls	r0, r2, #8
 8009d1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d1e:	3305      	adds	r3, #5
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2200      	movs	r2, #0
 8009d26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d28:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8009d2a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8009d2e:	4623      	mov	r3, r4
 8009d30:	4303      	orrs	r3, r0
 8009d32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d34:	462b      	mov	r3, r5
 8009d36:	430b      	orrs	r3, r1
 8009d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d3a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8009d3e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8009d42:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009d46:	f04f 0000 	mov.w	r0, #0
 8009d4a:	f04f 0100 	mov.w	r1, #0
 8009d4e:	0219      	lsls	r1, r3, #8
 8009d50:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d54:	0210      	lsls	r0, r2, #8
 8009d56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d58:	3304      	adds	r3, #4
 8009d5a:	781b      	ldrb	r3, [r3, #0]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2200      	movs	r2, #0
 8009d60:	653b      	str	r3, [r7, #80]	@ 0x50
 8009d62:	657a      	str	r2, [r7, #84]	@ 0x54
 8009d64:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8009d68:	4623      	mov	r3, r4
 8009d6a:	4303      	orrs	r3, r0
 8009d6c:	623b      	str	r3, [r7, #32]
 8009d6e:	462b      	mov	r3, r5
 8009d70:	430b      	orrs	r3, r1
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d74:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009d78:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8009d7c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009d80:	f04f 0000 	mov.w	r0, #0
 8009d84:	f04f 0100 	mov.w	r1, #0
 8009d88:	0219      	lsls	r1, r3, #8
 8009d8a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009d8e:	0210      	lsls	r0, r2, #8
 8009d90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d92:	3303      	adds	r3, #3
 8009d94:	781b      	ldrb	r3, [r3, #0]
 8009d96:	b2db      	uxtb	r3, r3
 8009d98:	2200      	movs	r2, #0
 8009d9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009d9c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009d9e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8009da2:	4623      	mov	r3, r4
 8009da4:	4303      	orrs	r3, r0
 8009da6:	61bb      	str	r3, [r7, #24]
 8009da8:	462b      	mov	r3, r5
 8009daa:	430b      	orrs	r3, r1
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009db2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8009db6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009dba:	f04f 0000 	mov.w	r0, #0
 8009dbe:	f04f 0100 	mov.w	r1, #0
 8009dc2:	0219      	lsls	r1, r3, #8
 8009dc4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009dc8:	0210      	lsls	r0, r2, #8
 8009dca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009dcc:	3302      	adds	r3, #2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	643b      	str	r3, [r7, #64]	@ 0x40
 8009dd6:	647a      	str	r2, [r7, #68]	@ 0x44
 8009dd8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8009ddc:	4623      	mov	r3, r4
 8009dde:	4303      	orrs	r3, r0
 8009de0:	613b      	str	r3, [r7, #16]
 8009de2:	462b      	mov	r3, r5
 8009de4:	430b      	orrs	r3, r1
 8009de6:	617b      	str	r3, [r7, #20]
 8009de8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009dec:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8009df0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009df4:	f04f 0200 	mov.w	r2, #0
 8009df8:	f04f 0300 	mov.w	r3, #0
 8009dfc:	020b      	lsls	r3, r1, #8
 8009dfe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e02:	0202      	lsls	r2, r0, #8
 8009e04:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009e06:	3101      	adds	r1, #1
 8009e08:	7809      	ldrb	r1, [r1, #0]
 8009e0a:	b2c9      	uxtb	r1, r1
 8009e0c:	2000      	movs	r0, #0
 8009e0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009e10:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8009e12:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8009e16:	4621      	mov	r1, r4
 8009e18:	4311      	orrs	r1, r2
 8009e1a:	60b9      	str	r1, [r7, #8]
 8009e1c:	4629      	mov	r1, r5
 8009e1e:	4319      	orrs	r1, r3
 8009e20:	60f9      	str	r1, [r7, #12]
 8009e22:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009e26:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8009e2a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009e2e:	f04f 0200 	mov.w	r2, #0
 8009e32:	f04f 0300 	mov.w	r3, #0
 8009e36:	020b      	lsls	r3, r1, #8
 8009e38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009e3c:	0202      	lsls	r2, r0, #8
 8009e3e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009e40:	7809      	ldrb	r1, [r1, #0]
 8009e42:	b2c9      	uxtb	r1, r1
 8009e44:	2000      	movs	r0, #0
 8009e46:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e48:	6378      	str	r0, [r7, #52]	@ 0x34
 8009e4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8009e4e:	4621      	mov	r1, r4
 8009e50:	4311      	orrs	r1, r2
 8009e52:	6039      	str	r1, [r7, #0]
 8009e54:	4629      	mov	r1, r5
 8009e56:	4319      	orrs	r1, r3
 8009e58:	6079      	str	r1, [r7, #4]
 8009e5a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009e5e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8009e62:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 8009e66:	4610      	mov	r0, r2
 8009e68:	4619      	mov	r1, r3
 8009e6a:	3774      	adds	r7, #116	@ 0x74
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009e72:	4770      	bx	lr

08009e74 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	607a      	str	r2, [r7, #4]
 8009e86:	887a      	ldrh	r2, [r7, #2]
 8009e88:	b2d2      	uxtb	r2, r2
 8009e8a:	701a      	strb	r2, [r3, #0]
 8009e8c:	887b      	ldrh	r3, [r7, #2]
 8009e8e:	0a1b      	lsrs	r3, r3, #8
 8009e90:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	1c5a      	adds	r2, r3, #1
 8009e96:	607a      	str	r2, [r7, #4]
 8009e98:	887a      	ldrh	r2, [r7, #2]
 8009e9a:	b2d2      	uxtb	r2, r2
 8009e9c:	701a      	strb	r2, [r3, #0]
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009eaa:	b480      	push	{r7}
 8009eac:	b083      	sub	sp, #12
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	607a      	str	r2, [r7, #4]
 8009eba:	683a      	ldr	r2, [r7, #0]
 8009ebc:	b2d2      	uxtb	r2, r2
 8009ebe:	701a      	strb	r2, [r3, #0]
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	0a1b      	lsrs	r3, r3, #8
 8009ec4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	1c5a      	adds	r2, r3, #1
 8009eca:	607a      	str	r2, [r7, #4]
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	b2d2      	uxtb	r2, r2
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	683b      	ldr	r3, [r7, #0]
 8009ed4:	0a1b      	lsrs	r3, r3, #8
 8009ed6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	607a      	str	r2, [r7, #4]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	b2d2      	uxtb	r2, r2
 8009ee2:	701a      	strb	r2, [r3, #0]
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	0a1b      	lsrs	r3, r3, #8
 8009ee8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	1c5a      	adds	r2, r3, #1
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	683a      	ldr	r2, [r7, #0]
 8009ef2:	b2d2      	uxtb	r2, r2
 8009ef4:	701a      	strb	r2, [r3, #0]
}
 8009ef6:	bf00      	nop
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8009f02:	b480      	push	{r7}
 8009f04:	b085      	sub	sp, #20
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	60f8      	str	r0, [r7, #12]
 8009f0a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1c5a      	adds	r2, r3, #1
 8009f12:	60fa      	str	r2, [r7, #12]
 8009f14:	783a      	ldrb	r2, [r7, #0]
 8009f16:	701a      	strb	r2, [r3, #0]
 8009f18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f1c:	f04f 0200 	mov.w	r2, #0
 8009f20:	f04f 0300 	mov.w	r3, #0
 8009f24:	0a02      	lsrs	r2, r0, #8
 8009f26:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f2a:	0a0b      	lsrs	r3, r1, #8
 8009f2c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	60fa      	str	r2, [r7, #12]
 8009f36:	783a      	ldrb	r2, [r7, #0]
 8009f38:	701a      	strb	r2, [r3, #0]
 8009f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f3e:	f04f 0200 	mov.w	r2, #0
 8009f42:	f04f 0300 	mov.w	r3, #0
 8009f46:	0a02      	lsrs	r2, r0, #8
 8009f48:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f4c:	0a0b      	lsrs	r3, r1, #8
 8009f4e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	1c5a      	adds	r2, r3, #1
 8009f56:	60fa      	str	r2, [r7, #12]
 8009f58:	783a      	ldrb	r2, [r7, #0]
 8009f5a:	701a      	strb	r2, [r3, #0]
 8009f5c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f60:	f04f 0200 	mov.w	r2, #0
 8009f64:	f04f 0300 	mov.w	r3, #0
 8009f68:	0a02      	lsrs	r2, r0, #8
 8009f6a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f6e:	0a0b      	lsrs	r3, r1, #8
 8009f70:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	1c5a      	adds	r2, r3, #1
 8009f78:	60fa      	str	r2, [r7, #12]
 8009f7a:	783a      	ldrb	r2, [r7, #0]
 8009f7c:	701a      	strb	r2, [r3, #0]
 8009f7e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009f82:	f04f 0200 	mov.w	r2, #0
 8009f86:	f04f 0300 	mov.w	r3, #0
 8009f8a:	0a02      	lsrs	r2, r0, #8
 8009f8c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009f90:	0a0b      	lsrs	r3, r1, #8
 8009f92:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	60fa      	str	r2, [r7, #12]
 8009f9c:	783a      	ldrb	r2, [r7, #0]
 8009f9e:	701a      	strb	r2, [r3, #0]
 8009fa0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fa4:	f04f 0200 	mov.w	r2, #0
 8009fa8:	f04f 0300 	mov.w	r3, #0
 8009fac:	0a02      	lsrs	r2, r0, #8
 8009fae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009fb2:	0a0b      	lsrs	r3, r1, #8
 8009fb4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	1c5a      	adds	r2, r3, #1
 8009fbc:	60fa      	str	r2, [r7, #12]
 8009fbe:	783a      	ldrb	r2, [r7, #0]
 8009fc0:	701a      	strb	r2, [r3, #0]
 8009fc2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fc6:	f04f 0200 	mov.w	r2, #0
 8009fca:	f04f 0300 	mov.w	r3, #0
 8009fce:	0a02      	lsrs	r2, r0, #8
 8009fd0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009fd4:	0a0b      	lsrs	r3, r1, #8
 8009fd6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	1c5a      	adds	r2, r3, #1
 8009fde:	60fa      	str	r2, [r7, #12]
 8009fe0:	783a      	ldrb	r2, [r7, #0]
 8009fe2:	701a      	strb	r2, [r3, #0]
 8009fe4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	0a02      	lsrs	r2, r0, #8
 8009ff2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009ff6:	0a0b      	lsrs	r3, r1, #8
 8009ff8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	1c5a      	adds	r2, r3, #1
 800a000:	60fa      	str	r2, [r7, #12]
 800a002:	783a      	ldrb	r2, [r7, #0]
 800a004:	701a      	strb	r2, [r3, #0]
}
 800a006:	bf00      	nop
 800a008:	3714      	adds	r7, #20
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr

0800a012 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a012:	b480      	push	{r7}
 800a014:	b087      	sub	sp, #28
 800a016:	af00      	add	r7, sp, #0
 800a018:	60f8      	str	r0, [r7, #12]
 800a01a:	60b9      	str	r1, [r7, #8]
 800a01c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d00d      	beq.n	800a048 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a02c:	693a      	ldr	r2, [r7, #16]
 800a02e:	1c53      	adds	r3, r2, #1
 800a030:	613b      	str	r3, [r7, #16]
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	1c59      	adds	r1, r3, #1
 800a036:	6179      	str	r1, [r7, #20]
 800a038:	7812      	ldrb	r2, [r2, #0]
 800a03a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	3b01      	subs	r3, #1
 800a040:	607b      	str	r3, [r7, #4]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d1f1      	bne.n	800a02c <mem_cpy+0x1a>
	}
}
 800a048:	bf00      	nop
 800a04a:	371c      	adds	r7, #28
 800a04c:	46bd      	mov	sp, r7
 800a04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a052:	4770      	bx	lr

0800a054 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a054:	b480      	push	{r7}
 800a056:	b087      	sub	sp, #28
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	1c5a      	adds	r2, r3, #1
 800a068:	617a      	str	r2, [r7, #20]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	b2d2      	uxtb	r2, r2
 800a06e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	3b01      	subs	r3, #1
 800a074:	607b      	str	r3, [r7, #4]
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d1f3      	bne.n	800a064 <mem_set+0x10>
}
 800a07c:	bf00      	nop
 800a07e:	bf00      	nop
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a08a:	b480      	push	{r7}
 800a08c:	b089      	sub	sp, #36	@ 0x24
 800a08e:	af00      	add	r7, sp, #0
 800a090:	60f8      	str	r0, [r7, #12]
 800a092:	60b9      	str	r1, [r7, #8]
 800a094:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	61fb      	str	r3, [r7, #28]
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a09e:	2300      	movs	r3, #0
 800a0a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a0a2:	69fb      	ldr	r3, [r7, #28]
 800a0a4:	1c5a      	adds	r2, r3, #1
 800a0a6:	61fa      	str	r2, [r7, #28]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	4619      	mov	r1, r3
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	1c5a      	adds	r2, r3, #1
 800a0b0:	61ba      	str	r2, [r7, #24]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	1acb      	subs	r3, r1, r3
 800a0b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	607b      	str	r3, [r7, #4]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d002      	beq.n	800a0ca <mem_cmp+0x40>
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d0eb      	beq.n	800a0a2 <mem_cmp+0x18>

	return r;
 800a0ca:	697b      	ldr	r3, [r7, #20]
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3724      	adds	r7, #36	@ 0x24
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d6:	4770      	bx	lr

0800a0d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a0e2:	e002      	b.n	800a0ea <chk_chr+0x12>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	3301      	adds	r3, #1
 800a0e8:	607b      	str	r3, [r7, #4]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	781b      	ldrb	r3, [r3, #0]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d005      	beq.n	800a0fe <chk_chr+0x26>
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	781b      	ldrb	r3, [r3, #0]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d1f2      	bne.n	800a0e4 <chk_chr+0xc>
	return *str;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	781b      	ldrb	r3, [r3, #0]
}
 800a102:	4618      	mov	r0, r3
 800a104:	370c      	adds	r7, #12
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d009      	beq.n	800a130 <lock_fs+0x22>
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	4618      	mov	r0, r3
 800a122:	f005 f90c 	bl	800f33e <ff_req_grant>
 800a126:	4603      	mov	r3, r0
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d001      	beq.n	800a130 <lock_fs+0x22>
 800a12c:	2301      	movs	r3, #1
 800a12e:	e000      	b.n	800a132 <lock_fs+0x24>
 800a130:	2300      	movs	r3, #0
}
 800a132:	4618      	mov	r0, r3
 800a134:	3708      	adds	r7, #8
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}

0800a13a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800a13a:	b580      	push	{r7, lr}
 800a13c:	b082      	sub	sp, #8
 800a13e:	af00      	add	r7, sp, #0
 800a140:	6078      	str	r0, [r7, #4]
 800a142:	460b      	mov	r3, r1
 800a144:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d00d      	beq.n	800a168 <unlock_fs+0x2e>
 800a14c:	78fb      	ldrb	r3, [r7, #3]
 800a14e:	2b0c      	cmp	r3, #12
 800a150:	d00a      	beq.n	800a168 <unlock_fs+0x2e>
 800a152:	78fb      	ldrb	r3, [r7, #3]
 800a154:	2b0b      	cmp	r3, #11
 800a156:	d007      	beq.n	800a168 <unlock_fs+0x2e>
 800a158:	78fb      	ldrb	r3, [r7, #3]
 800a15a:	2b0f      	cmp	r3, #15
 800a15c:	d004      	beq.n	800a168 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	699b      	ldr	r3, [r3, #24]
 800a162:	4618      	mov	r0, r3
 800a164:	f005 f900 	bl	800f368 <ff_rel_grant>
	}
}
 800a168:	bf00      	nop
 800a16a:	3708      	adds	r7, #8
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a17a:	2300      	movs	r3, #0
 800a17c:	60bb      	str	r3, [r7, #8]
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	60fb      	str	r3, [r7, #12]
 800a182:	e029      	b.n	800a1d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a184:	4a27      	ldr	r2, [pc, #156]	@ (800a224 <chk_lock+0xb4>)
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	011b      	lsls	r3, r3, #4
 800a18a:	4413      	add	r3, r2
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d01d      	beq.n	800a1ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a192:	4a24      	ldr	r2, [pc, #144]	@ (800a224 <chk_lock+0xb4>)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	011b      	lsls	r3, r3, #4
 800a198:	4413      	add	r3, r2
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d116      	bne.n	800a1d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a1a4:	4a1f      	ldr	r2, [pc, #124]	@ (800a224 <chk_lock+0xb4>)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	011b      	lsls	r3, r3, #4
 800a1aa:	4413      	add	r3, r2
 800a1ac:	3304      	adds	r3, #4
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d10c      	bne.n	800a1d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1b8:	4a1a      	ldr	r2, [pc, #104]	@ (800a224 <chk_lock+0xb4>)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	011b      	lsls	r3, r3, #4
 800a1be:	4413      	add	r3, r2
 800a1c0:	3308      	adds	r3, #8
 800a1c2:	681a      	ldr	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d102      	bne.n	800a1d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a1cc:	e007      	b.n	800a1de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a1ce:	2301      	movs	r3, #1
 800a1d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	3301      	adds	r3, #1
 800a1d6:	60fb      	str	r3, [r7, #12]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	d9d2      	bls.n	800a184 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b02      	cmp	r3, #2
 800a1e2:	d109      	bne.n	800a1f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d102      	bne.n	800a1f0 <chk_lock+0x80>
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	2b02      	cmp	r3, #2
 800a1ee:	d101      	bne.n	800a1f4 <chk_lock+0x84>
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	e010      	b.n	800a216 <chk_lock+0xa6>
 800a1f4:	2312      	movs	r3, #18
 800a1f6:	e00e      	b.n	800a216 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d108      	bne.n	800a210 <chk_lock+0xa0>
 800a1fe:	4a09      	ldr	r2, [pc, #36]	@ (800a224 <chk_lock+0xb4>)
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	011b      	lsls	r3, r3, #4
 800a204:	4413      	add	r3, r2
 800a206:	330c      	adds	r3, #12
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a20e:	d101      	bne.n	800a214 <chk_lock+0xa4>
 800a210:	2310      	movs	r3, #16
 800a212:	e000      	b.n	800a216 <chk_lock+0xa6>
 800a214:	2300      	movs	r3, #0
}
 800a216:	4618      	mov	r0, r3
 800a218:	3714      	adds	r7, #20
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	200022fc 	.word	0x200022fc

0800a228 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a228:	b480      	push	{r7}
 800a22a:	b083      	sub	sp, #12
 800a22c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a22e:	2300      	movs	r3, #0
 800a230:	607b      	str	r3, [r7, #4]
 800a232:	e002      	b.n	800a23a <enq_lock+0x12>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3301      	adds	r3, #1
 800a238:	607b      	str	r3, [r7, #4]
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d806      	bhi.n	800a24e <enq_lock+0x26>
 800a240:	4a09      	ldr	r2, [pc, #36]	@ (800a268 <enq_lock+0x40>)
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	011b      	lsls	r3, r3, #4
 800a246:	4413      	add	r3, r2
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d1f2      	bne.n	800a234 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2b02      	cmp	r3, #2
 800a252:	bf14      	ite	ne
 800a254:	2301      	movne	r3, #1
 800a256:	2300      	moveq	r3, #0
 800a258:	b2db      	uxtb	r3, r3
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	370c      	adds	r7, #12
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop
 800a268:	200022fc 	.word	0x200022fc

0800a26c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
 800a27a:	e01f      	b.n	800a2bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a27c:	4a41      	ldr	r2, [pc, #260]	@ (800a384 <inc_lock+0x118>)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	011b      	lsls	r3, r3, #4
 800a282:	4413      	add	r3, r2
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d113      	bne.n	800a2b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a28e:	4a3d      	ldr	r2, [pc, #244]	@ (800a384 <inc_lock+0x118>)
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	4413      	add	r3, r2
 800a296:	3304      	adds	r3, #4
 800a298:	681a      	ldr	r2, [r3, #0]
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d109      	bne.n	800a2b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a2a2:	4a38      	ldr	r2, [pc, #224]	@ (800a384 <inc_lock+0x118>)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	011b      	lsls	r3, r3, #4
 800a2a8:	4413      	add	r3, r2
 800a2aa:	3308      	adds	r3, #8
 800a2ac:	681a      	ldr	r2, [r3, #0]
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 800a2b2:	429a      	cmp	r2, r3
 800a2b4:	d006      	beq.n	800a2c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	3301      	adds	r3, #1
 800a2ba:	60fb      	str	r3, [r7, #12]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d9dc      	bls.n	800a27c <inc_lock+0x10>
 800a2c2:	e000      	b.n	800a2c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a2c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2b02      	cmp	r3, #2
 800a2ca:	d132      	bne.n	800a332 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	60fb      	str	r3, [r7, #12]
 800a2d0:	e002      	b.n	800a2d8 <inc_lock+0x6c>
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	3301      	adds	r3, #1
 800a2d6:	60fb      	str	r3, [r7, #12]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d806      	bhi.n	800a2ec <inc_lock+0x80>
 800a2de:	4a29      	ldr	r2, [pc, #164]	@ (800a384 <inc_lock+0x118>)
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	011b      	lsls	r3, r3, #4
 800a2e4:	4413      	add	r3, r2
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d1f2      	bne.n	800a2d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d101      	bne.n	800a2f6 <inc_lock+0x8a>
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	e040      	b.n	800a378 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681a      	ldr	r2, [r3, #0]
 800a2fa:	4922      	ldr	r1, [pc, #136]	@ (800a384 <inc_lock+0x118>)
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	011b      	lsls	r3, r3, #4
 800a300:	440b      	add	r3, r1
 800a302:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	689a      	ldr	r2, [r3, #8]
 800a308:	491e      	ldr	r1, [pc, #120]	@ (800a384 <inc_lock+0x118>)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	011b      	lsls	r3, r3, #4
 800a30e:	440b      	add	r3, r1
 800a310:	3304      	adds	r3, #4
 800a312:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a318:	491a      	ldr	r1, [pc, #104]	@ (800a384 <inc_lock+0x118>)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	011b      	lsls	r3, r3, #4
 800a31e:	440b      	add	r3, r1
 800a320:	3308      	adds	r3, #8
 800a322:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a324:	4a17      	ldr	r2, [pc, #92]	@ (800a384 <inc_lock+0x118>)
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	011b      	lsls	r3, r3, #4
 800a32a:	4413      	add	r3, r2
 800a32c:	330c      	adds	r3, #12
 800a32e:	2200      	movs	r2, #0
 800a330:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d009      	beq.n	800a34c <inc_lock+0xe0>
 800a338:	4a12      	ldr	r2, [pc, #72]	@ (800a384 <inc_lock+0x118>)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	011b      	lsls	r3, r3, #4
 800a33e:	4413      	add	r3, r2
 800a340:	330c      	adds	r3, #12
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d001      	beq.n	800a34c <inc_lock+0xe0>
 800a348:	2300      	movs	r3, #0
 800a34a:	e015      	b.n	800a378 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d108      	bne.n	800a364 <inc_lock+0xf8>
 800a352:	4a0c      	ldr	r2, [pc, #48]	@ (800a384 <inc_lock+0x118>)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	011b      	lsls	r3, r3, #4
 800a358:	4413      	add	r3, r2
 800a35a:	330c      	adds	r3, #12
 800a35c:	881b      	ldrh	r3, [r3, #0]
 800a35e:	3301      	adds	r3, #1
 800a360:	b29a      	uxth	r2, r3
 800a362:	e001      	b.n	800a368 <inc_lock+0xfc>
 800a364:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a368:	4906      	ldr	r1, [pc, #24]	@ (800a384 <inc_lock+0x118>)
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	011b      	lsls	r3, r3, #4
 800a36e:	440b      	add	r3, r1
 800a370:	330c      	adds	r3, #12
 800a372:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	3301      	adds	r3, #1
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	200022fc 	.word	0x200022fc

0800a388 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a388:	b480      	push	{r7}
 800a38a:	b085      	sub	sp, #20
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	3b01      	subs	r3, #1
 800a394:	607b      	str	r3, [r7, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d825      	bhi.n	800a3e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800a39c:	4a17      	ldr	r2, [pc, #92]	@ (800a3fc <dec_lock+0x74>)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	011b      	lsls	r3, r3, #4
 800a3a2:	4413      	add	r3, r2
 800a3a4:	330c      	adds	r3, #12
 800a3a6:	881b      	ldrh	r3, [r3, #0]
 800a3a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a3aa:	89fb      	ldrh	r3, [r7, #14]
 800a3ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3b0:	d101      	bne.n	800a3b6 <dec_lock+0x2e>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a3b6:	89fb      	ldrh	r3, [r7, #14]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d002      	beq.n	800a3c2 <dec_lock+0x3a>
 800a3bc:	89fb      	ldrh	r3, [r7, #14]
 800a3be:	3b01      	subs	r3, #1
 800a3c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a3c2:	4a0e      	ldr	r2, [pc, #56]	@ (800a3fc <dec_lock+0x74>)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	4413      	add	r3, r2
 800a3ca:	330c      	adds	r3, #12
 800a3cc:	89fa      	ldrh	r2, [r7, #14]
 800a3ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a3d0:	89fb      	ldrh	r3, [r7, #14]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d105      	bne.n	800a3e2 <dec_lock+0x5a>
 800a3d6:	4a09      	ldr	r2, [pc, #36]	@ (800a3fc <dec_lock+0x74>)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	4413      	add	r3, r2
 800a3de:	2200      	movs	r2, #0
 800a3e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	737b      	strb	r3, [r7, #13]
 800a3e6:	e001      	b.n	800a3ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a3ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	3714      	adds	r7, #20
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	200022fc 	.word	0x200022fc

0800a400 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a400:	b480      	push	{r7}
 800a402:	b085      	sub	sp, #20
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a408:	2300      	movs	r3, #0
 800a40a:	60fb      	str	r3, [r7, #12]
 800a40c:	e010      	b.n	800a430 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a40e:	4a0d      	ldr	r2, [pc, #52]	@ (800a444 <clear_lock+0x44>)
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	011b      	lsls	r3, r3, #4
 800a414:	4413      	add	r3, r2
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	687a      	ldr	r2, [r7, #4]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d105      	bne.n	800a42a <clear_lock+0x2a>
 800a41e:	4a09      	ldr	r2, [pc, #36]	@ (800a444 <clear_lock+0x44>)
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	011b      	lsls	r3, r3, #4
 800a424:	4413      	add	r3, r2
 800a426:	2200      	movs	r2, #0
 800a428:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	3301      	adds	r3, #1
 800a42e:	60fb      	str	r3, [r7, #12]
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b01      	cmp	r3, #1
 800a434:	d9eb      	bls.n	800a40e <clear_lock+0xe>
	}
}
 800a436:	bf00      	nop
 800a438:	bf00      	nop
 800a43a:	3714      	adds	r7, #20
 800a43c:	46bd      	mov	sp, r7
 800a43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a442:	4770      	bx	lr
 800a444:	200022fc 	.word	0x200022fc

0800a448 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b086      	sub	sp, #24
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a450:	2300      	movs	r3, #0
 800a452:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	78db      	ldrb	r3, [r3, #3]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d034      	beq.n	800a4c6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a460:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	7858      	ldrb	r0, [r3, #1]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a46c:	2301      	movs	r3, #1
 800a46e:	697a      	ldr	r2, [r7, #20]
 800a470:	f7ff fbac 	bl	8009bcc <disk_write>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d002      	beq.n	800a480 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	73fb      	strb	r3, [r7, #15]
 800a47e:	e022      	b.n	800a4c6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2200      	movs	r2, #0
 800a484:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	1ad2      	subs	r2, r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a492:	429a      	cmp	r2, r3
 800a494:	d217      	bcs.n	800a4c6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	789b      	ldrb	r3, [r3, #2]
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	e010      	b.n	800a4c0 <sync_window+0x78>
					wsect += fs->fsize;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4a2:	697a      	ldr	r2, [r7, #20]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	7858      	ldrb	r0, [r3, #1]
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	697a      	ldr	r2, [r7, #20]
 800a4b6:	f7ff fb89 	bl	8009bcc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	613b      	str	r3, [r7, #16]
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d8eb      	bhi.n	800a49e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	3718      	adds	r7, #24
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	bd80      	pop	{r7, pc}

0800a4d0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b084      	sub	sp, #16
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
 800a4d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d01b      	beq.n	800a520 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f7ff ffad 	bl	800a448 <sync_window>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a4f2:	7bfb      	ldrb	r3, [r7, #15]
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d113      	bne.n	800a520 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	7858      	ldrb	r0, [r3, #1]
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a502:	2301      	movs	r3, #1
 800a504:	683a      	ldr	r2, [r7, #0]
 800a506:	f7ff fb41 	bl	8009b8c <disk_read>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d004      	beq.n	800a51a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a510:	f04f 33ff 	mov.w	r3, #4294967295
 800a514:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	683a      	ldr	r2, [r7, #0]
 800a51e:	63da      	str	r2, [r3, #60]	@ 0x3c
		}
	}
	return res;
 800a520:	7bfb      	ldrb	r3, [r7, #15]
}
 800a522:	4618      	mov	r0, r3
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
	...

0800a52c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b084      	sub	sp, #16
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a534:	6878      	ldr	r0, [r7, #4]
 800a536:	f7ff ff87 	bl	800a448 <sync_window>
 800a53a:	4603      	mov	r3, r0
 800a53c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d159      	bne.n	800a5f8 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b03      	cmp	r3, #3
 800a54a:	d149      	bne.n	800a5e0 <sync_fs+0xb4>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	791b      	ldrb	r3, [r3, #4]
 800a550:	2b01      	cmp	r3, #1
 800a552:	d145      	bne.n	800a5e0 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	899b      	ldrh	r3, [r3, #12]
 800a55e:	461a      	mov	r2, r3
 800a560:	2100      	movs	r1, #0
 800a562:	f7ff fd77 	bl	800a054 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	3340      	adds	r3, #64	@ 0x40
 800a56a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a56e:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a572:	4618      	mov	r0, r3
 800a574:	f7ff fc7e 	bl	8009e74 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3340      	adds	r3, #64	@ 0x40
 800a57c:	4921      	ldr	r1, [pc, #132]	@ (800a604 <sync_fs+0xd8>)
 800a57e:	4618      	mov	r0, r3
 800a580:	f7ff fc93 	bl	8009eaa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	3340      	adds	r3, #64	@ 0x40
 800a588:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a58c:	491e      	ldr	r1, [pc, #120]	@ (800a608 <sync_fs+0xdc>)
 800a58e:	4618      	mov	r0, r3
 800a590:	f7ff fc8b 	bl	8009eaa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	3340      	adds	r3, #64	@ 0x40
 800a598:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	4619      	mov	r1, r3
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	f7ff fc81 	bl	8009eaa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	3340      	adds	r3, #64	@ 0x40
 800a5ac:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	69db      	ldr	r3, [r3, #28]
 800a5b4:	4619      	mov	r1, r3
 800a5b6:	4610      	mov	r0, r2
 800a5b8:	f7ff fc77 	bl	8009eaa <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5c0:	1c5a      	adds	r2, r3, #1
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	63da      	str	r2, [r3, #60]	@ 0x3c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	7858      	ldrb	r0, [r3, #1]
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a5d4:	2301      	movs	r3, #1
 800a5d6:	f7ff faf9 	bl	8009bcc <disk_write>
			fs->fsi_flag = 0;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2200      	movs	r2, #0
 800a5de:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f7ff fb0f 	bl	8009c0c <disk_ioctl>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d001      	beq.n	800a5f8 <sync_fs+0xcc>
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	3710      	adds	r7, #16
 800a5fe:	46bd      	mov	sp, r7
 800a600:	bd80      	pop	{r7, pc}
 800a602:	bf00      	nop
 800a604:	41615252 	.word	0x41615252
 800a608:	61417272 	.word	0x61417272

0800a60c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	3b02      	subs	r3, #2
 800a61a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a620:	3b02      	subs	r3, #2
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	429a      	cmp	r2, r3
 800a626:	d301      	bcc.n	800a62c <clust2sect+0x20>
 800a628:	2300      	movs	r3, #0
 800a62a:	e008      	b.n	800a63e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	895b      	ldrh	r3, [r3, #10]
 800a630:	461a      	mov	r2, r3
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	fb03 f202 	mul.w	r2, r3, r2
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63c:	4413      	add	r3, r2
}
 800a63e:	4618      	mov	r0, r3
 800a640:	370c      	adds	r7, #12
 800a642:	46bd      	mov	sp, r7
 800a644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a648:	4770      	bx	lr
	...

0800a64c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a64c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a650:	b088      	sub	sp, #32
 800a652:	af00      	add	r7, sp, #0
 800a654:	6078      	str	r0, [r7, #4]
 800a656:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a65e:	683b      	ldr	r3, [r7, #0]
 800a660:	2b01      	cmp	r3, #1
 800a662:	d904      	bls.n	800a66e <get_fat+0x22>
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a668:	683a      	ldr	r2, [r7, #0]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d302      	bcc.n	800a674 <get_fat+0x28>
		val = 1;	/* Internal error */
 800a66e:	2301      	movs	r3, #1
 800a670:	61fb      	str	r3, [r7, #28]
 800a672:	e139      	b.n	800a8e8 <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a674:	f04f 33ff 	mov.w	r3, #4294967295
 800a678:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800a67a:	69bb      	ldr	r3, [r7, #24]
 800a67c:	781b      	ldrb	r3, [r3, #0]
 800a67e:	3b01      	subs	r3, #1
 800a680:	2b03      	cmp	r3, #3
 800a682:	f200 8125 	bhi.w	800a8d0 <get_fat+0x284>
 800a686:	a201      	add	r2, pc, #4	@ (adr r2, 800a68c <get_fat+0x40>)
 800a688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a68c:	0800a69d 	.word	0x0800a69d
 800a690:	0800a749 	.word	0x0800a749
 800a694:	0800a795 	.word	0x0800a795
 800a698:	0800a7e5 	.word	0x0800a7e5
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	60fb      	str	r3, [r7, #12]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	899b      	ldrh	r3, [r3, #12]
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6ba:	4413      	add	r3, r2
 800a6bc:	4619      	mov	r1, r3
 800a6be:	69b8      	ldr	r0, [r7, #24]
 800a6c0:	f7ff ff06 	bl	800a4d0 <move_window>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	f040 8105 	bne.w	800a8d6 <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	1c5a      	adds	r2, r3, #1
 800a6d0:	60fa      	str	r2, [r7, #12]
 800a6d2:	69ba      	ldr	r2, [r7, #24]
 800a6d4:	8992      	ldrh	r2, [r2, #12]
 800a6d6:	fbb3 f1f2 	udiv	r1, r3, r2
 800a6da:	fb01 f202 	mul.w	r2, r1, r2
 800a6de:	1a9b      	subs	r3, r3, r2
 800a6e0:	69ba      	ldr	r2, [r7, #24]
 800a6e2:	4413      	add	r3, r2
 800a6e4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a6e8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a6ee:	69bb      	ldr	r3, [r7, #24]
 800a6f0:	899b      	ldrh	r3, [r3, #12]
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a6fa:	4413      	add	r3, r2
 800a6fc:	4619      	mov	r1, r3
 800a6fe:	69b8      	ldr	r0, [r7, #24]
 800a700:	f7ff fee6 	bl	800a4d0 <move_window>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	f040 80e7 	bne.w	800a8da <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a70c:	69bb      	ldr	r3, [r7, #24]
 800a70e:	899b      	ldrh	r3, [r3, #12]
 800a710:	461a      	mov	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	fbb3 f1f2 	udiv	r1, r3, r2
 800a718:	fb01 f202 	mul.w	r2, r1, r2
 800a71c:	1a9b      	subs	r3, r3, r2
 800a71e:	69ba      	ldr	r2, [r7, #24]
 800a720:	4413      	add	r3, r2
 800a722:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a726:	021b      	lsls	r3, r3, #8
 800a728:	68ba      	ldr	r2, [r7, #8]
 800a72a:	4313      	orrs	r3, r2
 800a72c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a72e:	683b      	ldr	r3, [r7, #0]
 800a730:	f003 0301 	and.w	r3, r3, #1
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <get_fat+0xf2>
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	091b      	lsrs	r3, r3, #4
 800a73c:	e002      	b.n	800a744 <get_fat+0xf8>
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a744:	61fb      	str	r3, [r7, #28]
			break;
 800a746:	e0cf      	b.n	800a8e8 <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	899b      	ldrh	r3, [r3, #12]
 800a750:	085b      	lsrs	r3, r3, #1
 800a752:	b29b      	uxth	r3, r3
 800a754:	4619      	mov	r1, r3
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	fbb3 f3f1 	udiv	r3, r3, r1
 800a75c:	4413      	add	r3, r2
 800a75e:	4619      	mov	r1, r3
 800a760:	69b8      	ldr	r0, [r7, #24]
 800a762:	f7ff feb5 	bl	800a4d0 <move_window>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	f040 80b8 	bne.w	800a8de <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a76e:	69bb      	ldr	r3, [r7, #24]
 800a770:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	005b      	lsls	r3, r3, #1
 800a778:	69ba      	ldr	r2, [r7, #24]
 800a77a:	8992      	ldrh	r2, [r2, #12]
 800a77c:	fbb3 f0f2 	udiv	r0, r3, r2
 800a780:	fb00 f202 	mul.w	r2, r0, r2
 800a784:	1a9b      	subs	r3, r3, r2
 800a786:	440b      	add	r3, r1
 800a788:	4618      	mov	r0, r3
 800a78a:	f7ff fa5d 	bl	8009c48 <ld_word>
 800a78e:	4603      	mov	r3, r0
 800a790:	61fb      	str	r3, [r7, #28]
			break;
 800a792:	e0a9      	b.n	800a8e8 <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	899b      	ldrh	r3, [r3, #12]
 800a79c:	089b      	lsrs	r3, r3, #2
 800a79e:	b29b      	uxth	r3, r3
 800a7a0:	4619      	mov	r1, r3
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	fbb3 f3f1 	udiv	r3, r3, r1
 800a7a8:	4413      	add	r3, r2
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	69b8      	ldr	r0, [r7, #24]
 800a7ae:	f7ff fe8f 	bl	800a4d0 <move_window>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	f040 8094 	bne.w	800a8e2 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	009b      	lsls	r3, r3, #2
 800a7c4:	69ba      	ldr	r2, [r7, #24]
 800a7c6:	8992      	ldrh	r2, [r2, #12]
 800a7c8:	fbb3 f0f2 	udiv	r0, r3, r2
 800a7cc:	fb00 f202 	mul.w	r2, r0, r2
 800a7d0:	1a9b      	subs	r3, r3, r2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff fa4f 	bl	8009c78 <ld_dword>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a7e0:	61fb      	str	r3, [r7, #28]
			break;
 800a7e2:	e081      	b.n	800a8e8 <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a7ea:	4313      	orrs	r3, r2
 800a7ec:	d070      	beq.n	800a8d0 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	689b      	ldr	r3, [r3, #8]
 800a7f2:	683a      	ldr	r2, [r7, #0]
 800a7f4:	1ad3      	subs	r3, r2, r3
 800a7f6:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a7fe:	1e54      	subs	r4, r2, #1
 800a800:	f143 35ff 	adc.w	r5, r3, #4294967295
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	899b      	ldrh	r3, [r3, #12]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	2200      	movs	r2, #0
 800a80c:	4698      	mov	r8, r3
 800a80e:	4691      	mov	r9, r2
 800a810:	4642      	mov	r2, r8
 800a812:	464b      	mov	r3, r9
 800a814:	4620      	mov	r0, r4
 800a816:	4629      	mov	r1, r5
 800a818:	f7f6 f858 	bl	80008cc <__aeabi_uldivmod>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	895b      	ldrh	r3, [r3, #10]
 800a824:	fbb2 f3f3 	udiv	r3, r2, r3
 800a828:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	79db      	ldrb	r3, [r3, #7]
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d10e      	bne.n	800a850 <get_fat+0x204>
					if (cofs <= clen) {
 800a832:	697a      	ldr	r2, [r7, #20]
 800a834:	693b      	ldr	r3, [r7, #16]
 800a836:	429a      	cmp	r2, r3
 800a838:	d80a      	bhi.n	800a850 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a83a:	697a      	ldr	r2, [r7, #20]
 800a83c:	693b      	ldr	r3, [r7, #16]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d002      	beq.n	800a848 <get_fat+0x1fc>
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	3301      	adds	r3, #1
 800a846:	e001      	b.n	800a84c <get_fat+0x200>
 800a848:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a84c:	61fb      	str	r3, [r7, #28]
						break;
 800a84e:	e04b      	b.n	800a8e8 <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	79db      	ldrb	r3, [r3, #7]
 800a854:	2b03      	cmp	r3, #3
 800a856:	d108      	bne.n	800a86a <get_fat+0x21e>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	699b      	ldr	r3, [r3, #24]
 800a85c:	697a      	ldr	r2, [r7, #20]
 800a85e:	429a      	cmp	r2, r3
 800a860:	d203      	bcs.n	800a86a <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 800a862:	683b      	ldr	r3, [r7, #0]
 800a864:	3301      	adds	r3, #1
 800a866:	61fb      	str	r3, [r7, #28]
					break;
 800a868:	e03e      	b.n	800a8e8 <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	79db      	ldrb	r3, [r3, #7]
 800a86e:	2b02      	cmp	r3, #2
 800a870:	d02e      	beq.n	800a8d0 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	69db      	ldr	r3, [r3, #28]
 800a876:	2b00      	cmp	r3, #0
 800a878:	d003      	beq.n	800a882 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a87a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800a87e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a880:	e032      	b.n	800a8e8 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	899b      	ldrh	r3, [r3, #12]
 800a88a:	089b      	lsrs	r3, r3, #2
 800a88c:	b29b      	uxth	r3, r3
 800a88e:	4619      	mov	r1, r3
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	fbb3 f3f1 	udiv	r3, r3, r1
 800a896:	4413      	add	r3, r2
 800a898:	4619      	mov	r1, r3
 800a89a:	69b8      	ldr	r0, [r7, #24]
 800a89c:	f7ff fe18 	bl	800a4d0 <move_window>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d11f      	bne.n	800a8e6 <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	009b      	lsls	r3, r3, #2
 800a8b0:	69ba      	ldr	r2, [r7, #24]
 800a8b2:	8992      	ldrh	r2, [r2, #12]
 800a8b4:	fbb3 f0f2 	udiv	r0, r3, r2
 800a8b8:	fb00 f202 	mul.w	r2, r0, r2
 800a8bc:	1a9b      	subs	r3, r3, r2
 800a8be:	440b      	add	r3, r1
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	f7ff f9d9 	bl	8009c78 <ld_dword>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a8cc:	61fb      	str	r3, [r7, #28]
					break;
 800a8ce:	e00b      	b.n	800a8e8 <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	61fb      	str	r3, [r7, #28]
 800a8d4:	e008      	b.n	800a8e8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8d6:	bf00      	nop
 800a8d8:	e006      	b.n	800a8e8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a8da:	bf00      	nop
 800a8dc:	e004      	b.n	800a8e8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a8de:	bf00      	nop
 800a8e0:	e002      	b.n	800a8e8 <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8e2:	bf00      	nop
 800a8e4:	e000      	b.n	800a8e8 <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a8e6:	bf00      	nop
		}
	}

	return val;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3720      	adds	r7, #32
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800a8f4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a8f4:	b590      	push	{r4, r7, lr}
 800a8f6:	b089      	sub	sp, #36	@ 0x24
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a900:	2302      	movs	r3, #2
 800a902:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b01      	cmp	r3, #1
 800a908:	f240 810d 	bls.w	800ab26 <put_fat+0x232>
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a910:	68ba      	ldr	r2, [r7, #8]
 800a912:	429a      	cmp	r2, r3
 800a914:	f080 8107 	bcs.w	800ab26 <put_fat+0x232>
		switch (fs->fs_type) {
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	781b      	ldrb	r3, [r3, #0]
 800a91c:	2b04      	cmp	r3, #4
 800a91e:	f300 8102 	bgt.w	800ab26 <put_fat+0x232>
 800a922:	2b03      	cmp	r3, #3
 800a924:	f280 80b3 	bge.w	800aa8e <put_fat+0x19a>
 800a928:	2b01      	cmp	r3, #1
 800a92a:	d003      	beq.n	800a934 <put_fat+0x40>
 800a92c:	2b02      	cmp	r3, #2
 800a92e:	f000 8083 	beq.w	800aa38 <put_fat+0x144>
 800a932:	e0f8      	b.n	800ab26 <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a934:	68bb      	ldr	r3, [r7, #8]
 800a936:	61bb      	str	r3, [r7, #24]
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	085b      	lsrs	r3, r3, #1
 800a93c:	69ba      	ldr	r2, [r7, #24]
 800a93e:	4413      	add	r3, r2
 800a940:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	899b      	ldrh	r3, [r3, #12]
 800a94a:	4619      	mov	r1, r3
 800a94c:	69bb      	ldr	r3, [r7, #24]
 800a94e:	fbb3 f3f1 	udiv	r3, r3, r1
 800a952:	4413      	add	r3, r2
 800a954:	4619      	mov	r1, r3
 800a956:	68f8      	ldr	r0, [r7, #12]
 800a958:	f7ff fdba 	bl	800a4d0 <move_window>
 800a95c:	4603      	mov	r3, r0
 800a95e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a960:	7ffb      	ldrb	r3, [r7, #31]
 800a962:	2b00      	cmp	r3, #0
 800a964:	f040 80d8 	bne.w	800ab18 <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a96e:	69bb      	ldr	r3, [r7, #24]
 800a970:	1c5a      	adds	r2, r3, #1
 800a972:	61ba      	str	r2, [r7, #24]
 800a974:	68fa      	ldr	r2, [r7, #12]
 800a976:	8992      	ldrh	r2, [r2, #12]
 800a978:	fbb3 f0f2 	udiv	r0, r3, r2
 800a97c:	fb00 f202 	mul.w	r2, r0, r2
 800a980:	1a9b      	subs	r3, r3, r2
 800a982:	440b      	add	r3, r1
 800a984:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f003 0301 	and.w	r3, r3, #1
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d00d      	beq.n	800a9ac <put_fat+0xb8>
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	b25b      	sxtb	r3, r3
 800a996:	f003 030f 	and.w	r3, r3, #15
 800a99a:	b25a      	sxtb	r2, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	011b      	lsls	r3, r3, #4
 800a9a2:	b25b      	sxtb	r3, r3
 800a9a4:	4313      	orrs	r3, r2
 800a9a6:	b25b      	sxtb	r3, r3
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	e001      	b.n	800a9b0 <put_fat+0xbc>
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	b2db      	uxtb	r3, r3
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	899b      	ldrh	r3, [r3, #12]
 800a9c2:	4619      	mov	r1, r3
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	68f8      	ldr	r0, [r7, #12]
 800a9d0:	f7ff fd7e 	bl	800a4d0 <move_window>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a9d8:	7ffb      	ldrb	r3, [r7, #31]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f040 809e 	bne.w	800ab1c <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	899b      	ldrh	r3, [r3, #12]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	69bb      	ldr	r3, [r7, #24]
 800a9ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800a9f2:	fb00 f202 	mul.w	r2, r0, r2
 800a9f6:	1a9b      	subs	r3, r3, r2
 800a9f8:	440b      	add	r3, r1
 800a9fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	f003 0301 	and.w	r3, r3, #1
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d003      	beq.n	800aa0e <put_fat+0x11a>
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	091b      	lsrs	r3, r3, #4
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	e00e      	b.n	800aa2c <put_fat+0x138>
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	781b      	ldrb	r3, [r3, #0]
 800aa12:	b25b      	sxtb	r3, r3
 800aa14:	f023 030f 	bic.w	r3, r3, #15
 800aa18:	b25a      	sxtb	r2, r3
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	0a1b      	lsrs	r3, r3, #8
 800aa1e:	b25b      	sxtb	r3, r3
 800aa20:	f003 030f 	and.w	r3, r3, #15
 800aa24:	b25b      	sxtb	r3, r3
 800aa26:	4313      	orrs	r3, r2
 800aa28:	b25b      	sxtb	r3, r3
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	2201      	movs	r2, #1
 800aa34:	70da      	strb	r2, [r3, #3]
			break;
 800aa36:	e076      	b.n	800ab26 <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	899b      	ldrh	r3, [r3, #12]
 800aa40:	085b      	lsrs	r3, r3, #1
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	4619      	mov	r1, r3
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	fbb3 f3f1 	udiv	r3, r3, r1
 800aa4c:	4413      	add	r3, r2
 800aa4e:	4619      	mov	r1, r3
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f7ff fd3d 	bl	800a4d0 <move_window>
 800aa56:	4603      	mov	r3, r0
 800aa58:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aa5a:	7ffb      	ldrb	r3, [r7, #31]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d15f      	bne.n	800ab20 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	68fa      	ldr	r2, [r7, #12]
 800aa6c:	8992      	ldrh	r2, [r2, #12]
 800aa6e:	fbb3 f0f2 	udiv	r0, r3, r2
 800aa72:	fb00 f202 	mul.w	r2, r0, r2
 800aa76:	1a9b      	subs	r3, r3, r2
 800aa78:	440b      	add	r3, r1
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	b292      	uxth	r2, r2
 800aa7e:	4611      	mov	r1, r2
 800aa80:	4618      	mov	r0, r3
 800aa82:	f7ff f9f7 	bl	8009e74 <st_word>
			fs->wflag = 1;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	2201      	movs	r2, #1
 800aa8a:	70da      	strb	r2, [r3, #3]
			break;
 800aa8c:	e04b      	b.n	800ab26 <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	899b      	ldrh	r3, [r3, #12]
 800aa96:	089b      	lsrs	r3, r3, #2
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800aaa2:	4413      	add	r3, r2
 800aaa4:	4619      	mov	r1, r3
 800aaa6:	68f8      	ldr	r0, [r7, #12]
 800aaa8:	f7ff fd12 	bl	800a4d0 <move_window>
 800aaac:	4603      	mov	r3, r0
 800aaae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800aab0:	7ffb      	ldrb	r3, [r7, #31]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d136      	bne.n	800ab24 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	781b      	ldrb	r3, [r3, #0]
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	d017      	beq.n	800aaee <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	68fa      	ldr	r2, [r7, #12]
 800aad0:	8992      	ldrh	r2, [r2, #12]
 800aad2:	fbb3 f0f2 	udiv	r0, r3, r2
 800aad6:	fb00 f202 	mul.w	r2, r0, r2
 800aada:	1a9b      	subs	r3, r3, r2
 800aadc:	440b      	add	r3, r1
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff f8ca 	bl	8009c78 <ld_dword>
 800aae4:	4603      	mov	r3, r0
 800aae6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800aaea:	4323      	orrs	r3, r4
 800aaec:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	68fa      	ldr	r2, [r7, #12]
 800aafa:	8992      	ldrh	r2, [r2, #12]
 800aafc:	fbb3 f0f2 	udiv	r0, r3, r2
 800ab00:	fb00 f202 	mul.w	r2, r0, r2
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	440b      	add	r3, r1
 800ab08:	6879      	ldr	r1, [r7, #4]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff f9cd 	bl	8009eaa <st_dword>
			fs->wflag = 1;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2201      	movs	r2, #1
 800ab14:	70da      	strb	r2, [r3, #3]
			break;
 800ab16:	e006      	b.n	800ab26 <put_fat+0x232>
			if (res != FR_OK) break;
 800ab18:	bf00      	nop
 800ab1a:	e004      	b.n	800ab26 <put_fat+0x232>
			if (res != FR_OK) break;
 800ab1c:	bf00      	nop
 800ab1e:	e002      	b.n	800ab26 <put_fat+0x232>
			if (res != FR_OK) break;
 800ab20:	bf00      	nop
 800ab22:	e000      	b.n	800ab26 <put_fat+0x232>
			if (res != FR_OK) break;
 800ab24:	bf00      	nop
		}
	}
	return res;
 800ab26:	7ffb      	ldrb	r3, [r7, #31]
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3724      	adds	r7, #36	@ 0x24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd90      	pop	{r4, r7, pc}

0800ab30 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b08a      	sub	sp, #40	@ 0x28
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	3b02      	subs	r3, #2
 800ab40:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab46:	3b02      	subs	r3, #2
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	429a      	cmp	r2, r3
 800ab4c:	d301      	bcc.n	800ab52 <find_bitmap+0x22>
 800ab4e:	2300      	movs	r3, #0
 800ab50:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	61fb      	str	r3, [r7, #28]
 800ab56:	69fb      	ldr	r3, [r7, #28]
 800ab58:	61bb      	str	r3, [r7, #24]
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	08db      	lsrs	r3, r3, #3
 800ab66:	68f9      	ldr	r1, [r7, #12]
 800ab68:	8989      	ldrh	r1, [r1, #12]
 800ab6a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ab6e:	4413      	add	r3, r2
 800ab70:	4619      	mov	r1, r3
 800ab72:	68f8      	ldr	r0, [r7, #12]
 800ab74:	f7ff fcac 	bl	800a4d0 <move_window>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d002      	beq.n	800ab84 <find_bitmap+0x54>
 800ab7e:	f04f 33ff 	mov.w	r3, #4294967295
 800ab82:	e058      	b.n	800ac36 <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800ab84:	69fb      	ldr	r3, [r7, #28]
 800ab86:	08db      	lsrs	r3, r3, #3
 800ab88:	68fa      	ldr	r2, [r7, #12]
 800ab8a:	8992      	ldrh	r2, [r2, #12]
 800ab8c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab90:	fb01 f202 	mul.w	r2, r1, r2
 800ab94:	1a9b      	subs	r3, r3, r2
 800ab96:	623b      	str	r3, [r7, #32]
 800ab98:	69fb      	ldr	r3, [r7, #28]
 800ab9a:	f003 0307 	and.w	r3, r3, #7
 800ab9e:	2201      	movs	r2, #1
 800aba0:	fa02 f303 	lsl.w	r3, r2, r3
 800aba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	6a3b      	ldr	r3, [r7, #32]
 800abac:	4413      	add	r3, r2
 800abae:	3340      	adds	r3, #64	@ 0x40
 800abb0:	781a      	ldrb	r2, [r3, #0]
 800abb2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abb6:	4013      	ands	r3, r2
 800abb8:	74fb      	strb	r3, [r7, #19]
 800abba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abbe:	005b      	lsls	r3, r3, #1
 800abc0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800abc4:	69fb      	ldr	r3, [r7, #28]
 800abc6:	3301      	adds	r3, #1
 800abc8:	61fb      	str	r3, [r7, #28]
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abce:	3b02      	subs	r3, #2
 800abd0:	69fa      	ldr	r2, [r7, #28]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d307      	bcc.n	800abe6 <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 800abd6:	2300      	movs	r3, #0
 800abd8:	61fb      	str	r3, [r7, #28]
 800abda:	2300      	movs	r3, #0
 800abdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	899b      	ldrh	r3, [r3, #12]
 800abe4:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800abe6:	7cfb      	ldrb	r3, [r7, #19]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d109      	bne.n	800ac00 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800abec:	697b      	ldr	r3, [r7, #20]
 800abee:	3301      	adds	r3, #1
 800abf0:	617b      	str	r3, [r7, #20]
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d106      	bne.n	800ac08 <find_bitmap+0xd8>
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	3302      	adds	r3, #2
 800abfe:	e01a      	b.n	800ac36 <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800ac00:	69fb      	ldr	r3, [r7, #28]
 800ac02:	61bb      	str	r3, [r7, #24]
 800ac04:	2300      	movs	r3, #0
 800ac06:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800ac08:	69fa      	ldr	r2, [r7, #28]
 800ac0a:	68bb      	ldr	r3, [r7, #8]
 800ac0c:	429a      	cmp	r2, r3
 800ac0e:	d101      	bne.n	800ac14 <find_bitmap+0xe4>
 800ac10:	2300      	movs	r3, #0
 800ac12:	e010      	b.n	800ac36 <find_bitmap+0x106>
			} while (bm);
 800ac14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d1c5      	bne.n	800aba8 <find_bitmap+0x78>
			bm = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 800ac22:	6a3b      	ldr	r3, [r7, #32]
 800ac24:	3301      	adds	r3, #1
 800ac26:	623b      	str	r3, [r7, #32]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	899b      	ldrh	r3, [r3, #12]
 800ac2c:	461a      	mov	r2, r3
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d3b9      	bcc.n	800aba8 <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800ac34:	e793      	b.n	800ab5e <find_bitmap+0x2e>
	}
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3728      	adds	r7, #40	@ 0x28
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}

0800ac3e <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800ac3e:	b580      	push	{r7, lr}
 800ac40:	b088      	sub	sp, #32
 800ac42:	af00      	add	r7, sp, #0
 800ac44:	60f8      	str	r0, [r7, #12]
 800ac46:	60b9      	str	r1, [r7, #8]
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	3b02      	subs	r3, #2
 800ac50:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	08db      	lsrs	r3, r3, #3
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	8989      	ldrh	r1, [r1, #12]
 800ac5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800ac62:	4413      	add	r3, r2
 800ac64:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	08db      	lsrs	r3, r3, #3
 800ac6a:	68fa      	ldr	r2, [r7, #12]
 800ac6c:	8992      	ldrh	r2, [r2, #12]
 800ac6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ac72:	fb01 f202 	mul.w	r2, r1, r2
 800ac76:	1a9b      	subs	r3, r3, r2
 800ac78:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	f003 0307 	and.w	r3, r3, #7
 800ac80:	2201      	movs	r2, #1
 800ac82:	fa02 f303 	lsl.w	r3, r2, r3
 800ac86:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	1c5a      	adds	r2, r3, #1
 800ac8c:	617a      	str	r2, [r7, #20]
 800ac8e:	4619      	mov	r1, r3
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f7ff fc1d 	bl	800a4d0 <move_window>
 800ac96:	4603      	mov	r3, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d001      	beq.n	800aca0 <change_bitmap+0x62>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	e03f      	b.n	800ad20 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800aca0:	68fa      	ldr	r2, [r7, #12]
 800aca2:	69bb      	ldr	r3, [r7, #24]
 800aca4:	4413      	add	r3, r2
 800aca6:	3340      	adds	r3, #64	@ 0x40
 800aca8:	781a      	ldrb	r2, [r3, #0]
 800acaa:	7ffb      	ldrb	r3, [r7, #31]
 800acac:	4013      	ands	r3, r2
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	bf14      	ite	ne
 800acb4:	2301      	movne	r3, #1
 800acb6:	2300      	moveq	r3, #0
 800acb8:	b2db      	uxtb	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	d101      	bne.n	800acc6 <change_bitmap+0x88>
 800acc2:	2302      	movs	r3, #2
 800acc4:	e02c      	b.n	800ad20 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 800acc6:	68fa      	ldr	r2, [r7, #12]
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	4413      	add	r3, r2
 800accc:	3340      	adds	r3, #64	@ 0x40
 800acce:	781a      	ldrb	r2, [r3, #0]
 800acd0:	7ffb      	ldrb	r3, [r7, #31]
 800acd2:	4053      	eors	r3, r2
 800acd4:	b2d9      	uxtb	r1, r3
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	4413      	add	r3, r2
 800acdc:	3340      	adds	r3, #64	@ 0x40
 800acde:	460a      	mov	r2, r1
 800ace0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2201      	movs	r2, #1
 800ace6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	3b01      	subs	r3, #1
 800acec:	607b      	str	r3, [r7, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d101      	bne.n	800acf8 <change_bitmap+0xba>
 800acf4:	2300      	movs	r3, #0
 800acf6:	e013      	b.n	800ad20 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 800acf8:	7ffb      	ldrb	r3, [r7, #31]
 800acfa:	005b      	lsls	r3, r3, #1
 800acfc:	77fb      	strb	r3, [r7, #31]
 800acfe:	7ffb      	ldrb	r3, [r7, #31]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d1cd      	bne.n	800aca0 <change_bitmap+0x62>
			bm = 1;
 800ad04:	2301      	movs	r3, #1
 800ad06:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	61bb      	str	r3, [r7, #24]
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	899b      	ldrh	r3, [r3, #12]
 800ad12:	461a      	mov	r2, r3
 800ad14:	69bb      	ldr	r3, [r7, #24]
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d3c2      	bcc.n	800aca0 <change_bitmap+0x62>
		i = 0;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800ad1e:	e7b3      	b.n	800ac88 <change_bitmap+0x4a>
	}
}
 800ad20:	4618      	mov	r0, r3
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}

0800ad28 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b086      	sub	sp, #24
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	79db      	ldrb	r3, [r3, #7]
 800ad34:	2b03      	cmp	r3, #3
 800ad36:	d121      	bne.n	800ad7c <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	617b      	str	r3, [r7, #20]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	699b      	ldr	r3, [r3, #24]
 800ad42:	613b      	str	r3, [r7, #16]
 800ad44:	e014      	b.n	800ad70 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6818      	ldr	r0, [r3, #0]
 800ad4a:	697b      	ldr	r3, [r7, #20]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6979      	ldr	r1, [r7, #20]
 800ad52:	f7ff fdcf 	bl	800a8f4 <put_fat>
 800ad56:	4603      	mov	r3, r0
 800ad58:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800ad5a:	7bfb      	ldrb	r3, [r7, #15]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d001      	beq.n	800ad64 <fill_first_frag+0x3c>
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	e00c      	b.n	800ad7e <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	3301      	adds	r3, #1
 800ad68:	617b      	str	r3, [r7, #20]
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d1e7      	bne.n	800ad46 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2200      	movs	r2, #0
 800ad7a:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800ad7c:	2300      	movs	r3, #0
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}

0800ad86 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800ad86:	b580      	push	{r7, lr}
 800ad88:	b086      	sub	sp, #24
 800ad8a:	af00      	add	r7, sp, #0
 800ad8c:	60f8      	str	r0, [r7, #12]
 800ad8e:	60b9      	str	r1, [r7, #8]
 800ad90:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800ad92:	e020      	b.n	800add6 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	6818      	ldr	r0, [r3, #0]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	69db      	ldr	r3, [r3, #28]
 800ad9c:	68ba      	ldr	r2, [r7, #8]
 800ad9e:	1ad3      	subs	r3, r2, r3
 800ada0:	1c59      	adds	r1, r3, #1
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	69db      	ldr	r3, [r3, #28]
 800ada6:	2b01      	cmp	r3, #1
 800ada8:	d905      	bls.n	800adb6 <fill_last_frag+0x30>
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	69db      	ldr	r3, [r3, #28]
 800adae:	68ba      	ldr	r2, [r7, #8]
 800adb0:	1ad3      	subs	r3, r2, r3
 800adb2:	3302      	adds	r3, #2
 800adb4:	e000      	b.n	800adb8 <fill_last_frag+0x32>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	461a      	mov	r2, r3
 800adba:	f7ff fd9b 	bl	800a8f4 <put_fat>
 800adbe:	4603      	mov	r3, r0
 800adc0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800adc2:	7dfb      	ldrb	r3, [r7, #23]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d001      	beq.n	800adcc <fill_last_frag+0x46>
 800adc8:	7dfb      	ldrb	r3, [r7, #23]
 800adca:	e009      	b.n	800ade0 <fill_last_frag+0x5a>
		obj->n_frag--;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	1e5a      	subs	r2, r3, #1
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d1da      	bne.n	800ad94 <fill_last_frag+0xe>
	}
	return FR_OK;
 800adde:	2300      	movs	r3, #0
}
 800ade0:	4618      	mov	r0, r3
 800ade2:	3718      	adds	r7, #24
 800ade4:	46bd      	mov	sp, r7
 800ade6:	bd80      	pop	{r7, pc}

0800ade8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b08a      	sub	sp, #40	@ 0x28
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800adf4:	2300      	movs	r3, #0
 800adf6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ae06:	68bb      	ldr	r3, [r7, #8]
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d904      	bls.n	800ae16 <remove_chain+0x2e>
 800ae0c:	69bb      	ldr	r3, [r7, #24]
 800ae0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae10:	68ba      	ldr	r2, [r7, #8]
 800ae12:	429a      	cmp	r2, r3
 800ae14:	d301      	bcc.n	800ae1a <remove_chain+0x32>
 800ae16:	2302      	movs	r3, #2
 800ae18:	e096      	b.n	800af48 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d014      	beq.n	800ae4a <remove_chain+0x62>
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	2b04      	cmp	r3, #4
 800ae26:	d103      	bne.n	800ae30 <remove_chain+0x48>
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	79db      	ldrb	r3, [r3, #7]
 800ae2c:	2b02      	cmp	r3, #2
 800ae2e:	d00c      	beq.n	800ae4a <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	69b8      	ldr	r0, [r7, #24]
 800ae38:	f7ff fd5c 	bl	800a8f4 <put_fat>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ae40:	7ffb      	ldrb	r3, [r7, #31]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d001      	beq.n	800ae4a <remove_chain+0x62>
 800ae46:	7ffb      	ldrb	r3, [r7, #31]
 800ae48:	e07e      	b.n	800af48 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ae4a:	68b9      	ldr	r1, [r7, #8]
 800ae4c:	68f8      	ldr	r0, [r7, #12]
 800ae4e:	f7ff fbfd 	bl	800a64c <get_fat>
 800ae52:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d055      	beq.n	800af06 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	2b01      	cmp	r3, #1
 800ae5e:	d101      	bne.n	800ae64 <remove_chain+0x7c>
 800ae60:	2302      	movs	r3, #2
 800ae62:	e071      	b.n	800af48 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae6a:	d101      	bne.n	800ae70 <remove_chain+0x88>
 800ae6c:	2301      	movs	r3, #1
 800ae6e:	e06b      	b.n	800af48 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b04      	cmp	r3, #4
 800ae76:	d00b      	beq.n	800ae90 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae78:	2200      	movs	r2, #0
 800ae7a:	68b9      	ldr	r1, [r7, #8]
 800ae7c:	69b8      	ldr	r0, [r7, #24]
 800ae7e:	f7ff fd39 	bl	800a8f4 <put_fat>
 800ae82:	4603      	mov	r3, r0
 800ae84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ae86:	7ffb      	ldrb	r3, [r7, #31]
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d001      	beq.n	800ae90 <remove_chain+0xa8>
 800ae8c:	7ffb      	ldrb	r3, [r7, #31]
 800ae8e:	e05b      	b.n	800af48 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ae90:	69bb      	ldr	r3, [r7, #24]
 800ae92:	6a1a      	ldr	r2, [r3, #32]
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae98:	3b02      	subs	r3, #2
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d20b      	bcs.n	800aeb6 <remove_chain+0xce>
			fs->free_clst++;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	1c5a      	adds	r2, r3, #1
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	791b      	ldrb	r3, [r3, #4]
 800aeac:	f043 0301 	orr.w	r3, r3, #1
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	3301      	adds	r3, #1
 800aeba:	697a      	ldr	r2, [r7, #20]
 800aebc:	429a      	cmp	r2, r3
 800aebe:	d102      	bne.n	800aec6 <remove_chain+0xde>
			ecl = nxt;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	623b      	str	r3, [r7, #32]
 800aec4:	e017      	b.n	800aef6 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	2b04      	cmp	r3, #4
 800aecc:	d10f      	bne.n	800aeee <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800aece:	6a3a      	ldr	r2, [r7, #32]
 800aed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	1c5a      	adds	r2, r3, #1
 800aed6:	2300      	movs	r3, #0
 800aed8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aeda:	69b8      	ldr	r0, [r7, #24]
 800aedc:	f7ff feaf 	bl	800ac3e <change_bitmap>
 800aee0:	4603      	mov	r3, r0
 800aee2:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800aee4:	7ffb      	ldrb	r3, [r7, #31]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <remove_chain+0x106>
 800aeea:	7ffb      	ldrb	r3, [r7, #31]
 800aeec:	e02c      	b.n	800af48 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	623b      	str	r3, [r7, #32]
 800aef2:	6a3b      	ldr	r3, [r7, #32]
 800aef4:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aefe:	68ba      	ldr	r2, [r7, #8]
 800af00:	429a      	cmp	r2, r3
 800af02:	d3a2      	bcc.n	800ae4a <remove_chain+0x62>
 800af04:	e000      	b.n	800af08 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800af06:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	781b      	ldrb	r3, [r3, #0]
 800af0c:	2b04      	cmp	r3, #4
 800af0e:	d11a      	bne.n	800af46 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d103      	bne.n	800af1e <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	71da      	strb	r2, [r3, #7]
 800af1c:	e013      	b.n	800af46 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	79db      	ldrb	r3, [r3, #7]
 800af22:	2b03      	cmp	r3, #3
 800af24:	d10f      	bne.n	800af46 <remove_chain+0x15e>
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	689b      	ldr	r3, [r3, #8]
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	429a      	cmp	r2, r3
 800af2e:	d30a      	bcc.n	800af46 <remove_chain+0x15e>
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	689a      	ldr	r2, [r3, #8]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	699b      	ldr	r3, [r3, #24]
 800af38:	4413      	add	r3, r2
 800af3a:	687a      	ldr	r2, [r7, #4]
 800af3c:	429a      	cmp	r2, r3
 800af3e:	d802      	bhi.n	800af46 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2202      	movs	r2, #2
 800af44:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800af46:	2300      	movs	r3, #0
}
 800af48:	4618      	mov	r0, r3
 800af4a:	3728      	adds	r7, #40	@ 0x28
 800af4c:	46bd      	mov	sp, r7
 800af4e:	bd80      	pop	{r7, pc}

0800af50 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
 800af58:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d10d      	bne.n	800af82 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800af66:	693b      	ldr	r3, [r7, #16]
 800af68:	69db      	ldr	r3, [r3, #28]
 800af6a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800af6c:	69bb      	ldr	r3, [r7, #24]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d004      	beq.n	800af7c <create_chain+0x2c>
 800af72:	693b      	ldr	r3, [r7, #16]
 800af74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	429a      	cmp	r2, r3
 800af7a:	d31b      	bcc.n	800afb4 <create_chain+0x64>
 800af7c:	2301      	movs	r3, #1
 800af7e:	61bb      	str	r3, [r7, #24]
 800af80:	e018      	b.n	800afb4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800af82:	6839      	ldr	r1, [r7, #0]
 800af84:	6878      	ldr	r0, [r7, #4]
 800af86:	f7ff fb61 	bl	800a64c <get_fat>
 800af8a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d801      	bhi.n	800af96 <create_chain+0x46>
 800af92:	2301      	movs	r3, #1
 800af94:	e0d9      	b.n	800b14a <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af9c:	d101      	bne.n	800afa2 <create_chain+0x52>
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	e0d3      	b.n	800b14a <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d201      	bcs.n	800afb0 <create_chain+0x60>
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	e0cc      	b.n	800b14a <create_chain+0x1fa>
		scl = clst;
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800afb4:	693b      	ldr	r3, [r7, #16]
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	2b04      	cmp	r3, #4
 800afba:	d164      	bne.n	800b086 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800afbc:	2201      	movs	r2, #1
 800afbe:	69b9      	ldr	r1, [r7, #24]
 800afc0:	6938      	ldr	r0, [r7, #16]
 800afc2:	f7ff fdb5 	bl	800ab30 <find_bitmap>
 800afc6:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d003      	beq.n	800afd6 <create_chain+0x86>
 800afce:	69fb      	ldr	r3, [r7, #28]
 800afd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd4:	d101      	bne.n	800afda <create_chain+0x8a>
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	e0b7      	b.n	800b14a <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800afda:	2301      	movs	r3, #1
 800afdc:	2201      	movs	r2, #1
 800afde:	69f9      	ldr	r1, [r7, #28]
 800afe0:	6938      	ldr	r0, [r7, #16]
 800afe2:	f7ff fe2c 	bl	800ac3e <change_bitmap>
 800afe6:	4603      	mov	r3, r0
 800afe8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
 800afec:	2b02      	cmp	r3, #2
 800afee:	d101      	bne.n	800aff4 <create_chain+0xa4>
 800aff0:	2301      	movs	r3, #1
 800aff2:	e0aa      	b.n	800b14a <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800aff4:	7dfb      	ldrb	r3, [r7, #23]
 800aff6:	2b01      	cmp	r3, #1
 800aff8:	d102      	bne.n	800b000 <create_chain+0xb0>
 800affa:	f04f 33ff 	mov.w	r3, #4294967295
 800affe:	e0a4      	b.n	800b14a <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800b000:	683b      	ldr	r3, [r7, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d103      	bne.n	800b00e <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2202      	movs	r2, #2
 800b00a:	71da      	strb	r2, [r3, #7]
 800b00c:	e011      	b.n	800b032 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	79db      	ldrb	r3, [r3, #7]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d10d      	bne.n	800b032 <create_chain+0xe2>
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	3301      	adds	r3, #1
 800b01a:	69fa      	ldr	r2, [r7, #28]
 800b01c:	429a      	cmp	r2, r3
 800b01e:	d008      	beq.n	800b032 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	689b      	ldr	r3, [r3, #8]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	1ad2      	subs	r2, r2, r3
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2203      	movs	r2, #3
 800b030:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	79db      	ldrb	r3, [r3, #7]
 800b036:	2b02      	cmp	r3, #2
 800b038:	d064      	beq.n	800b104 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	3301      	adds	r3, #1
 800b03e:	69fa      	ldr	r2, [r7, #28]
 800b040:	429a      	cmp	r2, r3
 800b042:	d10b      	bne.n	800b05c <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	69db      	ldr	r3, [r3, #28]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <create_chain+0x104>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	69db      	ldr	r3, [r3, #28]
 800b050:	3301      	adds	r3, #1
 800b052:	e000      	b.n	800b056 <create_chain+0x106>
 800b054:	2302      	movs	r3, #2
 800b056:	687a      	ldr	r2, [r7, #4]
 800b058:	61d3      	str	r3, [r2, #28]
 800b05a:	e053      	b.n	800b104 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d102      	bne.n	800b06a <create_chain+0x11a>
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	2201      	movs	r2, #1
 800b068:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800b06a:	69fa      	ldr	r2, [r7, #28]
 800b06c:	6839      	ldr	r1, [r7, #0]
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f7ff fe89 	bl	800ad86 <fill_last_frag>
 800b074:	4603      	mov	r3, r0
 800b076:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d142      	bne.n	800b104 <create_chain+0x1b4>
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	2201      	movs	r2, #1
 800b082:	61da      	str	r2, [r3, #28]
 800b084:	e03e      	b.n	800b104 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	3301      	adds	r3, #1
 800b08e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b094:	69fa      	ldr	r2, [r7, #28]
 800b096:	429a      	cmp	r2, r3
 800b098:	d307      	bcc.n	800b0aa <create_chain+0x15a>
				ncl = 2;
 800b09a:	2302      	movs	r3, #2
 800b09c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b09e:	69fa      	ldr	r2, [r7, #28]
 800b0a0:	69bb      	ldr	r3, [r7, #24]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d901      	bls.n	800b0aa <create_chain+0x15a>
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	e04f      	b.n	800b14a <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b0aa:	69f9      	ldr	r1, [r7, #28]
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff facd 	bl	800a64c <get_fat>
 800b0b2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00e      	beq.n	800b0d8 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b01      	cmp	r3, #1
 800b0be:	d003      	beq.n	800b0c8 <create_chain+0x178>
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0c6:	d101      	bne.n	800b0cc <create_chain+0x17c>
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	e03e      	b.n	800b14a <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d1da      	bne.n	800b08a <create_chain+0x13a>
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	e038      	b.n	800b14a <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800b0d8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b0da:	f04f 32ff 	mov.w	r2, #4294967295
 800b0de:	69f9      	ldr	r1, [r7, #28]
 800b0e0:	6938      	ldr	r0, [r7, #16]
 800b0e2:	f7ff fc07 	bl	800a8f4 <put_fat>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b0ea:	7dfb      	ldrb	r3, [r7, #23]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d109      	bne.n	800b104 <create_chain+0x1b4>
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d006      	beq.n	800b104 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b0f6:	69fa      	ldr	r2, [r7, #28]
 800b0f8:	6839      	ldr	r1, [r7, #0]
 800b0fa:	6938      	ldr	r0, [r7, #16]
 800b0fc:	f7ff fbfa 	bl	800a8f4 <put_fat>
 800b100:	4603      	mov	r3, r0
 800b102:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b104:	7dfb      	ldrb	r3, [r7, #23]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d116      	bne.n	800b138 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	69fa      	ldr	r2, [r7, #28]
 800b10e:	61da      	str	r2, [r3, #28]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	6a1a      	ldr	r2, [r3, #32]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b118:	3b02      	subs	r3, #2
 800b11a:	429a      	cmp	r2, r3
 800b11c:	d804      	bhi.n	800b128 <create_chain+0x1d8>
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	6a1b      	ldr	r3, [r3, #32]
 800b122:	1e5a      	subs	r2, r3, #1
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	621a      	str	r2, [r3, #32]
		fs->fsi_flag |= 1;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	791b      	ldrb	r3, [r3, #4]
 800b12c:	f043 0301 	orr.w	r3, r3, #1
 800b130:	b2da      	uxtb	r2, r3
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	711a      	strb	r2, [r3, #4]
 800b136:	e007      	b.n	800b148 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b138:	7dfb      	ldrb	r3, [r7, #23]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d102      	bne.n	800b144 <create_chain+0x1f4>
 800b13e:	f04f 33ff 	mov.w	r3, #4294967295
 800b142:	e000      	b.n	800b146 <create_chain+0x1f6>
 800b144:	2301      	movs	r3, #1
 800b146:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b148:	69fb      	ldr	r3, [r7, #28]
}
 800b14a:	4618      	mov	r0, r3
 800b14c:	3720      	adds	r7, #32
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b152:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b156:	b088      	sub	sp, #32
 800b158:	af00      	add	r7, sp, #0
 800b15a:	60f8      	str	r0, [r7, #12]
 800b15c:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b16a:	3304      	adds	r3, #4
 800b16c:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b16e:	697b      	ldr	r3, [r7, #20]
 800b170:	899b      	ldrh	r3, [r3, #12]
 800b172:	b29b      	uxth	r3, r3
 800b174:	2200      	movs	r2, #0
 800b176:	4698      	mov	r8, r3
 800b178:	4691      	mov	r9, r2
 800b17a:	4642      	mov	r2, r8
 800b17c:	464b      	mov	r3, r9
 800b17e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b182:	f7f5 fba3 	bl	80008cc <__aeabi_uldivmod>
 800b186:	4602      	mov	r2, r0
 800b188:	460b      	mov	r3, r1
 800b18a:	4610      	mov	r0, r2
 800b18c:	4619      	mov	r1, r3
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	895b      	ldrh	r3, [r3, #10]
 800b192:	b29b      	uxth	r3, r3
 800b194:	2200      	movs	r2, #0
 800b196:	461c      	mov	r4, r3
 800b198:	4615      	mov	r5, r2
 800b19a:	4622      	mov	r2, r4
 800b19c:	462b      	mov	r3, r5
 800b19e:	f7f5 fb95 	bl	80008cc <__aeabi_uldivmod>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4613      	mov	r3, r2
 800b1a8:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	1d1a      	adds	r2, r3, #4
 800b1ae:	61ba      	str	r2, [r7, #24]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d101      	bne.n	800b1be <clmt_clust+0x6c>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	e010      	b.n	800b1e0 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 800b1be:	69fa      	ldr	r2, [r7, #28]
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	429a      	cmp	r2, r3
 800b1c4:	d307      	bcc.n	800b1d6 <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	1ad3      	subs	r3, r2, r3
 800b1cc:	61fb      	str	r3, [r7, #28]
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	3304      	adds	r3, #4
 800b1d2:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b1d4:	e7e9      	b.n	800b1aa <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800b1d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b1d8:	69bb      	ldr	r3, [r7, #24]
 800b1da:	681a      	ldr	r2, [r3, #0]
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	4413      	add	r3, r2
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3720      	adds	r7, #32
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800b1ea <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b086      	sub	sp, #24
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	2b04      	cmp	r3, #4
 800b200:	d102      	bne.n	800b208 <dir_sdi+0x1e>
 800b202:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b206:	e001      	b.n	800b20c <dir_sdi+0x22>
 800b208:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d904      	bls.n	800b21c <dir_sdi+0x32>
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	f003 031f 	and.w	r3, r3, #31
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d001      	beq.n	800b220 <dir_sdi+0x36>
		return FR_INT_ERR;
 800b21c:	2302      	movs	r3, #2
 800b21e:	e074      	b.n	800b30a <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	683a      	ldr	r2, [r7, #0]
 800b224:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	689b      	ldr	r3, [r3, #8]
 800b22a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d109      	bne.n	800b246 <dir_sdi+0x5c>
 800b232:	693b      	ldr	r3, [r7, #16]
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b02      	cmp	r3, #2
 800b238:	d905      	bls.n	800b246 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b23e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	2200      	movs	r2, #0
 800b244:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d10c      	bne.n	800b266 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	095b      	lsrs	r3, r3, #5
 800b250:	693a      	ldr	r2, [r7, #16]
 800b252:	8912      	ldrh	r2, [r2, #8]
 800b254:	4293      	cmp	r3, r2
 800b256:	d301      	bcc.n	800b25c <dir_sdi+0x72>
 800b258:	2302      	movs	r3, #2
 800b25a:	e056      	b.n	800b30a <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	639a      	str	r2, [r3, #56]	@ 0x38
 800b264:	e02d      	b.n	800b2c2 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	895b      	ldrh	r3, [r3, #10]
 800b26a:	461a      	mov	r2, r3
 800b26c:	693b      	ldr	r3, [r7, #16]
 800b26e:	899b      	ldrh	r3, [r3, #12]
 800b270:	fb02 f303 	mul.w	r3, r2, r3
 800b274:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b276:	e019      	b.n	800b2ac <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6979      	ldr	r1, [r7, #20]
 800b27c:	4618      	mov	r0, r3
 800b27e:	f7ff f9e5 	bl	800a64c <get_fat>
 800b282:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b284:	697b      	ldr	r3, [r7, #20]
 800b286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b28a:	d101      	bne.n	800b290 <dir_sdi+0xa6>
 800b28c:	2301      	movs	r3, #1
 800b28e:	e03c      	b.n	800b30a <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b290:	697b      	ldr	r3, [r7, #20]
 800b292:	2b01      	cmp	r3, #1
 800b294:	d904      	bls.n	800b2a0 <dir_sdi+0xb6>
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b29a:	697a      	ldr	r2, [r7, #20]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d301      	bcc.n	800b2a4 <dir_sdi+0xba>
 800b2a0:	2302      	movs	r3, #2
 800b2a2:	e032      	b.n	800b30a <dir_sdi+0x120>
			ofs -= csz;
 800b2a4:	683a      	ldr	r2, [r7, #0]
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	1ad3      	subs	r3, r2, r3
 800b2aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b2ac:	683a      	ldr	r2, [r7, #0]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	429a      	cmp	r2, r3
 800b2b2:	d2e1      	bcs.n	800b278 <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 800b2b4:	6979      	ldr	r1, [r7, #20]
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f7ff f9a8 	bl	800a60c <clust2sect>
 800b2bc:	4602      	mov	r2, r0
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	697a      	ldr	r2, [r7, #20]
 800b2c6:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <dir_sdi+0xea>
 800b2d0:	2302      	movs	r3, #2
 800b2d2:	e01a      	b.n	800b30a <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	899b      	ldrh	r3, [r3, #12]
 800b2dc:	4619      	mov	r1, r3
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800b2e4:	441a      	add	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	899b      	ldrh	r3, [r3, #12]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	fbb3 f0f2 	udiv	r0, r3, r2
 800b2fc:	fb00 f202 	mul.w	r2, r0, r2
 800b300:	1a9b      	subs	r3, r3, r2
 800b302:	18ca      	adds	r2, r1, r3
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b308:	2300      	movs	r3, #0
}
 800b30a:	4618      	mov	r0, r3
 800b30c:	3718      	adds	r7, #24
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b086      	sub	sp, #24
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
 800b31a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b326:	3320      	adds	r3, #32
 800b328:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d00b      	beq.n	800b34a <dir_next+0x38>
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	781b      	ldrb	r3, [r3, #0]
 800b336:	2b04      	cmp	r3, #4
 800b338:	d102      	bne.n	800b340 <dir_next+0x2e>
 800b33a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b33e:	e001      	b.n	800b344 <dir_next+0x32>
 800b340:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	429a      	cmp	r2, r3
 800b348:	d801      	bhi.n	800b34e <dir_next+0x3c>
 800b34a:	2304      	movs	r3, #4
 800b34c:	e0c3      	b.n	800b4d6 <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	899b      	ldrh	r3, [r3, #12]
 800b352:	461a      	mov	r2, r3
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	fbb3 f1f2 	udiv	r1, r3, r2
 800b35a:	fb01 f202 	mul.w	r2, r1, r2
 800b35e:	1a9b      	subs	r3, r3, r2
 800b360:	2b00      	cmp	r3, #0
 800b362:	f040 80a5 	bne.w	800b4b0 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b374:	2b00      	cmp	r3, #0
 800b376:	d10b      	bne.n	800b390 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	095b      	lsrs	r3, r3, #5
 800b37c:	68fa      	ldr	r2, [r7, #12]
 800b37e:	8912      	ldrh	r2, [r2, #8]
 800b380:	4293      	cmp	r3, r2
 800b382:	f0c0 8095 	bcc.w	800b4b0 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	639a      	str	r2, [r3, #56]	@ 0x38
 800b38c:	2304      	movs	r3, #4
 800b38e:	e0a2      	b.n	800b4d6 <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	899b      	ldrh	r3, [r3, #12]
 800b394:	461a      	mov	r2, r3
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	fbb3 f3f2 	udiv	r3, r3, r2
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	8952      	ldrh	r2, [r2, #10]
 800b3a0:	3a01      	subs	r2, #1
 800b3a2:	4013      	ands	r3, r2
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	f040 8083 	bne.w	800b4b0 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3b0:	4619      	mov	r1, r3
 800b3b2:	4610      	mov	r0, r2
 800b3b4:	f7ff f94a 	bl	800a64c <get_fat>
 800b3b8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d801      	bhi.n	800b3c4 <dir_next+0xb2>
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	e088      	b.n	800b4d6 <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b3c4:	697b      	ldr	r3, [r7, #20]
 800b3c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3ca:	d101      	bne.n	800b3d0 <dir_next+0xbe>
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	e082      	b.n	800b4d6 <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3d4:	697a      	ldr	r2, [r7, #20]
 800b3d6:	429a      	cmp	r2, r3
 800b3d8:	d360      	bcc.n	800b49c <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d104      	bne.n	800b3ea <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	639a      	str	r2, [r3, #56]	@ 0x38
 800b3e6:	2304      	movs	r3, #4
 800b3e8:	e075      	b.n	800b4d6 <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b3ea:	687a      	ldr	r2, [r7, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3f0:	4619      	mov	r1, r3
 800b3f2:	4610      	mov	r0, r2
 800b3f4:	f7ff fdac 	bl	800af50 <create_chain>
 800b3f8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b3fa:	697b      	ldr	r3, [r7, #20]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d101      	bne.n	800b404 <dir_next+0xf2>
 800b400:	2307      	movs	r3, #7
 800b402:	e068      	b.n	800b4d6 <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b404:	697b      	ldr	r3, [r7, #20]
 800b406:	2b01      	cmp	r3, #1
 800b408:	d101      	bne.n	800b40e <dir_next+0xfc>
 800b40a:	2302      	movs	r3, #2
 800b40c:	e063      	b.n	800b4d6 <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b40e:	697b      	ldr	r3, [r7, #20]
 800b410:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b414:	d101      	bne.n	800b41a <dir_next+0x108>
 800b416:	2301      	movs	r3, #1
 800b418:	e05d      	b.n	800b4d6 <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	79db      	ldrb	r3, [r3, #7]
 800b41e:	f043 0304 	orr.w	r3, r3, #4
 800b422:	b2da      	uxtb	r2, r3
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f7ff f80d 	bl	800a448 <sync_window>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <dir_next+0x126>
 800b434:	2301      	movs	r3, #1
 800b436:	e04e      	b.n	800b4d6 <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	899b      	ldrh	r3, [r3, #12]
 800b442:	461a      	mov	r2, r3
 800b444:	2100      	movs	r1, #0
 800b446:	f7fe fe05 	bl	800a054 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b44a:	2300      	movs	r3, #0
 800b44c:	613b      	str	r3, [r7, #16]
 800b44e:	6979      	ldr	r1, [r7, #20]
 800b450:	68f8      	ldr	r0, [r7, #12]
 800b452:	f7ff f8db 	bl	800a60c <clust2sect>
 800b456:	4602      	mov	r2, r0
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b45c:	e012      	b.n	800b484 <dir_next+0x172>
						fs->wflag = 1;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2201      	movs	r2, #1
 800b462:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f7fe ffef 	bl	800a448 <sync_window>
 800b46a:	4603      	mov	r3, r0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d001      	beq.n	800b474 <dir_next+0x162>
 800b470:	2301      	movs	r3, #1
 800b472:	e030      	b.n	800b4d6 <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b474:	693b      	ldr	r3, [r7, #16]
 800b476:	3301      	adds	r3, #1
 800b478:	613b      	str	r3, [r7, #16]
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b47e:	1c5a      	adds	r2, r3, #1
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	63da      	str	r2, [r3, #60]	@ 0x3c
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	895b      	ldrh	r3, [r3, #10]
 800b488:	461a      	mov	r2, r3
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d3e6      	bcc.n	800b45e <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b494:	693b      	ldr	r3, [r7, #16]
 800b496:	1ad2      	subs	r2, r2, r3
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	63da      	str	r2, [r3, #60]	@ 0x3c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 800b4a2:	6979      	ldr	r1, [r7, #20]
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f7ff f8b1 	bl	800a60c <clust2sect>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	68ba      	ldr	r2, [r7, #8]
 800b4b4:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	899b      	ldrh	r3, [r3, #12]
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	fbb3 f0f2 	udiv	r0, r3, r2
 800b4c8:	fb00 f202 	mul.w	r2, r0, r2
 800b4cc:	1a9b      	subs	r3, r3, r2
 800b4ce:	18ca      	adds	r2, r1, r3
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800b4d4:	2300      	movs	r3, #0
}
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	3718      	adds	r7, #24
 800b4da:	46bd      	mov	sp, r7
 800b4dc:	bd80      	pop	{r7, pc}

0800b4de <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b4de:	b580      	push	{r7, lr}
 800b4e0:	b086      	sub	sp, #24
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	6078      	str	r0, [r7, #4]
 800b4e6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b4ee:	2100      	movs	r1, #0
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7ff fe7a 	bl	800b1ea <dir_sdi>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b4fa:	7dfb      	ldrb	r3, [r7, #23]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d140      	bne.n	800b582 <dir_alloc+0xa4>
		n = 0;
 800b500:	2300      	movs	r3, #0
 800b502:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b508:	4619      	mov	r1, r3
 800b50a:	68f8      	ldr	r0, [r7, #12]
 800b50c:	f7fe ffe0 	bl	800a4d0 <move_window>
 800b510:	4603      	mov	r3, r0
 800b512:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b514:	7dfb      	ldrb	r3, [r7, #23]
 800b516:	2b00      	cmp	r3, #0
 800b518:	d132      	bne.n	800b580 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	2b04      	cmp	r3, #4
 800b520:	d108      	bne.n	800b534 <dir_alloc+0x56>
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	b25b      	sxtb	r3, r3
 800b52a:	43db      	mvns	r3, r3
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	09db      	lsrs	r3, r3, #7
 800b530:	b2db      	uxtb	r3, r3
 800b532:	e00f      	b.n	800b554 <dir_alloc+0x76>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	2be5      	cmp	r3, #229	@ 0xe5
 800b53c:	d004      	beq.n	800b548 <dir_alloc+0x6a>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d101      	bne.n	800b54c <dir_alloc+0x6e>
 800b548:	2301      	movs	r3, #1
 800b54a:	e000      	b.n	800b54e <dir_alloc+0x70>
 800b54c:	2300      	movs	r3, #0
 800b54e:	f003 0301 	and.w	r3, r3, #1
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	d007      	beq.n	800b568 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b558:	693b      	ldr	r3, [r7, #16]
 800b55a:	3301      	adds	r3, #1
 800b55c:	613b      	str	r3, [r7, #16]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	429a      	cmp	r2, r3
 800b564:	d102      	bne.n	800b56c <dir_alloc+0x8e>
 800b566:	e00c      	b.n	800b582 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b568:	2300      	movs	r3, #0
 800b56a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b56c:	2101      	movs	r1, #1
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f7ff fecf 	bl	800b312 <dir_next>
 800b574:	4603      	mov	r3, r0
 800b576:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b578:	7dfb      	ldrb	r3, [r7, #23]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d0c2      	beq.n	800b504 <dir_alloc+0x26>
 800b57e:	e000      	b.n	800b582 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b580:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b582:	7dfb      	ldrb	r3, [r7, #23]
 800b584:	2b04      	cmp	r3, #4
 800b586:	d101      	bne.n	800b58c <dir_alloc+0xae>
 800b588:	2307      	movs	r3, #7
 800b58a:	75fb      	strb	r3, [r7, #23]
	return res;
 800b58c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3718      	adds	r7, #24
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}

0800b596 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b596:	b580      	push	{r7, lr}
 800b598:	b084      	sub	sp, #16
 800b59a:	af00      	add	r7, sp, #0
 800b59c:	6078      	str	r0, [r7, #4]
 800b59e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	331a      	adds	r3, #26
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f7fe fb4f 	bl	8009c48 <ld_word>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	781b      	ldrb	r3, [r3, #0]
 800b5b2:	2b03      	cmp	r3, #3
 800b5b4:	d109      	bne.n	800b5ca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	3314      	adds	r3, #20
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f7fe fb44 	bl	8009c48 <ld_word>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	041b      	lsls	r3, r3, #16
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	3710      	adds	r7, #16
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	bd80      	pop	{r7, pc}

0800b5d4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	60f8      	str	r0, [r7, #12]
 800b5dc:	60b9      	str	r1, [r7, #8]
 800b5de:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	331a      	adds	r3, #26
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	b292      	uxth	r2, r2
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7fe fc42 	bl	8009e74 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	2b03      	cmp	r3, #3
 800b5f6:	d109      	bne.n	800b60c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	f103 0214 	add.w	r2, r3, #20
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	0c1b      	lsrs	r3, r3, #16
 800b602:	b29b      	uxth	r3, r3
 800b604:	4619      	mov	r1, r3
 800b606:	4610      	mov	r0, r2
 800b608:	f7fe fc34 	bl	8009e74 <st_word>
	}
}
 800b60c:	bf00      	nop
 800b60e:	3710      	adds	r7, #16
 800b610:	46bd      	mov	sp, r7
 800b612:	bd80      	pop	{r7, pc}

0800b614 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b614:	b590      	push	{r4, r7, lr}
 800b616:	b087      	sub	sp, #28
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	331a      	adds	r3, #26
 800b622:	4618      	mov	r0, r3
 800b624:	f7fe fb10 	bl	8009c48 <ld_word>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d001      	beq.n	800b632 <cmp_lfn+0x1e>
 800b62e:	2300      	movs	r3, #0
 800b630:	e059      	b.n	800b6e6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b63a:	1e5a      	subs	r2, r3, #1
 800b63c:	4613      	mov	r3, r2
 800b63e:	005b      	lsls	r3, r3, #1
 800b640:	4413      	add	r3, r2
 800b642:	009b      	lsls	r3, r3, #2
 800b644:	4413      	add	r3, r2
 800b646:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b648:	2301      	movs	r3, #1
 800b64a:	81fb      	strh	r3, [r7, #14]
 800b64c:	2300      	movs	r3, #0
 800b64e:	613b      	str	r3, [r7, #16]
 800b650:	e033      	b.n	800b6ba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b652:	4a27      	ldr	r2, [pc, #156]	@ (800b6f0 <cmp_lfn+0xdc>)
 800b654:	693b      	ldr	r3, [r7, #16]
 800b656:	4413      	add	r3, r2
 800b658:	781b      	ldrb	r3, [r3, #0]
 800b65a:	461a      	mov	r2, r3
 800b65c:	683b      	ldr	r3, [r7, #0]
 800b65e:	4413      	add	r3, r2
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe faf1 	bl	8009c48 <ld_word>
 800b666:	4603      	mov	r3, r0
 800b668:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b66a:	89fb      	ldrh	r3, [r7, #14]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d01a      	beq.n	800b6a6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2bfe      	cmp	r3, #254	@ 0xfe
 800b674:	d812      	bhi.n	800b69c <cmp_lfn+0x88>
 800b676:	89bb      	ldrh	r3, [r7, #12]
 800b678:	4618      	mov	r0, r3
 800b67a:	f003 fdaf 	bl	800f1dc <ff_wtoupper>
 800b67e:	4603      	mov	r3, r0
 800b680:	461c      	mov	r4, r3
 800b682:	697b      	ldr	r3, [r7, #20]
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	617a      	str	r2, [r7, #20]
 800b688:	005b      	lsls	r3, r3, #1
 800b68a:	687a      	ldr	r2, [r7, #4]
 800b68c:	4413      	add	r3, r2
 800b68e:	881b      	ldrh	r3, [r3, #0]
 800b690:	4618      	mov	r0, r3
 800b692:	f003 fda3 	bl	800f1dc <ff_wtoupper>
 800b696:	4603      	mov	r3, r0
 800b698:	429c      	cmp	r4, r3
 800b69a:	d001      	beq.n	800b6a0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b69c:	2300      	movs	r3, #0
 800b69e:	e022      	b.n	800b6e6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800b6a0:	89bb      	ldrh	r3, [r7, #12]
 800b6a2:	81fb      	strh	r3, [r7, #14]
 800b6a4:	e006      	b.n	800b6b4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b6a6:	89bb      	ldrh	r3, [r7, #12]
 800b6a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b6ac:	4293      	cmp	r3, r2
 800b6ae:	d001      	beq.n	800b6b4 <cmp_lfn+0xa0>
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	e018      	b.n	800b6e6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	613b      	str	r3, [r7, #16]
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	2b0c      	cmp	r3, #12
 800b6be:	d9c8      	bls.n	800b652 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	781b      	ldrb	r3, [r3, #0]
 800b6c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d00b      	beq.n	800b6e4 <cmp_lfn+0xd0>
 800b6cc:	89fb      	ldrh	r3, [r7, #14]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d008      	beq.n	800b6e4 <cmp_lfn+0xd0>
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	005b      	lsls	r3, r3, #1
 800b6d6:	687a      	ldr	r2, [r7, #4]
 800b6d8:	4413      	add	r3, r2
 800b6da:	881b      	ldrh	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d001      	beq.n	800b6e4 <cmp_lfn+0xd0>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e000      	b.n	800b6e6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b6e4:	2301      	movs	r3, #1
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd90      	pop	{r4, r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	080142b8 	.word	0x080142b8

0800b6f4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b086      	sub	sp, #24
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	331a      	adds	r3, #26
 800b702:	4618      	mov	r0, r3
 800b704:	f7fe faa0 	bl	8009c48 <ld_word>
 800b708:	4603      	mov	r3, r0
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d001      	beq.n	800b712 <pick_lfn+0x1e>
 800b70e:	2300      	movs	r3, #0
 800b710:	e04d      	b.n	800b7ae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b71a:	1e5a      	subs	r2, r3, #1
 800b71c:	4613      	mov	r3, r2
 800b71e:	005b      	lsls	r3, r3, #1
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	4413      	add	r3, r2
 800b726:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b728:	2301      	movs	r3, #1
 800b72a:	81fb      	strh	r3, [r7, #14]
 800b72c:	2300      	movs	r3, #0
 800b72e:	613b      	str	r3, [r7, #16]
 800b730:	e028      	b.n	800b784 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b732:	4a21      	ldr	r2, [pc, #132]	@ (800b7b8 <pick_lfn+0xc4>)
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	4413      	add	r3, r2
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	461a      	mov	r2, r3
 800b73c:	683b      	ldr	r3, [r7, #0]
 800b73e:	4413      	add	r3, r2
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe fa81 	bl	8009c48 <ld_word>
 800b746:	4603      	mov	r3, r0
 800b748:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b74a:	89fb      	ldrh	r3, [r7, #14]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d00f      	beq.n	800b770 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	2bfe      	cmp	r3, #254	@ 0xfe
 800b754:	d901      	bls.n	800b75a <pick_lfn+0x66>
 800b756:	2300      	movs	r3, #0
 800b758:	e029      	b.n	800b7ae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b75a:	89bb      	ldrh	r3, [r7, #12]
 800b75c:	81fb      	strh	r3, [r7, #14]
 800b75e:	697b      	ldr	r3, [r7, #20]
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	617a      	str	r2, [r7, #20]
 800b764:	005b      	lsls	r3, r3, #1
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	4413      	add	r3, r2
 800b76a:	89fa      	ldrh	r2, [r7, #14]
 800b76c:	801a      	strh	r2, [r3, #0]
 800b76e:	e006      	b.n	800b77e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b770:	89bb      	ldrh	r3, [r7, #12]
 800b772:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b776:	4293      	cmp	r3, r2
 800b778:	d001      	beq.n	800b77e <pick_lfn+0x8a>
 800b77a:	2300      	movs	r3, #0
 800b77c:	e017      	b.n	800b7ae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	3301      	adds	r3, #1
 800b782:	613b      	str	r3, [r7, #16]
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	2b0c      	cmp	r3, #12
 800b788:	d9d3      	bls.n	800b732 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b792:	2b00      	cmp	r3, #0
 800b794:	d00a      	beq.n	800b7ac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	2bfe      	cmp	r3, #254	@ 0xfe
 800b79a:	d901      	bls.n	800b7a0 <pick_lfn+0xac>
 800b79c:	2300      	movs	r3, #0
 800b79e:	e006      	b.n	800b7ae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	4413      	add	r3, r2
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b7ac:	2301      	movs	r3, #1
}
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	3718      	adds	r7, #24
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	080142b8 	.word	0x080142b8

0800b7bc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b088      	sub	sp, #32
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	60f8      	str	r0, [r7, #12]
 800b7c4:	60b9      	str	r1, [r7, #8]
 800b7c6:	4611      	mov	r1, r2
 800b7c8:	461a      	mov	r2, r3
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	71fb      	strb	r3, [r7, #7]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b7d2:	68bb      	ldr	r3, [r7, #8]
 800b7d4:	330d      	adds	r3, #13
 800b7d6:	79ba      	ldrb	r2, [r7, #6]
 800b7d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	330b      	adds	r3, #11
 800b7de:	220f      	movs	r2, #15
 800b7e0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	330c      	adds	r3, #12
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	331a      	adds	r3, #26
 800b7ee:	2100      	movs	r1, #0
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	f7fe fb3f 	bl	8009e74 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	1e5a      	subs	r2, r3, #1
 800b7fa:	4613      	mov	r3, r2
 800b7fc:	005b      	lsls	r3, r3, #1
 800b7fe:	4413      	add	r3, r2
 800b800:	009b      	lsls	r3, r3, #2
 800b802:	4413      	add	r3, r2
 800b804:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b806:	2300      	movs	r3, #0
 800b808:	82fb      	strh	r3, [r7, #22]
 800b80a:	2300      	movs	r3, #0
 800b80c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b80e:	8afb      	ldrh	r3, [r7, #22]
 800b810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b814:	4293      	cmp	r3, r2
 800b816:	d007      	beq.n	800b828 <put_lfn+0x6c>
 800b818:	69fb      	ldr	r3, [r7, #28]
 800b81a:	1c5a      	adds	r2, r3, #1
 800b81c:	61fa      	str	r2, [r7, #28]
 800b81e:	005b      	lsls	r3, r3, #1
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4413      	add	r3, r2
 800b824:	881b      	ldrh	r3, [r3, #0]
 800b826:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b828:	4a17      	ldr	r2, [pc, #92]	@ (800b888 <put_lfn+0xcc>)
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	4413      	add	r3, r2
 800b82e:	781b      	ldrb	r3, [r3, #0]
 800b830:	461a      	mov	r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	4413      	add	r3, r2
 800b836:	8afa      	ldrh	r2, [r7, #22]
 800b838:	4611      	mov	r1, r2
 800b83a:	4618      	mov	r0, r3
 800b83c:	f7fe fb1a 	bl	8009e74 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b840:	8afb      	ldrh	r3, [r7, #22]
 800b842:	2b00      	cmp	r3, #0
 800b844:	d102      	bne.n	800b84c <put_lfn+0x90>
 800b846:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b84a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b84c:	69bb      	ldr	r3, [r7, #24]
 800b84e:	3301      	adds	r3, #1
 800b850:	61bb      	str	r3, [r7, #24]
 800b852:	69bb      	ldr	r3, [r7, #24]
 800b854:	2b0c      	cmp	r3, #12
 800b856:	d9da      	bls.n	800b80e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b858:	8afb      	ldrh	r3, [r7, #22]
 800b85a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b85e:	4293      	cmp	r3, r2
 800b860:	d006      	beq.n	800b870 <put_lfn+0xb4>
 800b862:	69fb      	ldr	r3, [r7, #28]
 800b864:	005b      	lsls	r3, r3, #1
 800b866:	68fa      	ldr	r2, [r7, #12]
 800b868:	4413      	add	r3, r2
 800b86a:	881b      	ldrh	r3, [r3, #0]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d103      	bne.n	800b878 <put_lfn+0xbc>
 800b870:	79fb      	ldrb	r3, [r7, #7]
 800b872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b876:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	79fa      	ldrb	r2, [r7, #7]
 800b87c:	701a      	strb	r2, [r3, #0]
}
 800b87e:	bf00      	nop
 800b880:	3720      	adds	r7, #32
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}
 800b886:	bf00      	nop
 800b888:	080142b8 	.word	0x080142b8

0800b88c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b08c      	sub	sp, #48	@ 0x30
 800b890:	af00      	add	r7, sp, #0
 800b892:	60f8      	str	r0, [r7, #12]
 800b894:	60b9      	str	r1, [r7, #8]
 800b896:	607a      	str	r2, [r7, #4]
 800b898:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b89a:	220b      	movs	r2, #11
 800b89c:	68b9      	ldr	r1, [r7, #8]
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7fe fbb7 	bl	800a012 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	2b05      	cmp	r3, #5
 800b8a8:	d92b      	bls.n	800b902 <gen_numname+0x76>
		sr = seq;
 800b8aa:	683b      	ldr	r3, [r7, #0]
 800b8ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b8ae:	e022      	b.n	800b8f6 <gen_numname+0x6a>
			wc = *lfn++;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	1c9a      	adds	r2, r3, #2
 800b8b4:	607a      	str	r2, [r7, #4]
 800b8b6:	881b      	ldrh	r3, [r3, #0]
 800b8b8:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8be:	e017      	b.n	800b8f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	005a      	lsls	r2, r3, #1
 800b8c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b8c6:	f003 0301 	and.w	r3, r3, #1
 800b8ca:	4413      	add	r3, r2
 800b8cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b8ce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b8d0:	085b      	lsrs	r3, r3, #1
 800b8d2:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b8d4:	69fb      	ldr	r3, [r7, #28]
 800b8d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d005      	beq.n	800b8ea <gen_numname+0x5e>
 800b8de:	69fb      	ldr	r3, [r7, #28]
 800b8e0:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800b8e4:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800b8e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b8f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8f2:	2b0f      	cmp	r3, #15
 800b8f4:	d9e4      	bls.n	800b8c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	881b      	ldrh	r3, [r3, #0]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d1d8      	bne.n	800b8b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b8fe:	69fb      	ldr	r3, [r7, #28]
 800b900:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b902:	2307      	movs	r3, #7
 800b904:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	b2db      	uxtb	r3, r3
 800b90a:	f003 030f 	and.w	r3, r3, #15
 800b90e:	b2db      	uxtb	r3, r3
 800b910:	3330      	adds	r3, #48	@ 0x30
 800b912:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800b916:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b91a:	2b39      	cmp	r3, #57	@ 0x39
 800b91c:	d904      	bls.n	800b928 <gen_numname+0x9c>
 800b91e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b922:	3307      	adds	r3, #7
 800b924:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800b928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b92a:	1e5a      	subs	r2, r3, #1
 800b92c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b92e:	3330      	adds	r3, #48	@ 0x30
 800b930:	443b      	add	r3, r7
 800b932:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800b936:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	091b      	lsrs	r3, r3, #4
 800b93e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b940:	683b      	ldr	r3, [r7, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1df      	bne.n	800b906 <gen_numname+0x7a>
	ns[i] = '~';
 800b946:	f107 0214 	add.w	r2, r7, #20
 800b94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b94c:	4413      	add	r3, r2
 800b94e:	227e      	movs	r2, #126	@ 0x7e
 800b950:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b952:	2300      	movs	r3, #0
 800b954:	627b      	str	r3, [r7, #36]	@ 0x24
 800b956:	e002      	b.n	800b95e <gen_numname+0xd2>
 800b958:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95a:	3301      	adds	r3, #1
 800b95c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b95e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b962:	429a      	cmp	r2, r3
 800b964:	d205      	bcs.n	800b972 <gen_numname+0xe6>
 800b966:	68fa      	ldr	r2, [r7, #12]
 800b968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96a:	4413      	add	r3, r2
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	2b20      	cmp	r3, #32
 800b970:	d1f2      	bne.n	800b958 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b974:	2b07      	cmp	r3, #7
 800b976:	d807      	bhi.n	800b988 <gen_numname+0xfc>
 800b978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b97a:	1c5a      	adds	r2, r3, #1
 800b97c:	62ba      	str	r2, [r7, #40]	@ 0x28
 800b97e:	3330      	adds	r3, #48	@ 0x30
 800b980:	443b      	add	r3, r7
 800b982:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b986:	e000      	b.n	800b98a <gen_numname+0xfe>
 800b988:	2120      	movs	r1, #32
 800b98a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b98c:	1c5a      	adds	r2, r3, #1
 800b98e:	627a      	str	r2, [r7, #36]	@ 0x24
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4413      	add	r3, r2
 800b994:	460a      	mov	r2, r1
 800b996:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b99a:	2b07      	cmp	r3, #7
 800b99c:	d9e9      	bls.n	800b972 <gen_numname+0xe6>
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	3730      	adds	r7, #48	@ 0x30
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}

0800b9a8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b9b4:	230b      	movs	r3, #11
 800b9b6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b9b8:	7bfb      	ldrb	r3, [r7, #15]
 800b9ba:	b2da      	uxtb	r2, r3
 800b9bc:	0852      	lsrs	r2, r2, #1
 800b9be:	01db      	lsls	r3, r3, #7
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	b2da      	uxtb	r2, r3
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	1c59      	adds	r1, r3, #1
 800b9c8:	6079      	str	r1, [r7, #4]
 800b9ca:	781b      	ldrb	r3, [r3, #0]
 800b9cc:	4413      	add	r3, r2
 800b9ce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b9d0:	68bb      	ldr	r3, [r7, #8]
 800b9d2:	3b01      	subs	r3, #1
 800b9d4:	60bb      	str	r3, [r7, #8]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d1ed      	bne.n	800b9b8 <sum_sfn+0x10>
	return sum;
 800b9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3714      	adds	r7, #20
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e8:	4770      	bx	lr

0800b9ea <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b9ea:	b480      	push	{r7}
 800b9ec:	b087      	sub	sp, #28
 800b9ee:	af00      	add	r7, sp, #0
 800b9f0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	015b      	lsls	r3, r3, #5
 800b9fc:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b9fe:	2300      	movs	r3, #0
 800ba00:	827b      	strh	r3, [r7, #18]
 800ba02:	2300      	movs	r3, #0
 800ba04:	617b      	str	r3, [r7, #20]
 800ba06:	e017      	b.n	800ba38 <xdir_sum+0x4e>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d103      	bne.n	800ba16 <xdir_sum+0x2c>
			i++;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	3301      	adds	r3, #1
 800ba12:	617b      	str	r3, [r7, #20]
 800ba14:	e00d      	b.n	800ba32 <xdir_sum+0x48>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800ba16:	8a7b      	ldrh	r3, [r7, #18]
 800ba18:	03db      	lsls	r3, r3, #15
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	8a7b      	ldrh	r3, [r7, #18]
 800ba1e:	085b      	lsrs	r3, r3, #1
 800ba20:	b29b      	uxth	r3, r3
 800ba22:	4413      	add	r3, r2
 800ba24:	b29b      	uxth	r3, r3
 800ba26:	6879      	ldr	r1, [r7, #4]
 800ba28:	697a      	ldr	r2, [r7, #20]
 800ba2a:	440a      	add	r2, r1
 800ba2c:	7812      	ldrb	r2, [r2, #0]
 800ba2e:	4413      	add	r3, r2
 800ba30:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	3301      	adds	r3, #1
 800ba36:	617b      	str	r3, [r7, #20]
 800ba38:	697a      	ldr	r2, [r7, #20]
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d3e3      	bcc.n	800ba08 <xdir_sum+0x1e>
		}
	}
	return sum;
 800ba40:	8a7b      	ldrh	r3, [r7, #18]
}
 800ba42:	4618      	mov	r0, r3
 800ba44:	371c      	adds	r7, #28
 800ba46:	46bd      	mov	sp, r7
 800ba48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4c:	4770      	bx	lr

0800ba4e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ba4e:	b580      	push	{r7, lr}
 800ba50:	b084      	sub	sp, #16
 800ba52:	af00      	add	r7, sp, #0
 800ba54:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ba56:	2300      	movs	r3, #0
 800ba58:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ba5a:	e01f      	b.n	800ba9c <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ba5c:	89bb      	ldrh	r3, [r7, #12]
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f003 fbbc 	bl	800f1dc <ff_wtoupper>
 800ba64:	4603      	mov	r3, r0
 800ba66:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ba68:	89fb      	ldrh	r3, [r7, #14]
 800ba6a:	03db      	lsls	r3, r3, #15
 800ba6c:	b29a      	uxth	r2, r3
 800ba6e:	89fb      	ldrh	r3, [r7, #14]
 800ba70:	085b      	lsrs	r3, r3, #1
 800ba72:	b29b      	uxth	r3, r3
 800ba74:	4413      	add	r3, r2
 800ba76:	b29a      	uxth	r2, r3
 800ba78:	89bb      	ldrh	r3, [r7, #12]
 800ba7a:	b2db      	uxtb	r3, r3
 800ba7c:	b29b      	uxth	r3, r3
 800ba7e:	4413      	add	r3, r2
 800ba80:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ba82:	89fb      	ldrh	r3, [r7, #14]
 800ba84:	03db      	lsls	r3, r3, #15
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	89fb      	ldrh	r3, [r7, #14]
 800ba8a:	085b      	lsrs	r3, r3, #1
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	4413      	add	r3, r2
 800ba90:	b29a      	uxth	r2, r3
 800ba92:	89bb      	ldrh	r3, [r7, #12]
 800ba94:	0a1b      	lsrs	r3, r3, #8
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	4413      	add	r3, r2
 800ba9a:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	1c9a      	adds	r2, r3, #2
 800baa0:	607a      	str	r2, [r7, #4]
 800baa2:	881b      	ldrh	r3, [r3, #0]
 800baa4:	81bb      	strh	r3, [r7, #12]
 800baa6:	89bb      	ldrh	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d1d7      	bne.n	800ba5c <xname_sum+0xe>
	}
	return sum;
 800baac:	89fb      	ldrh	r3, [r7, #14]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <get_xdir_info>:
static
void get_xdir_info (
	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
	FILINFO* fno		/* Buffer to store the extracted file information */
)
{
 800bab6:	b580      	push	{r7, lr}
 800bab8:	b086      	sub	sp, #24
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
#if !_LFN_UNICODE
	UINT nc;
#endif

	/* Get file name */
	di = 0;
 800bac0:	2300      	movs	r3, #0
 800bac2:	617b      	str	r3, [r7, #20]
		w = ld_word(dirb + si);					/* Get a character */
		if (di >= _MAX_LFN) { di = 0; break; }	/* Buffer overflow --> inaccessible object name */
		fno->fname[di] = w;						/* Store it */
	}
#else
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bac4:	2340      	movs	r3, #64	@ 0x40
 800bac6:	613b      	str	r3, [r7, #16]
 800bac8:	2300      	movs	r3, #0
 800baca:	60fb      	str	r3, [r7, #12]
 800bacc:	e02c      	b.n	800bb28 <get_xdir_info+0x72>
		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
 800bace:	693b      	ldr	r3, [r7, #16]
 800bad0:	f003 031f 	and.w	r3, r3, #31
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d102      	bne.n	800bade <get_xdir_info+0x28>
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	3302      	adds	r3, #2
 800badc:	613b      	str	r3, [r7, #16]
		w = ff_convert(ld_word(dirb + si), 0);	/* Get a character and Unicode -> OEM */
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	693b      	ldr	r3, [r7, #16]
 800bae2:	4413      	add	r3, r2
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fe f8af 	bl	8009c48 <ld_word>
 800baea:	4603      	mov	r3, r0
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f003 fb38 	bl	800f164 <ff_convert>
 800baf4:	4603      	mov	r3, r0
 800baf6:	817b      	strh	r3, [r7, #10]
		if (_DF1S && w >= 0x100) {				/* Is it a double byte char? (always false at SBCS cfg) */
			fno->fname[di++] = (char)(w >> 8);	/* Put 1st byte of the DBC */
		}
		if (w == 0 || di >= _MAX_LFN) { di = 0; break; }	/* Invalid char or buffer overflow --> inaccessible object name */
 800baf8:	897b      	ldrh	r3, [r7, #10]
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d002      	beq.n	800bb04 <get_xdir_info+0x4e>
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	2bfe      	cmp	r3, #254	@ 0xfe
 800bb02:	d902      	bls.n	800bb0a <get_xdir_info+0x54>
 800bb04:	2300      	movs	r3, #0
 800bb06:	617b      	str	r3, [r7, #20]
 800bb08:	e015      	b.n	800bb36 <get_xdir_info+0x80>
		fno->fname[di++] = (char)w;
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	1c5a      	adds	r2, r3, #1
 800bb0e:	617a      	str	r2, [r7, #20]
 800bb10:	897a      	ldrh	r2, [r7, #10]
 800bb12:	b2d1      	uxtb	r1, r2
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	4413      	add	r3, r2
 800bb18:	460a      	mov	r2, r1
 800bb1a:	769a      	strb	r2, [r3, #26]
	for (si = SZDIRE * 2, nc = 0; nc < dirb[XDIR_NumName]; si += 2, nc++) {
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	3302      	adds	r3, #2
 800bb20:	613b      	str	r3, [r7, #16]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	3301      	adds	r3, #1
 800bb26:	60fb      	str	r3, [r7, #12]
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	3323      	adds	r3, #35	@ 0x23
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	461a      	mov	r2, r3
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d3cb      	bcc.n	800bace <get_xdir_info+0x18>
	}
#endif
	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d106      	bne.n	800bb4a <get_xdir_info+0x94>
 800bb3c:	697b      	ldr	r3, [r7, #20]
 800bb3e:	1c5a      	adds	r2, r3, #1
 800bb40:	617a      	str	r2, [r7, #20]
 800bb42:	683a      	ldr	r2, [r7, #0]
 800bb44:	4413      	add	r3, r2
 800bb46:	223f      	movs	r2, #63	@ 0x3f
 800bb48:	769a      	strb	r2, [r3, #26]
	fno->fname[di] = 0;						/* Terminate file name */
 800bb4a:	683a      	ldr	r2, [r7, #0]
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	4413      	add	r3, r2
 800bb50:	331a      	adds	r3, #26
 800bb52:	2200      	movs	r2, #0
 800bb54:	701a      	strb	r2, [r3, #0]

	fno->altname[0] = 0;							/* No SFN */
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2200      	movs	r2, #0
 800bb5a:	735a      	strb	r2, [r3, #13]
	fno->fattrib = dirb[XDIR_Attr];					/* Attribute */
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	791a      	ldrb	r2, [r3, #4]
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	731a      	strb	r2, [r3, #12]
	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	7b1b      	ldrb	r3, [r3, #12]
 800bb68:	f003 0310 	and.w	r3, r3, #16
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d107      	bne.n	800bb80 <get_xdir_info+0xca>
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	3338      	adds	r3, #56	@ 0x38
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fe f8a2 	bl	8009cbe <ld_qword>
 800bb7a:	4602      	mov	r2, r0
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	e003      	b.n	800bb88 <get_xdir_info+0xd2>
 800bb80:	f04f 0200 	mov.w	r2, #0
 800bb84:	f04f 0300 	mov.w	r3, #0
 800bb88:	6839      	ldr	r1, [r7, #0]
 800bb8a:	e9c1 2300 	strd	r2, r3, [r1]
	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	330c      	adds	r3, #12
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe f858 	bl	8009c48 <ld_word>
 800bb98:	4603      	mov	r3, r0
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	330e      	adds	r3, #14
 800bba4:	4618      	mov	r0, r3
 800bba6:	f7fe f84f 	bl	8009c48 <ld_word>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	461a      	mov	r2, r3
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	811a      	strh	r2, [r3, #8]
}
 800bbb2:	bf00      	nop
 800bbb4:	3718      	adds	r7, #24
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	bd80      	pop	{r7, pc}
	...

0800bbbc <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800bbbc:	b590      	push	{r4, r7, lr}
 800bbbe:	b087      	sub	sp, #28
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	695b      	ldr	r3, [r3, #20]
 800bbca:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681a      	ldr	r2, [r3, #0]
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f7fe fc7a 	bl	800a4d0 <move_window>
 800bbdc:	4603      	mov	r3, r0
 800bbde:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bbe0:	7bfb      	ldrb	r3, [r7, #15]
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d001      	beq.n	800bbea <load_xdir+0x2e>
 800bbe6:	7bfb      	ldrb	r3, [r7, #15]
 800bbe8:	e09f      	b.n	800bd2a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	2b85      	cmp	r3, #133	@ 0x85
 800bbf2:	d001      	beq.n	800bbf8 <load_xdir+0x3c>
 800bbf4:	2302      	movs	r3, #2
 800bbf6:	e098      	b.n	800bd2a <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bbfc:	2220      	movs	r2, #32
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6938      	ldr	r0, [r7, #16]
 800bc02:	f7fe fa06 	bl	800a012 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800bc06:	693b      	ldr	r3, [r7, #16]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	781b      	ldrb	r3, [r3, #0]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	015b      	lsls	r3, r3, #5
 800bc10:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800bc12:	68bb      	ldr	r3, [r7, #8]
 800bc14:	2b5f      	cmp	r3, #95	@ 0x5f
 800bc16:	d903      	bls.n	800bc20 <load_xdir+0x64>
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bc1e:	d901      	bls.n	800bc24 <load_xdir+0x68>
 800bc20:	2302      	movs	r3, #2
 800bc22:	e082      	b.n	800bd2a <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800bc24:	2100      	movs	r1, #0
 800bc26:	6878      	ldr	r0, [r7, #4]
 800bc28:	f7ff fb73 	bl	800b312 <dir_next>
 800bc2c:	4603      	mov	r3, r0
 800bc2e:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bc30:	7bfb      	ldrb	r3, [r7, #15]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d001      	beq.n	800bc3a <load_xdir+0x7e>
 800bc36:	7bfb      	ldrb	r3, [r7, #15]
 800bc38:	e077      	b.n	800bd2a <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681a      	ldr	r2, [r3, #0]
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bc42:	4619      	mov	r1, r3
 800bc44:	4610      	mov	r0, r2
 800bc46:	f7fe fc43 	bl	800a4d0 <move_window>
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800bc4e:	7bfb      	ldrb	r3, [r7, #15]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d001      	beq.n	800bc58 <load_xdir+0x9c>
 800bc54:	7bfb      	ldrb	r3, [r7, #15]
 800bc56:	e068      	b.n	800bd2a <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	2bc0      	cmp	r3, #192	@ 0xc0
 800bc60:	d001      	beq.n	800bc66 <load_xdir+0xaa>
 800bc62:	2302      	movs	r3, #2
 800bc64:	e061      	b.n	800bd2a <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800bc66:	693b      	ldr	r3, [r7, #16]
 800bc68:	f103 0020 	add.w	r0, r3, #32
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc70:	2220      	movs	r2, #32
 800bc72:	4619      	mov	r1, r3
 800bc74:	f7fe f9cd 	bl	800a012 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	3323      	adds	r3, #35	@ 0x23
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	332c      	adds	r3, #44	@ 0x2c
 800bc80:	4a2c      	ldr	r2, [pc, #176]	@ (800bd34 <load_xdir+0x178>)
 800bc82:	fba2 2303 	umull	r2, r3, r2, r3
 800bc86:	08db      	lsrs	r3, r3, #3
 800bc88:	015b      	lsls	r3, r3, #5
 800bc8a:	68ba      	ldr	r2, [r7, #8]
 800bc8c:	429a      	cmp	r2, r3
 800bc8e:	d201      	bcs.n	800bc94 <load_xdir+0xd8>
 800bc90:	2302      	movs	r3, #2
 800bc92:	e04a      	b.n	800bd2a <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800bc94:	2340      	movs	r3, #64	@ 0x40
 800bc96:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800bc98:	2100      	movs	r1, #0
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff fb39 	bl	800b312 <dir_next>
 800bca0:	4603      	mov	r3, r0
 800bca2:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bca4:	7bfb      	ldrb	r3, [r7, #15]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <load_xdir+0xf2>
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
 800bcac:	e03d      	b.n	800bd2a <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681a      	ldr	r2, [r3, #0]
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcb6:	4619      	mov	r1, r3
 800bcb8:	4610      	mov	r0, r2
 800bcba:	f7fe fc09 	bl	800a4d0 <move_window>
 800bcbe:	4603      	mov	r3, r0
 800bcc0:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800bcc2:	7bfb      	ldrb	r3, [r7, #15]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <load_xdir+0x110>
 800bcc8:	7bfb      	ldrb	r3, [r7, #15]
 800bcca:	e02e      	b.n	800bd2a <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	2bc1      	cmp	r3, #193	@ 0xc1
 800bcd4:	d001      	beq.n	800bcda <load_xdir+0x11e>
 800bcd6:	2302      	movs	r3, #2
 800bcd8:	e027      	b.n	800bd2a <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bce0:	d208      	bcs.n	800bcf4 <load_xdir+0x138>
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	18d0      	adds	r0, r2, r3
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bcec:	2220      	movs	r2, #32
 800bcee:	4619      	mov	r1, r3
 800bcf0:	f7fe f98f 	bl	800a012 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	3320      	adds	r3, #32
 800bcf8:	617b      	str	r3, [r7, #20]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d3ca      	bcc.n	800bc98 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800bd02:	697b      	ldr	r3, [r7, #20]
 800bd04:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800bd08:	d80e      	bhi.n	800bd28 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800bd0a:	6938      	ldr	r0, [r7, #16]
 800bd0c:	f7ff fe6d 	bl	800b9ea <xdir_sum>
 800bd10:	4603      	mov	r3, r0
 800bd12:	461c      	mov	r4, r3
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	3302      	adds	r3, #2
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7fd ff95 	bl	8009c48 <ld_word>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	429c      	cmp	r4, r3
 800bd22:	d001      	beq.n	800bd28 <load_xdir+0x16c>
 800bd24:	2302      	movs	r3, #2
 800bd26:	e000      	b.n	800bd2a <load_xdir+0x16e>
	}
	return FR_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd90      	pop	{r4, r7, pc}
 800bd32:	bf00      	nop
 800bd34:	88888889 	.word	0x88888889

0800bd38 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800bd38:	b5b0      	push	{r4, r5, r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800bd42:	6839      	ldr	r1, [r7, #0]
 800bd44:	6808      	ldr	r0, [r1, #0]
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800bd4a:	6839      	ldr	r1, [r7, #0]
 800bd4c:	6a08      	ldr	r0, [r1, #32]
 800bd4e:	6879      	ldr	r1, [r7, #4]
 800bd50:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800bd52:	6839      	ldr	r1, [r7, #0]
 800bd54:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bd56:	b2c8      	uxtb	r0, r1
 800bd58:	6879      	ldr	r1, [r7, #4]
 800bd5a:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800bd5c:	6839      	ldr	r1, [r7, #0]
 800bd5e:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 800bd60:	2000      	movs	r0, #0
 800bd62:	460c      	mov	r4, r1
 800bd64:	4605      	mov	r5, r0
 800bd66:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 800bd6a:	2300      	movs	r3, #0
 800bd6c:	6879      	ldr	r1, [r7, #4]
 800bd6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800bd72:	683b      	ldr	r3, [r7, #0]
 800bd74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bd7e:	4619      	mov	r1, r3
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff fa32 	bl	800b1ea <dir_sdi>
 800bd86:	4603      	mov	r3, r0
 800bd88:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800bd8a:	7bfb      	ldrb	r3, [r7, #15]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d104      	bne.n	800bd9a <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff ff13 	bl	800bbbc <load_xdir>
 800bd96:	4603      	mov	r3, r0
 800bd98:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800bd9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	3710      	adds	r7, #16
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bdb0      	pop	{r4, r5, r7, pc}

0800bda4 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800bda4:	b590      	push	{r4, r7, lr}
 800bda6:	b087      	sub	sp, #28
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	1c9c      	adds	r4, r3, #2
 800bdb8:	68f8      	ldr	r0, [r7, #12]
 800bdba:	f7ff fe16 	bl	800b9ea <xdir_sum>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	4619      	mov	r1, r3
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f7fe f856 	bl	8009e74 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	781b      	ldrb	r3, [r3, #0]
 800bdce:	3301      	adds	r3, #1
 800bdd0:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bdd6:	4619      	mov	r1, r3
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff fa06 	bl	800b1ea <dir_sdi>
 800bdde:	4603      	mov	r3, r0
 800bde0:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800bde2:	e026      	b.n	800be32 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681a      	ldr	r2, [r3, #0]
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdec:	4619      	mov	r1, r3
 800bdee:	4610      	mov	r0, r2
 800bdf0:	f7fe fb6e 	bl	800a4d0 <move_window>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d11d      	bne.n	800be3a <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be02:	2220      	movs	r2, #32
 800be04:	68f9      	ldr	r1, [r7, #12]
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe f903 	bl	800a012 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	2201      	movs	r2, #1
 800be12:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800be14:	693b      	ldr	r3, [r7, #16]
 800be16:	3b01      	subs	r3, #1
 800be18:	613b      	str	r3, [r7, #16]
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d00e      	beq.n	800be3e <store_xdir+0x9a>
		dirb += SZDIRE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	3320      	adds	r3, #32
 800be24:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800be26:	2100      	movs	r1, #0
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f7ff fa72 	bl	800b312 <dir_next>
 800be2e:	4603      	mov	r3, r0
 800be30:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800be32:	7dfb      	ldrb	r3, [r7, #23]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d0d5      	beq.n	800bde4 <store_xdir+0x40>
 800be38:	e002      	b.n	800be40 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800be3a:	bf00      	nop
 800be3c:	e000      	b.n	800be40 <store_xdir+0x9c>
		if (--nent == 0) break;
 800be3e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800be40:	7dfb      	ldrb	r3, [r7, #23]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d002      	beq.n	800be4c <store_xdir+0xa8>
 800be46:	7dfb      	ldrb	r3, [r7, #23]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d101      	bne.n	800be50 <store_xdir+0xac>
 800be4c:	7dfb      	ldrb	r3, [r7, #23]
 800be4e:	e000      	b.n	800be52 <store_xdir+0xae>
 800be50:	2302      	movs	r3, #2
}
 800be52:	4618      	mov	r0, r3
 800be54:	371c      	adds	r7, #28
 800be56:	46bd      	mov	sp, r7
 800be58:	bd90      	pop	{r4, r7, pc}

0800be5a <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800be5a:	b590      	push	{r4, r7, lr}
 800be5c:	b085      	sub	sp, #20
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
 800be62:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800be64:	2240      	movs	r2, #64	@ 0x40
 800be66:	2100      	movs	r1, #0
 800be68:	6878      	ldr	r0, [r7, #4]
 800be6a:	f7fe f8f3 	bl	800a054 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2285      	movs	r2, #133	@ 0x85
 800be72:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	3320      	adds	r3, #32
 800be78:	22c0      	movs	r2, #192	@ 0xc0
 800be7a:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800be7c:	2300      	movs	r3, #0
 800be7e:	72bb      	strb	r3, [r7, #10]
 800be80:	2301      	movs	r3, #1
 800be82:	72fb      	strb	r3, [r7, #11]
 800be84:	2301      	movs	r3, #1
 800be86:	813b      	strh	r3, [r7, #8]
 800be88:	2340      	movs	r3, #64	@ 0x40
 800be8a:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	1c5a      	adds	r2, r3, #1
 800be90:	60fa      	str	r2, [r7, #12]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	4413      	add	r3, r2
 800be96:	22c1      	movs	r2, #193	@ 0xc1
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	60fa      	str	r2, [r7, #12]
 800bea0:	687a      	ldr	r2, [r7, #4]
 800bea2:	4413      	add	r3, r2
 800bea4:	2200      	movs	r2, #0
 800bea6:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800bea8:	893b      	ldrh	r3, [r7, #8]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d00b      	beq.n	800bec6 <create_xdir+0x6c>
 800beae:	7abb      	ldrb	r3, [r7, #10]
 800beb0:	005b      	lsls	r3, r3, #1
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	4413      	add	r3, r2
 800beb6:	881b      	ldrh	r3, [r3, #0]
 800beb8:	813b      	strh	r3, [r7, #8]
 800beba:	893b      	ldrh	r3, [r7, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d002      	beq.n	800bec6 <create_xdir+0x6c>
 800bec0:	7abb      	ldrb	r3, [r7, #10]
 800bec2:	3301      	adds	r3, #1
 800bec4:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	4413      	add	r3, r2
 800becc:	893a      	ldrh	r2, [r7, #8]
 800bece:	4611      	mov	r1, r2
 800bed0:	4618      	mov	r0, r3
 800bed2:	f7fd ffcf 	bl	8009e74 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3302      	adds	r3, #2
 800beda:	60fb      	str	r3, [r7, #12]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	f003 031f 	and.w	r3, r3, #31
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1e0      	bne.n	800bea8 <create_xdir+0x4e>
		nb++;
 800bee6:	7afb      	ldrb	r3, [r7, #11]
 800bee8:	3301      	adds	r3, #1
 800beea:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800beec:	7abb      	ldrb	r3, [r7, #10]
 800beee:	005b      	lsls	r3, r3, #1
 800bef0:	683a      	ldr	r2, [r7, #0]
 800bef2:	4413      	add	r3, r2
 800bef4:	881b      	ldrh	r3, [r3, #0]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d1c8      	bne.n	800be8c <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	3323      	adds	r3, #35	@ 0x23
 800befe:	7aba      	ldrb	r2, [r7, #10]
 800bf00:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3301      	adds	r3, #1
 800bf06:	7afa      	ldrb	r2, [r7, #11]
 800bf08:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 800bf10:	6838      	ldr	r0, [r7, #0]
 800bf12:	f7ff fd9c 	bl	800ba4e <xname_sum>
 800bf16:	4603      	mov	r3, r0
 800bf18:	4619      	mov	r1, r3
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f7fd ffaa 	bl	8009e74 <st_word>
}
 800bf20:	bf00      	nop
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd90      	pop	{r4, r7, pc}

0800bf28 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bf32:	2304      	movs	r3, #4
 800bf34:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bf3c:	23ff      	movs	r3, #255	@ 0xff
 800bf3e:	757b      	strb	r3, [r7, #21]
 800bf40:	23ff      	movs	r3, #255	@ 0xff
 800bf42:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bf44:	e09f      	b.n	800c086 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6938      	ldr	r0, [r7, #16]
 800bf4e:	f7fe fabf 	bl	800a4d0 <move_window>
 800bf52:	4603      	mov	r3, r0
 800bf54:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bf56:	7dfb      	ldrb	r3, [r7, #23]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f040 809a 	bne.w	800c092 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bf66:	7dbb      	ldrb	r3, [r7, #22]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d102      	bne.n	800bf72 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bf6c:	2304      	movs	r3, #4
 800bf6e:	75fb      	strb	r3, [r7, #23]
 800bf70:	e096      	b.n	800c0a0 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bf72:	693b      	ldr	r3, [r7, #16]
 800bf74:	781b      	ldrb	r3, [r3, #0]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d118      	bne.n	800bfac <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800bf7a:	7dbb      	ldrb	r3, [r7, #22]
 800bf7c:	2b85      	cmp	r3, #133	@ 0x85
 800bf7e:	d179      	bne.n	800c074 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800bf88:	6878      	ldr	r0, [r7, #4]
 800bf8a:	f7ff fe17 	bl	800bbbc <load_xdir>
 800bf8e:	4603      	mov	r3, r0
 800bf90:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d17e      	bne.n	800c096 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800bf98:	693b      	ldr	r3, [r7, #16]
 800bf9a:	695b      	ldr	r3, [r3, #20]
 800bf9c:	3304      	adds	r3, #4
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	719a      	strb	r2, [r3, #6]
					}
					break;
 800bfaa:	e074      	b.n	800c096 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bfb0:	330b      	adds	r3, #11
 800bfb2:	781b      	ldrb	r3, [r3, #0]
 800bfb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bfb8:	73fb      	strb	r3, [r7, #15]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	7bfa      	ldrb	r2, [r7, #15]
 800bfbe:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bfc0:	7dbb      	ldrb	r3, [r7, #22]
 800bfc2:	2be5      	cmp	r3, #229	@ 0xe5
 800bfc4:	d00e      	beq.n	800bfe4 <dir_read+0xbc>
 800bfc6:	7dbb      	ldrb	r3, [r7, #22]
 800bfc8:	2b2e      	cmp	r3, #46	@ 0x2e
 800bfca:	d00b      	beq.n	800bfe4 <dir_read+0xbc>
 800bfcc:	7bfb      	ldrb	r3, [r7, #15]
 800bfce:	f023 0320 	bic.w	r3, r3, #32
 800bfd2:	2b08      	cmp	r3, #8
 800bfd4:	bf0c      	ite	eq
 800bfd6:	2301      	moveq	r3, #1
 800bfd8:	2300      	movne	r3, #0
 800bfda:	b2db      	uxtb	r3, r3
 800bfdc:	461a      	mov	r2, r3
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	4293      	cmp	r3, r2
 800bfe2:	d002      	beq.n	800bfea <dir_read+0xc2>
				ord = 0xFF;
 800bfe4:	23ff      	movs	r3, #255	@ 0xff
 800bfe6:	757b      	strb	r3, [r7, #21]
 800bfe8:	e044      	b.n	800c074 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bfea:	7bfb      	ldrb	r3, [r7, #15]
 800bfec:	2b0f      	cmp	r3, #15
 800bfee:	d12f      	bne.n	800c050 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bff0:	7dbb      	ldrb	r3, [r7, #22]
 800bff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d00d      	beq.n	800c016 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bffe:	7b5b      	ldrb	r3, [r3, #13]
 800c000:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800c002:	7dbb      	ldrb	r3, [r7, #22]
 800c004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c008:	75bb      	strb	r3, [r7, #22]
 800c00a:	7dbb      	ldrb	r3, [r7, #22]
 800c00c:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c016:	7dba      	ldrb	r2, [r7, #22]
 800c018:	7d7b      	ldrb	r3, [r7, #21]
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d115      	bne.n	800c04a <dir_read+0x122>
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c022:	330d      	adds	r3, #13
 800c024:	781b      	ldrb	r3, [r3, #0]
 800c026:	7d3a      	ldrb	r2, [r7, #20]
 800c028:	429a      	cmp	r2, r3
 800c02a:	d10e      	bne.n	800c04a <dir_read+0x122>
 800c02c:	693b      	ldr	r3, [r7, #16]
 800c02e:	691a      	ldr	r2, [r3, #16]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c034:	4619      	mov	r1, r3
 800c036:	4610      	mov	r0, r2
 800c038:	f7ff fb5c 	bl	800b6f4 <pick_lfn>
 800c03c:	4603      	mov	r3, r0
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d003      	beq.n	800c04a <dir_read+0x122>
 800c042:	7d7b      	ldrb	r3, [r7, #21]
 800c044:	3b01      	subs	r3, #1
 800c046:	b2db      	uxtb	r3, r3
 800c048:	e000      	b.n	800c04c <dir_read+0x124>
 800c04a:	23ff      	movs	r3, #255	@ 0xff
 800c04c:	757b      	strb	r3, [r7, #21]
 800c04e:	e011      	b.n	800c074 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800c050:	7d7b      	ldrb	r3, [r7, #21]
 800c052:	2b00      	cmp	r3, #0
 800c054:	d109      	bne.n	800c06a <dir_read+0x142>
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c05a:	4618      	mov	r0, r3
 800c05c:	f7ff fca4 	bl	800b9a8 <sum_sfn>
 800c060:	4603      	mov	r3, r0
 800c062:	461a      	mov	r2, r3
 800c064:	7d3b      	ldrb	r3, [r7, #20]
 800c066:	4293      	cmp	r3, r2
 800c068:	d017      	beq.n	800c09a <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	f04f 32ff 	mov.w	r2, #4294967295
 800c070:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 800c072:	e012      	b.n	800c09a <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800c074:	2100      	movs	r1, #0
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f7ff f94b 	bl	800b312 <dir_next>
 800c07c:	4603      	mov	r3, r0
 800c07e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c080:	7dfb      	ldrb	r3, [r7, #23]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d10b      	bne.n	800c09e <dir_read+0x176>
	while (dp->sect) {
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	f47f af5b 	bne.w	800bf46 <dir_read+0x1e>
 800c090:	e006      	b.n	800c0a0 <dir_read+0x178>
		if (res != FR_OK) break;
 800c092:	bf00      	nop
 800c094:	e004      	b.n	800c0a0 <dir_read+0x178>
					break;
 800c096:	bf00      	nop
 800c098:	e002      	b.n	800c0a0 <dir_read+0x178>
					break;
 800c09a:	bf00      	nop
 800c09c:	e000      	b.n	800c0a0 <dir_read+0x178>
		if (res != FR_OK) break;
 800c09e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800c0a0:	7dfb      	ldrb	r3, [r7, #23]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d002      	beq.n	800c0ac <dir_read+0x184>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	3718      	adds	r7, #24
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	bd80      	pop	{r7, pc}

0800c0b6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c0b6:	b590      	push	{r4, r7, lr}
 800c0b8:	b089      	sub	sp, #36	@ 0x24
 800c0ba:	af00      	add	r7, sp, #0
 800c0bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800c0c4:	2100      	movs	r1, #0
 800c0c6:	6878      	ldr	r0, [r7, #4]
 800c0c8:	f7ff f88f 	bl	800b1ea <dir_sdi>
 800c0cc:	4603      	mov	r3, r0
 800c0ce:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800c0d0:	7ffb      	ldrb	r3, [r7, #31]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d001      	beq.n	800c0da <dir_find+0x24>
 800c0d6:	7ffb      	ldrb	r3, [r7, #31]
 800c0d8:	e113      	b.n	800c302 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	781b      	ldrb	r3, [r3, #0]
 800c0de:	2b04      	cmp	r3, #4
 800c0e0:	d165      	bne.n	800c1ae <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	691b      	ldr	r3, [r3, #16]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7ff fcb1 	bl	800ba4e <xname_sum>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c0f0:	e050      	b.n	800c194 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	695b      	ldr	r3, [r3, #20]
 800c0f6:	3324      	adds	r3, #36	@ 0x24
 800c0f8:	4618      	mov	r0, r3
 800c0fa:	f7fd fda5 	bl	8009c48 <ld_word>
 800c0fe:	4603      	mov	r3, r0
 800c100:	461a      	mov	r2, r3
 800c102:	893b      	ldrh	r3, [r7, #8]
 800c104:	4293      	cmp	r3, r2
 800c106:	d144      	bne.n	800c192 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	695b      	ldr	r3, [r3, #20]
 800c10c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 800c110:	76fb      	strb	r3, [r7, #27]
 800c112:	2340      	movs	r3, #64	@ 0x40
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	2300      	movs	r3, #0
 800c118:	613b      	str	r3, [r7, #16]
 800c11a:	e029      	b.n	800c170 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 800c11c:	697b      	ldr	r3, [r7, #20]
 800c11e:	f003 031f 	and.w	r3, r3, #31
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <dir_find+0x76>
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	3302      	adds	r3, #2
 800c12a:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	695a      	ldr	r2, [r3, #20]
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	4413      	add	r3, r2
 800c134:	4618      	mov	r0, r3
 800c136:	f7fd fd87 	bl	8009c48 <ld_word>
 800c13a:	4603      	mov	r3, r0
 800c13c:	4618      	mov	r0, r3
 800c13e:	f003 f84d 	bl	800f1dc <ff_wtoupper>
 800c142:	4603      	mov	r3, r0
 800c144:	461c      	mov	r4, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	691a      	ldr	r2, [r3, #16]
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	005b      	lsls	r3, r3, #1
 800c14e:	4413      	add	r3, r2
 800c150:	881b      	ldrh	r3, [r3, #0]
 800c152:	4618      	mov	r0, r3
 800c154:	f003 f842 	bl	800f1dc <ff_wtoupper>
 800c158:	4603      	mov	r3, r0
 800c15a:	429c      	cmp	r4, r3
 800c15c:	d10c      	bne.n	800c178 <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800c15e:	7efb      	ldrb	r3, [r7, #27]
 800c160:	3b01      	subs	r3, #1
 800c162:	76fb      	strb	r3, [r7, #27]
 800c164:	697b      	ldr	r3, [r7, #20]
 800c166:	3302      	adds	r3, #2
 800c168:	617b      	str	r3, [r7, #20]
 800c16a:	693b      	ldr	r3, [r7, #16]
 800c16c:	3301      	adds	r3, #1
 800c16e:	613b      	str	r3, [r7, #16]
 800c170:	7efb      	ldrb	r3, [r7, #27]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d1d2      	bne.n	800c11c <dir_find+0x66>
 800c176:	e000      	b.n	800c17a <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800c178:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c17a:	7efb      	ldrb	r3, [r7, #27]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d109      	bne.n	800c194 <dir_find+0xde>
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	691a      	ldr	r2, [r3, #16]
 800c184:	693b      	ldr	r3, [r7, #16]
 800c186:	005b      	lsls	r3, r3, #1
 800c188:	4413      	add	r3, r2
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00b      	beq.n	800c1a8 <dir_find+0xf2>
 800c190:	e000      	b.n	800c194 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800c192:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800c194:	2100      	movs	r1, #0
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff fec6 	bl	800bf28 <dir_read>
 800c19c:	4603      	mov	r3, r0
 800c19e:	77fb      	strb	r3, [r7, #31]
 800c1a0:	7ffb      	ldrb	r3, [r7, #31]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d0a5      	beq.n	800c0f2 <dir_find+0x3c>
 800c1a6:	e000      	b.n	800c1aa <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800c1a8:	bf00      	nop
		}
		return res;
 800c1aa:	7ffb      	ldrb	r3, [r7, #31]
 800c1ac:	e0a9      	b.n	800c302 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c1ae:	23ff      	movs	r3, #255	@ 0xff
 800c1b0:	773b      	strb	r3, [r7, #28]
 800c1b2:	7f3b      	ldrb	r3, [r7, #28]
 800c1b4:	777b      	strb	r3, [r7, #29]
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	f04f 32ff 	mov.w	r2, #4294967295
 800c1bc:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	68f8      	ldr	r0, [r7, #12]
 800c1c6:	f7fe f983 	bl	800a4d0 <move_window>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800c1ce:	7ffb      	ldrb	r3, [r7, #31]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f040 8090 	bne.w	800c2f6 <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1da:	781b      	ldrb	r3, [r3, #0]
 800c1dc:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800c1de:	7fbb      	ldrb	r3, [r7, #30]
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <dir_find+0x134>
 800c1e4:	2304      	movs	r3, #4
 800c1e6:	77fb      	strb	r3, [r7, #31]
 800c1e8:	e08a      	b.n	800c300 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c1ee:	330b      	adds	r3, #11
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c1f6:	72fb      	strb	r3, [r7, #11]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	7afa      	ldrb	r2, [r7, #11]
 800c1fc:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800c1fe:	7fbb      	ldrb	r3, [r7, #30]
 800c200:	2be5      	cmp	r3, #229	@ 0xe5
 800c202:	d007      	beq.n	800c214 <dir_find+0x15e>
 800c204:	7afb      	ldrb	r3, [r7, #11]
 800c206:	f003 0308 	and.w	r3, r3, #8
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d009      	beq.n	800c222 <dir_find+0x16c>
 800c20e:	7afb      	ldrb	r3, [r7, #11]
 800c210:	2b0f      	cmp	r3, #15
 800c212:	d006      	beq.n	800c222 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c214:	23ff      	movs	r3, #255	@ 0xff
 800c216:	777b      	strb	r3, [r7, #29]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f04f 32ff 	mov.w	r2, #4294967295
 800c21e:	64da      	str	r2, [r3, #76]	@ 0x4c
 800c220:	e05e      	b.n	800c2e0 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800c222:	7afb      	ldrb	r3, [r7, #11]
 800c224:	2b0f      	cmp	r3, #15
 800c226:	d136      	bne.n	800c296 <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c22e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c232:	2b00      	cmp	r3, #0
 800c234:	d154      	bne.n	800c2e0 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800c236:	7fbb      	ldrb	r3, [r7, #30]
 800c238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d00d      	beq.n	800c25c <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c244:	7b5b      	ldrb	r3, [r3, #13]
 800c246:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800c248:	7fbb      	ldrb	r3, [r7, #30]
 800c24a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c24e:	77bb      	strb	r3, [r7, #30]
 800c250:	7fbb      	ldrb	r3, [r7, #30]
 800c252:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800c25c:	7fba      	ldrb	r2, [r7, #30]
 800c25e:	7f7b      	ldrb	r3, [r7, #29]
 800c260:	429a      	cmp	r2, r3
 800c262:	d115      	bne.n	800c290 <dir_find+0x1da>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c268:	330d      	adds	r3, #13
 800c26a:	781b      	ldrb	r3, [r3, #0]
 800c26c:	7f3a      	ldrb	r2, [r7, #28]
 800c26e:	429a      	cmp	r2, r3
 800c270:	d10e      	bne.n	800c290 <dir_find+0x1da>
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	691a      	ldr	r2, [r3, #16]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c27a:	4619      	mov	r1, r3
 800c27c:	4610      	mov	r0, r2
 800c27e:	f7ff f9c9 	bl	800b614 <cmp_lfn>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d003      	beq.n	800c290 <dir_find+0x1da>
 800c288:	7f7b      	ldrb	r3, [r7, #29]
 800c28a:	3b01      	subs	r3, #1
 800c28c:	b2db      	uxtb	r3, r3
 800c28e:	e000      	b.n	800c292 <dir_find+0x1dc>
 800c290:	23ff      	movs	r3, #255	@ 0xff
 800c292:	777b      	strb	r3, [r7, #29]
 800c294:	e024      	b.n	800c2e0 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c296:	7f7b      	ldrb	r3, [r7, #29]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d109      	bne.n	800c2b0 <dir_find+0x1fa>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7ff fb81 	bl	800b9a8 <sum_sfn>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	7f3b      	ldrb	r3, [r7, #28]
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d024      	beq.n	800c2fa <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d10a      	bne.n	800c2d4 <dir_find+0x21e>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	3340      	adds	r3, #64	@ 0x40
 800c2c6:	220b      	movs	r2, #11
 800c2c8:	4619      	mov	r1, r3
 800c2ca:	f7fd fede 	bl	800a08a <mem_cmp>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d014      	beq.n	800c2fe <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800c2d4:	23ff      	movs	r3, #255	@ 0xff
 800c2d6:	777b      	strb	r3, [r7, #29]
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f04f 32ff 	mov.w	r2, #4294967295
 800c2de:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800c2e0:	2100      	movs	r1, #0
 800c2e2:	6878      	ldr	r0, [r7, #4]
 800c2e4:	f7ff f815 	bl	800b312 <dir_next>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800c2ec:	7ffb      	ldrb	r3, [r7, #31]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	f43f af65 	beq.w	800c1be <dir_find+0x108>
 800c2f4:	e004      	b.n	800c300 <dir_find+0x24a>
		if (res != FR_OK) break;
 800c2f6:	bf00      	nop
 800c2f8:	e002      	b.n	800c300 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800c2fa:	bf00      	nop
 800c2fc:	e000      	b.n	800c300 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800c2fe:	bf00      	nop

	return res;
 800c300:	7ffb      	ldrb	r3, [r7, #31]
}
 800c302:	4618      	mov	r0, r3
 800c304:	3724      	adds	r7, #36	@ 0x24
 800c306:	46bd      	mov	sp, r7
 800c308:	bd90      	pop	{r4, r7, pc}
	...

0800c30c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800c30c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c310:	b0a0      	sub	sp, #128	@ 0x80
 800c312:	af00      	add	r7, sp, #0
 800c314:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800c322:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <dir_register+0x22>
 800c32a:	2306      	movs	r3, #6
 800c32c:	e192      	b.n	800c654 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800c32e:	2300      	movs	r3, #0
 800c330:	677b      	str	r3, [r7, #116]	@ 0x74
 800c332:	e002      	b.n	800c33a <dir_register+0x2e>
 800c334:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c336:	3301      	adds	r3, #1
 800c338:	677b      	str	r3, [r7, #116]	@ 0x74
 800c33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c33c:	691a      	ldr	r2, [r3, #16]
 800c33e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c340:	005b      	lsls	r3, r3, #1
 800c342:	4413      	add	r3, r2
 800c344:	881b      	ldrh	r3, [r3, #0]
 800c346:	2b00      	cmp	r3, #0
 800c348:	d1f4      	bne.n	800c334 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c34a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c34c:	781b      	ldrb	r3, [r3, #0]
 800c34e:	2b04      	cmp	r3, #4
 800c350:	f040 80a3 	bne.w	800c49a <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800c354:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c356:	330e      	adds	r3, #14
 800c358:	4aa4      	ldr	r2, [pc, #656]	@ (800c5ec <dir_register+0x2e0>)
 800c35a:	fba2 2303 	umull	r2, r3, r2, r3
 800c35e:	08db      	lsrs	r3, r3, #3
 800c360:	3302      	adds	r3, #2
 800c362:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800c364:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c366:	6878      	ldr	r0, [r7, #4]
 800c368:	f7ff f8b9 	bl	800b4de <dir_alloc>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 800c372:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c376:	2b00      	cmp	r3, #0
 800c378:	d002      	beq.n	800c380 <dir_register+0x74>
 800c37a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c37e:	e169      	b.n	800c654 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c386:	3b01      	subs	r3, #1
 800c388:	015b      	lsls	r3, r3, #5
 800c38a:	1ad2      	subs	r2, r2, r3
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d076      	beq.n	800c486 <dir_register+0x17a>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	79db      	ldrb	r3, [r3, #7]
 800c39c:	f003 0304 	and.w	r3, r3, #4
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d070      	beq.n	800c486 <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c3aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3ac:	8949      	ldrh	r1, [r1, #10]
 800c3ae:	4608      	mov	r0, r1
 800c3b0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800c3b2:	8989      	ldrh	r1, [r1, #12]
 800c3b4:	fb00 f101 	mul.w	r1, r0, r1
 800c3b8:	2000      	movs	r0, #0
 800c3ba:	460c      	mov	r4, r1
 800c3bc:	4605      	mov	r5, r0
 800c3be:	eb12 0804 	adds.w	r8, r2, r4
 800c3c2:	eb43 0905 	adc.w	r9, r3, r5
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4618      	mov	r0, r3
 800c3d0:	f7fe fcaa 	bl	800ad28 <fill_first_frag>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c3da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <dir_register+0xdc>
 800c3e2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c3e6:	e135      	b.n	800c654 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	f7fe fcc7 	bl	800ad86 <fill_last_frag>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c3fe:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c402:	2b00      	cmp	r3, #0
 800c404:	d002      	beq.n	800c40c <dir_register+0x100>
 800c406:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c40a:	e123      	b.n	800c654 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	f107 0308 	add.w	r3, r7, #8
 800c412:	4611      	mov	r1, r2
 800c414:	4618      	mov	r0, r3
 800c416:	f7ff fc8f 	bl	800bd38 <load_obj_dir>
 800c41a:	4603      	mov	r3, r0
 800c41c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c420:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c424:	2b00      	cmp	r3, #0
 800c426:	d002      	beq.n	800c42e <dir_register+0x122>
 800c428:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c42c:	e112      	b.n	800c654 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800c42e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c430:	695b      	ldr	r3, [r3, #20]
 800c432:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c43c:	4608      	mov	r0, r1
 800c43e:	f7fd fd60 	bl	8009f02 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c444:	695b      	ldr	r3, [r3, #20]
 800c446:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c450:	4608      	mov	r0, r1
 800c452:	f7fd fd56 	bl	8009f02 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	79da      	ldrb	r2, [r3, #7]
 800c45a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c45c:	695b      	ldr	r3, [r3, #20]
 800c45e:	3321      	adds	r3, #33	@ 0x21
 800c460:	f042 0201 	orr.w	r2, r2, #1
 800c464:	b2d2      	uxtb	r2, r2
 800c466:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c468:	f107 0308 	add.w	r3, r7, #8
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7ff fc99 	bl	800bda4 <store_xdir>
 800c472:	4603      	mov	r3, r0
 800c474:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800c478:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d002      	beq.n	800c486 <dir_register+0x17a>
 800c480:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c484:	e0e6      	b.n	800c654 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c488:	695a      	ldr	r2, [r3, #20]
 800c48a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	4619      	mov	r1, r3
 800c490:	4610      	mov	r0, r2
 800c492:	f7ff fce2 	bl	800be5a <create_xdir>
		return FR_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	e0dc      	b.n	800c654 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800c4a0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800c4a4:	220c      	movs	r2, #12
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7fd fdb3 	bl	800a012 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c4ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c4b0:	f003 0301 	and.w	r3, r3, #1
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d033      	beq.n	800c520 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2240      	movs	r2, #64	@ 0x40
 800c4bc:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800c4c0:	2301      	movs	r3, #1
 800c4c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4c4:	e016      	b.n	800c4f4 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800c4cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c4ce:	691a      	ldr	r2, [r3, #16]
 800c4d0:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 800c4d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4d6:	f7ff f9d9 	bl	800b88c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f7ff fdeb 	bl	800c0b6 <dir_find>
 800c4e0:	4603      	mov	r3, r0
 800c4e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800c4e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d106      	bne.n	800c4fc <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 800c4ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	67bb      	str	r3, [r7, #120]	@ 0x78
 800c4f4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c4f6:	2b63      	cmp	r3, #99	@ 0x63
 800c4f8:	d9e5      	bls.n	800c4c6 <dir_register+0x1ba>
 800c4fa:	e000      	b.n	800c4fe <dir_register+0x1f2>
			if (res != FR_OK) break;
 800c4fc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c4fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c500:	2b64      	cmp	r3, #100	@ 0x64
 800c502:	d101      	bne.n	800c508 <dir_register+0x1fc>
 800c504:	2307      	movs	r3, #7
 800c506:	e0a5      	b.n	800c654 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c508:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c50c:	2b04      	cmp	r3, #4
 800c50e:	d002      	beq.n	800c516 <dir_register+0x20a>
 800c510:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c514:	e09e      	b.n	800c654 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c516:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c520:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800c524:	f003 0302 	and.w	r3, r3, #2
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d007      	beq.n	800c53c <dir_register+0x230>
 800c52c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c52e:	330c      	adds	r3, #12
 800c530:	4a2f      	ldr	r2, [pc, #188]	@ (800c5f0 <dir_register+0x2e4>)
 800c532:	fba2 2303 	umull	r2, r3, r2, r3
 800c536:	089b      	lsrs	r3, r3, #2
 800c538:	3301      	adds	r3, #1
 800c53a:	e000      	b.n	800c53e <dir_register+0x232>
 800c53c:	2301      	movs	r3, #1
 800c53e:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c540:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7fe ffcb 	bl	800b4de <dir_alloc>
 800c548:	4603      	mov	r3, r0
 800c54a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c54e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c552:	2b00      	cmp	r3, #0
 800c554:	d14f      	bne.n	800c5f6 <dir_register+0x2ea>
 800c556:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c558:	3b01      	subs	r3, #1
 800c55a:	673b      	str	r3, [r7, #112]	@ 0x70
 800c55c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d049      	beq.n	800c5f6 <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c568:	015b      	lsls	r3, r3, #5
 800c56a:	1ad3      	subs	r3, r2, r3
 800c56c:	4619      	mov	r1, r3
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f7fe fe3b 	bl	800b1ea <dir_sdi>
 800c574:	4603      	mov	r3, r0
 800c576:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c57a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d139      	bne.n	800c5f6 <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	3340      	adds	r3, #64	@ 0x40
 800c586:	4618      	mov	r0, r3
 800c588:	f7ff fa0e 	bl	800b9a8 <sum_sfn>
 800c58c:	4603      	mov	r3, r0
 800c58e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c596:	4619      	mov	r1, r3
 800c598:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c59a:	f7fd ff99 	bl	800a4d0 <move_window>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 800c5a4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d123      	bne.n	800c5f4 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c5ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5ae:	6918      	ldr	r0, [r3, #16]
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800c5b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5b6:	b2da      	uxtb	r2, r3
 800c5b8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800c5bc:	f7ff f8fe 	bl	800b7bc <put_lfn>
				fs->wflag = 1;
 800c5c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c5c2:	2201      	movs	r2, #1
 800c5c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c5c6:	2100      	movs	r1, #0
 800c5c8:	6878      	ldr	r0, [r7, #4]
 800c5ca:	f7fe fea2 	bl	800b312 <dir_next>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 800c5d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d10c      	bne.n	800c5f6 <dir_register+0x2ea>
 800c5dc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800c5e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1d4      	bne.n	800c592 <dir_register+0x286>
 800c5e8:	e005      	b.n	800c5f6 <dir_register+0x2ea>
 800c5ea:	bf00      	nop
 800c5ec:	88888889 	.word	0x88888889
 800c5f0:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c5f4:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c5f6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d128      	bne.n	800c650 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c602:	4619      	mov	r1, r3
 800c604:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800c606:	f7fd ff63 	bl	800a4d0 <move_window>
 800c60a:	4603      	mov	r3, r0
 800c60c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800c610:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800c614:	2b00      	cmp	r3, #0
 800c616:	d11b      	bne.n	800c650 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c61c:	2220      	movs	r2, #32
 800c61e:	2100      	movs	r1, #0
 800c620:	4618      	mov	r0, r3
 800c622:	f7fd fd17 	bl	800a054 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	3340      	adds	r3, #64	@ 0x40
 800c62e:	220b      	movs	r2, #11
 800c630:	4619      	mov	r1, r3
 800c632:	f7fd fcee 	bl	800a012 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c640:	330c      	adds	r3, #12
 800c642:	f002 0218 	and.w	r2, r2, #24
 800c646:	b2d2      	uxtb	r2, r2
 800c648:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c64a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800c64c:	2201      	movs	r2, #1
 800c64e:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c650:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800c654:	4618      	mov	r0, r3
 800c656:	3780      	adds	r7, #128	@ 0x80
 800c658:	46bd      	mov	sp, r7
 800c65a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c65e:	bf00      	nop

0800c660 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800c660:	b5b0      	push	{r4, r5, r7, lr}
 800c662:	b088      	sub	sp, #32
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	2200      	movs	r2, #0
 800c674:	769a      	strb	r2, [r3, #26]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 80d9 	beq.w	800c832 <get_fileinfo+0x1d2>

#if _USE_LFN != 0	/* LFN configuration */
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	2b04      	cmp	r3, #4
 800c686:	d106      	bne.n	800c696 <get_fileinfo+0x36>
		get_xdir_info(fs->dirbuf, fno);
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	695b      	ldr	r3, [r3, #20]
 800c68c:	6839      	ldr	r1, [r7, #0]
 800c68e:	4618      	mov	r0, r3
 800c690:	f7ff fa11 	bl	800bab6 <get_xdir_info>
		return;
 800c694:	e0ce      	b.n	800c834 <get_fileinfo+0x1d4>
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c69a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c69e:	d032      	beq.n	800c706 <get_fileinfo+0xa6>
			i = j = 0;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	61bb      	str	r3, [r7, #24]
 800c6a4:	69bb      	ldr	r3, [r7, #24]
 800c6a6:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c6a8:	e01b      	b.n	800c6e2 <get_fileinfo+0x82>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800c6aa:	89fb      	ldrh	r3, [r7, #14]
 800c6ac:	2100      	movs	r1, #0
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f002 fd58 	bl	800f164 <ff_convert>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800c6b8:	89fb      	ldrh	r3, [r7, #14]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d102      	bne.n	800c6c4 <get_fileinfo+0x64>
 800c6be:	2300      	movs	r3, #0
 800c6c0:	61fb      	str	r3, [r7, #28]
 800c6c2:	e01a      	b.n	800c6fa <get_fileinfo+0x9a>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	2bfe      	cmp	r3, #254	@ 0xfe
 800c6c8:	d902      	bls.n	800c6d0 <get_fileinfo+0x70>
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	61fb      	str	r3, [r7, #28]
 800c6ce:	e014      	b.n	800c6fa <get_fileinfo+0x9a>
				fno->fname[i++] = (TCHAR)w;
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	1c5a      	adds	r2, r3, #1
 800c6d4:	61fa      	str	r2, [r7, #28]
 800c6d6:	89fa      	ldrh	r2, [r7, #14]
 800c6d8:	b2d1      	uxtb	r1, r2
 800c6da:	683a      	ldr	r2, [r7, #0]
 800c6dc:	4413      	add	r3, r2
 800c6de:	460a      	mov	r2, r1
 800c6e0:	769a      	strb	r2, [r3, #26]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800c6e2:	693b      	ldr	r3, [r7, #16]
 800c6e4:	691a      	ldr	r2, [r3, #16]
 800c6e6:	69bb      	ldr	r3, [r7, #24]
 800c6e8:	1c59      	adds	r1, r3, #1
 800c6ea:	61b9      	str	r1, [r7, #24]
 800c6ec:	005b      	lsls	r3, r3, #1
 800c6ee:	4413      	add	r3, r2
 800c6f0:	881b      	ldrh	r3, [r3, #0]
 800c6f2:	81fb      	strh	r3, [r7, #14]
 800c6f4:	89fb      	ldrh	r3, [r7, #14]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d1d7      	bne.n	800c6aa <get_fileinfo+0x4a>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	4413      	add	r3, r2
 800c700:	331a      	adds	r3, #26
 800c702:	2200      	movs	r2, #0
 800c704:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	61bb      	str	r3, [r7, #24]
 800c70a:	69bb      	ldr	r3, [r7, #24]
 800c70c:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800c70e:	683a      	ldr	r2, [r7, #0]
 800c710:	69fb      	ldr	r3, [r7, #28]
 800c712:	4413      	add	r3, r2
 800c714:	331a      	adds	r3, #26
 800c716:	781b      	ldrb	r3, [r3, #0]
 800c718:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800c71a:	e04d      	b.n	800c7b8 <get_fileinfo+0x158>
		c = (TCHAR)dp->dir[i++];
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c720:	69fb      	ldr	r3, [r7, #28]
 800c722:	1c59      	adds	r1, r3, #1
 800c724:	61f9      	str	r1, [r7, #28]
 800c726:	4413      	add	r3, r2
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800c72c:	7dfb      	ldrb	r3, [r7, #23]
 800c72e:	2b20      	cmp	r3, #32
 800c730:	d041      	beq.n	800c7b6 <get_fileinfo+0x156>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800c732:	7dfb      	ldrb	r3, [r7, #23]
 800c734:	2b05      	cmp	r3, #5
 800c736:	d101      	bne.n	800c73c <get_fileinfo+0xdc>
 800c738:	23e5      	movs	r3, #229	@ 0xe5
 800c73a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2b09      	cmp	r3, #9
 800c740:	d10f      	bne.n	800c762 <get_fileinfo+0x102>
			if (!lfv) fno->fname[j] = '.';
 800c742:	89bb      	ldrh	r3, [r7, #12]
 800c744:	2b00      	cmp	r3, #0
 800c746:	d105      	bne.n	800c754 <get_fileinfo+0xf4>
 800c748:	683a      	ldr	r2, [r7, #0]
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	4413      	add	r3, r2
 800c74e:	331a      	adds	r3, #26
 800c750:	222e      	movs	r2, #46	@ 0x2e
 800c752:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	1c5a      	adds	r2, r3, #1
 800c758:	61ba      	str	r2, [r7, #24]
 800c75a:	683a      	ldr	r2, [r7, #0]
 800c75c:	4413      	add	r3, r2
 800c75e:	222e      	movs	r2, #46	@ 0x2e
 800c760:	735a      	strb	r2, [r3, #13]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	4413      	add	r3, r2
 800c768:	330d      	adds	r3, #13
 800c76a:	7dfa      	ldrb	r2, [r7, #23]
 800c76c:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800c76e:	89bb      	ldrh	r3, [r7, #12]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d11c      	bne.n	800c7ae <get_fileinfo+0x14e>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800c774:	7dfb      	ldrb	r3, [r7, #23]
 800c776:	2b40      	cmp	r3, #64	@ 0x40
 800c778:	d913      	bls.n	800c7a2 <get_fileinfo+0x142>
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
 800c77c:	2b5a      	cmp	r3, #90	@ 0x5a
 800c77e:	d810      	bhi.n	800c7a2 <get_fileinfo+0x142>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c784:	330c      	adds	r3, #12
 800c786:	781b      	ldrb	r3, [r3, #0]
 800c788:	461a      	mov	r2, r3
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	2b08      	cmp	r3, #8
 800c78e:	d901      	bls.n	800c794 <get_fileinfo+0x134>
 800c790:	2310      	movs	r3, #16
 800c792:	e000      	b.n	800c796 <get_fileinfo+0x136>
 800c794:	2308      	movs	r3, #8
 800c796:	4013      	ands	r3, r2
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d002      	beq.n	800c7a2 <get_fileinfo+0x142>
				c += 0x20;			/* To lower */
 800c79c:	7dfb      	ldrb	r3, [r7, #23]
 800c79e:	3320      	adds	r3, #32
 800c7a0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800c7a2:	683a      	ldr	r2, [r7, #0]
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	4413      	add	r3, r2
 800c7a8:	331a      	adds	r3, #26
 800c7aa:	7dfa      	ldrb	r2, [r7, #23]
 800c7ac:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800c7ae:	69bb      	ldr	r3, [r7, #24]
 800c7b0:	3301      	adds	r3, #1
 800c7b2:	61bb      	str	r3, [r7, #24]
 800c7b4:	e000      	b.n	800c7b8 <get_fileinfo+0x158>
		if (c == ' ') continue;				/* Skip padding spaces */
 800c7b6:	bf00      	nop
	while (i < 11) {		/* Copy name body and extension */
 800c7b8:	69fb      	ldr	r3, [r7, #28]
 800c7ba:	2b0a      	cmp	r3, #10
 800c7bc:	d9ae      	bls.n	800c71c <get_fileinfo+0xbc>
	}
	if (!lfv) {
 800c7be:	89bb      	ldrh	r3, [r7, #12]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10d      	bne.n	800c7e0 <get_fileinfo+0x180>
		fno->fname[j] = 0;
 800c7c4:	683a      	ldr	r2, [r7, #0]
 800c7c6:	69bb      	ldr	r3, [r7, #24]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	331a      	adds	r3, #26
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7d4:	330c      	adds	r3, #12
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d101      	bne.n	800c7e0 <get_fileinfo+0x180>
 800c7dc:	2300      	movs	r3, #0
 800c7de:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800c7e0:	683a      	ldr	r2, [r7, #0]
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	330d      	adds	r3, #13
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7f0:	7ada      	ldrb	r2, [r3, #11]
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c7fa:	331c      	adds	r3, #28
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd fa3b 	bl	8009c78 <ld_dword>
 800c802:	4603      	mov	r3, r0
 800c804:	2200      	movs	r2, #0
 800c806:	461c      	mov	r4, r3
 800c808:	4615      	mov	r5, r2
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	e9c3 4500 	strd	r4, r5, [r3]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c814:	3316      	adds	r3, #22
 800c816:	4618      	mov	r0, r3
 800c818:	f7fd fa2e 	bl	8009c78 <ld_dword>
 800c81c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	b29a      	uxth	r2, r3
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	815a      	strh	r2, [r3, #10]
 800c826:	68bb      	ldr	r3, [r7, #8]
 800c828:	0c1b      	lsrs	r3, r3, #16
 800c82a:	b29a      	uxth	r2, r3
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	811a      	strh	r2, [r3, #8]
 800c830:	e000      	b.n	800c834 <get_fileinfo+0x1d4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800c832:	bf00      	nop
}
 800c834:	3720      	adds	r7, #32
 800c836:	46bd      	mov	sp, r7
 800c838:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c83c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	@ 0x28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	613b      	str	r3, [r7, #16]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	691b      	ldr	r3, [r3, #16]
 800c852:	60fb      	str	r3, [r7, #12]
 800c854:	2300      	movs	r3, #0
 800c856:	617b      	str	r3, [r7, #20]
 800c858:	697b      	ldr	r3, [r7, #20]
 800c85a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c85c:	69bb      	ldr	r3, [r7, #24]
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	61ba      	str	r2, [r7, #24]
 800c862:	693a      	ldr	r2, [r7, #16]
 800c864:	4413      	add	r3, r2
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c86a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c86c:	2b1f      	cmp	r3, #31
 800c86e:	d940      	bls.n	800c8f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c870:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c872:	2b2f      	cmp	r3, #47	@ 0x2f
 800c874:	d006      	beq.n	800c884 <create_name+0x48>
 800c876:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c878:	2b5c      	cmp	r3, #92	@ 0x5c
 800c87a:	d110      	bne.n	800c89e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c87c:	e002      	b.n	800c884 <create_name+0x48>
 800c87e:	69bb      	ldr	r3, [r7, #24]
 800c880:	3301      	adds	r3, #1
 800c882:	61bb      	str	r3, [r7, #24]
 800c884:	693a      	ldr	r2, [r7, #16]
 800c886:	69bb      	ldr	r3, [r7, #24]
 800c888:	4413      	add	r3, r2
 800c88a:	781b      	ldrb	r3, [r3, #0]
 800c88c:	2b2f      	cmp	r3, #47	@ 0x2f
 800c88e:	d0f6      	beq.n	800c87e <create_name+0x42>
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	4413      	add	r3, r2
 800c896:	781b      	ldrb	r3, [r3, #0]
 800c898:	2b5c      	cmp	r3, #92	@ 0x5c
 800c89a:	d0f0      	beq.n	800c87e <create_name+0x42>
			break;
 800c89c:	e02a      	b.n	800c8f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	2bfe      	cmp	r3, #254	@ 0xfe
 800c8a2:	d901      	bls.n	800c8a8 <create_name+0x6c>
 800c8a4:	2306      	movs	r3, #6
 800c8a6:	e17d      	b.n	800cba4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c8a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c8ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8b0:	2101      	movs	r1, #1
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f002 fc56 	bl	800f164 <ff_convert>
 800c8b8:	4603      	mov	r3, r0
 800c8ba:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c8bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d101      	bne.n	800c8c6 <create_name+0x8a>
 800c8c2:	2306      	movs	r3, #6
 800c8c4:	e16e      	b.n	800cba4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c8c6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8c8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c8ca:	d809      	bhi.n	800c8e0 <create_name+0xa4>
 800c8cc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	488d      	ldr	r0, [pc, #564]	@ (800cb08 <create_name+0x2cc>)
 800c8d2:	f7fd fc01 	bl	800a0d8 <chk_chr>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d001      	beq.n	800c8e0 <create_name+0xa4>
 800c8dc:	2306      	movs	r3, #6
 800c8de:	e161      	b.n	800cba4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c8e0:	697b      	ldr	r3, [r7, #20]
 800c8e2:	1c5a      	adds	r2, r3, #1
 800c8e4:	617a      	str	r2, [r7, #20]
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	68fa      	ldr	r2, [r7, #12]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800c8ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c8f0:	e7b4      	b.n	800c85c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c8f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c8f4:	693a      	ldr	r2, [r7, #16]
 800c8f6:	69bb      	ldr	r3, [r7, #24]
 800c8f8:	441a      	add	r2, r3
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c8fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c900:	2b1f      	cmp	r3, #31
 800c902:	d801      	bhi.n	800c908 <create_name+0xcc>
 800c904:	2304      	movs	r3, #4
 800c906:	e000      	b.n	800c90a <create_name+0xce>
 800c908:	2300      	movs	r3, #0
 800c90a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c90e:	e011      	b.n	800c934 <create_name+0xf8>
		w = lfn[di - 1];
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c916:	3b01      	subs	r3, #1
 800c918:	005b      	lsls	r3, r3, #1
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	4413      	add	r3, r2
 800c91e:	881b      	ldrh	r3, [r3, #0]
 800c920:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800c922:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c924:	2b20      	cmp	r3, #32
 800c926:	d002      	beq.n	800c92e <create_name+0xf2>
 800c928:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c92a:	2b2e      	cmp	r3, #46	@ 0x2e
 800c92c:	d106      	bne.n	800c93c <create_name+0x100>
		di--;
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	3b01      	subs	r3, #1
 800c932:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d1ea      	bne.n	800c910 <create_name+0xd4>
 800c93a:	e000      	b.n	800c93e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c93c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c93e:	697b      	ldr	r3, [r7, #20]
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	4413      	add	r3, r2
 800c946:	2200      	movs	r2, #0
 800c948:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d101      	bne.n	800c954 <create_name+0x118>
 800c950:	2306      	movs	r3, #6
 800c952:	e127      	b.n	800cba4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	3340      	adds	r3, #64	@ 0x40
 800c958:	220b      	movs	r2, #11
 800c95a:	2120      	movs	r1, #32
 800c95c:	4618      	mov	r0, r3
 800c95e:	f7fd fb79 	bl	800a054 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c962:	2300      	movs	r3, #0
 800c964:	61bb      	str	r3, [r7, #24]
 800c966:	e002      	b.n	800c96e <create_name+0x132>
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	3301      	adds	r3, #1
 800c96c:	61bb      	str	r3, [r7, #24]
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	005b      	lsls	r3, r3, #1
 800c972:	68fa      	ldr	r2, [r7, #12]
 800c974:	4413      	add	r3, r2
 800c976:	881b      	ldrh	r3, [r3, #0]
 800c978:	2b20      	cmp	r3, #32
 800c97a:	d0f5      	beq.n	800c968 <create_name+0x12c>
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	005b      	lsls	r3, r3, #1
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4413      	add	r3, r2
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	2b2e      	cmp	r3, #46	@ 0x2e
 800c988:	d0ee      	beq.n	800c968 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d009      	beq.n	800c9a4 <create_name+0x168>
 800c990:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c994:	f043 0303 	orr.w	r3, r3, #3
 800c998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c99c:	e002      	b.n	800c9a4 <create_name+0x168>
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	617b      	str	r3, [r7, #20]
 800c9a4:	697b      	ldr	r3, [r7, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d009      	beq.n	800c9be <create_name+0x182>
 800c9aa:	697b      	ldr	r3, [r7, #20]
 800c9ac:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800c9b0:	3b01      	subs	r3, #1
 800c9b2:	005b      	lsls	r3, r3, #1
 800c9b4:	68fa      	ldr	r2, [r7, #12]
 800c9b6:	4413      	add	r3, r2
 800c9b8:	881b      	ldrh	r3, [r3, #0]
 800c9ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9bc:	d1ef      	bne.n	800c99e <create_name+0x162>

	i = b = 0; ni = 8;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	623b      	str	r3, [r7, #32]
 800c9c8:	2308      	movs	r3, #8
 800c9ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	61ba      	str	r2, [r7, #24]
 800c9d2:	005b      	lsls	r3, r3, #1
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	4413      	add	r3, r2
 800c9d8:	881b      	ldrh	r3, [r3, #0]
 800c9da:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c9dc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	f000 8090 	beq.w	800cb04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c9e4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9e6:	2b20      	cmp	r3, #32
 800c9e8:	d006      	beq.n	800c9f8 <create_name+0x1bc>
 800c9ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800c9ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800c9ee:	d10a      	bne.n	800ca06 <create_name+0x1ca>
 800c9f0:	69ba      	ldr	r2, [r7, #24]
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d006      	beq.n	800ca06 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c9f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c9fc:	f043 0303 	orr.w	r3, r3, #3
 800ca00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca04:	e07d      	b.n	800cb02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800ca06:	6a3a      	ldr	r2, [r7, #32]
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d203      	bcs.n	800ca16 <create_name+0x1da>
 800ca0e:	69ba      	ldr	r2, [r7, #24]
 800ca10:	697b      	ldr	r3, [r7, #20]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d123      	bne.n	800ca5e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800ca16:	69fb      	ldr	r3, [r7, #28]
 800ca18:	2b0b      	cmp	r3, #11
 800ca1a:	d106      	bne.n	800ca2a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800ca1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca20:	f043 0303 	orr.w	r3, r3, #3
 800ca24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800ca28:	e075      	b.n	800cb16 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800ca2a:	69ba      	ldr	r2, [r7, #24]
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	429a      	cmp	r2, r3
 800ca30:	d005      	beq.n	800ca3e <create_name+0x202>
 800ca32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca36:	f043 0303 	orr.w	r3, r3, #3
 800ca3a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d866      	bhi.n	800cb14 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	61bb      	str	r3, [r7, #24]
 800ca4a:	2308      	movs	r3, #8
 800ca4c:	623b      	str	r3, [r7, #32]
 800ca4e:	230b      	movs	r3, #11
 800ca50:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ca52:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800ca5c:	e051      	b.n	800cb02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ca5e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca60:	2b7f      	cmp	r3, #127	@ 0x7f
 800ca62:	d914      	bls.n	800ca8e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ca64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca66:	2100      	movs	r1, #0
 800ca68:	4618      	mov	r0, r3
 800ca6a:	f002 fb7b 	bl	800f164 <ff_convert>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ca72:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d004      	beq.n	800ca82 <create_name+0x246>
 800ca78:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca7a:	3b80      	subs	r3, #128	@ 0x80
 800ca7c:	4a23      	ldr	r2, [pc, #140]	@ (800cb0c <create_name+0x2d0>)
 800ca7e:	5cd3      	ldrb	r3, [r2, r3]
 800ca80:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ca82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ca86:	f043 0302 	orr.w	r3, r3, #2
 800ca8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ca8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d007      	beq.n	800caa4 <create_name+0x268>
 800ca94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ca96:	4619      	mov	r1, r3
 800ca98:	481d      	ldr	r0, [pc, #116]	@ (800cb10 <create_name+0x2d4>)
 800ca9a:	f7fd fb1d 	bl	800a0d8 <chk_chr>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d008      	beq.n	800cab6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800caa4:	235f      	movs	r3, #95	@ 0x5f
 800caa6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800caa8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800caac:	f043 0303 	orr.w	r3, r3, #3
 800cab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800cab4:	e01b      	b.n	800caee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800cab6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cab8:	2b40      	cmp	r3, #64	@ 0x40
 800caba:	d909      	bls.n	800cad0 <create_name+0x294>
 800cabc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cabe:	2b5a      	cmp	r3, #90	@ 0x5a
 800cac0:	d806      	bhi.n	800cad0 <create_name+0x294>
					b |= 2;
 800cac2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cac6:	f043 0302 	orr.w	r3, r3, #2
 800caca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cace:	e00e      	b.n	800caee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800cad0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cad2:	2b60      	cmp	r3, #96	@ 0x60
 800cad4:	d90b      	bls.n	800caee <create_name+0x2b2>
 800cad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800cad8:	2b7a      	cmp	r3, #122	@ 0x7a
 800cada:	d808      	bhi.n	800caee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800cadc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cae0:	f043 0301 	orr.w	r3, r3, #1
 800cae4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800cae8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800caea:	3b20      	subs	r3, #32
 800caec:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800caee:	6a3b      	ldr	r3, [r7, #32]
 800caf0:	1c5a      	adds	r2, r3, #1
 800caf2:	623a      	str	r2, [r7, #32]
 800caf4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800caf6:	b2d1      	uxtb	r1, r2
 800caf8:	687a      	ldr	r2, [r7, #4]
 800cafa:	4413      	add	r3, r2
 800cafc:	460a      	mov	r2, r1
 800cafe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 800cb02:	e763      	b.n	800c9cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800cb04:	bf00      	nop
 800cb06:	e006      	b.n	800cb16 <create_name+0x2da>
 800cb08:	0801417c 	.word	0x0801417c
 800cb0c:	08014238 	.word	0x08014238
 800cb10:	08014188 	.word	0x08014188
			if (si > di) break;			/* No extension */
 800cb14:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cb1c:	2be5      	cmp	r3, #229	@ 0xe5
 800cb1e:	d103      	bne.n	800cb28 <create_name+0x2ec>
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2205      	movs	r2, #5
 800cb24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 800cb28:	69fb      	ldr	r3, [r7, #28]
 800cb2a:	2b08      	cmp	r3, #8
 800cb2c:	d104      	bne.n	800cb38 <create_name+0x2fc>
 800cb2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb32:	009b      	lsls	r3, r3, #2
 800cb34:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800cb38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb3c:	f003 030c 	and.w	r3, r3, #12
 800cb40:	2b0c      	cmp	r3, #12
 800cb42:	d005      	beq.n	800cb50 <create_name+0x314>
 800cb44:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb48:	f003 0303 	and.w	r3, r3, #3
 800cb4c:	2b03      	cmp	r3, #3
 800cb4e:	d105      	bne.n	800cb5c <create_name+0x320>
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb54:	f043 0302 	orr.w	r3, r3, #2
 800cb58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800cb5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb60:	f003 0302 	and.w	r3, r3, #2
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d117      	bne.n	800cb98 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800cb68:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb6c:	f003 0303 	and.w	r3, r3, #3
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d105      	bne.n	800cb80 <create_name+0x344>
 800cb74:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb78:	f043 0310 	orr.w	r3, r3, #16
 800cb7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800cb80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800cb84:	f003 030c 	and.w	r3, r3, #12
 800cb88:	2b04      	cmp	r3, #4
 800cb8a:	d105      	bne.n	800cb98 <create_name+0x35c>
 800cb8c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800cb90:	f043 0308 	orr.w	r3, r3, #8
 800cb94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800cb9e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 800cba2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3728      	adds	r7, #40	@ 0x28
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b086      	sub	sp, #24
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cbba:	693b      	ldr	r3, [r7, #16]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cbc0:	e002      	b.n	800cbc8 <follow_path+0x1c>
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	3301      	adds	r3, #1
 800cbc6:	603b      	str	r3, [r7, #0]
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b2f      	cmp	r3, #47	@ 0x2f
 800cbce:	d0f8      	beq.n	800cbc2 <follow_path+0x16>
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	781b      	ldrb	r3, [r3, #0]
 800cbd4:	2b5c      	cmp	r3, #92	@ 0x5c
 800cbd6:	d0f4      	beq.n	800cbc2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	2200      	movs	r2, #0
 800cbdc:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cbe4:	683b      	ldr	r3, [r7, #0]
 800cbe6:	781b      	ldrb	r3, [r3, #0]
 800cbe8:	2b1f      	cmp	r3, #31
 800cbea:	d80a      	bhi.n	800cc02 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2280      	movs	r2, #128	@ 0x80
 800cbf0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 800cbf4:	2100      	movs	r1, #0
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f7fe faf7 	bl	800b1ea <dir_sdi>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	75fb      	strb	r3, [r7, #23]
 800cc00:	e07d      	b.n	800ccfe <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc02:	463b      	mov	r3, r7
 800cc04:	4619      	mov	r1, r3
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	f7ff fe18 	bl	800c83c <create_name>
 800cc0c:	4603      	mov	r3, r0
 800cc0e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc10:	7dfb      	ldrb	r3, [r7, #23]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d16e      	bne.n	800ccf4 <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f7ff fa4d 	bl	800c0b6 <dir_find>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800cc26:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cc28:	7dfb      	ldrb	r3, [r7, #23]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d00a      	beq.n	800cc44 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cc2e:	7dfb      	ldrb	r3, [r7, #23]
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d161      	bne.n	800ccf8 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800cc34:	7afb      	ldrb	r3, [r7, #11]
 800cc36:	f003 0304 	and.w	r3, r3, #4
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d15c      	bne.n	800ccf8 <follow_path+0x14c>
 800cc3e:	2305      	movs	r3, #5
 800cc40:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800cc42:	e059      	b.n	800ccf8 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cc44:	7afb      	ldrb	r3, [r7, #11]
 800cc46:	f003 0304 	and.w	r3, r3, #4
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d156      	bne.n	800ccfc <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	799b      	ldrb	r3, [r3, #6]
 800cc52:	f003 0310 	and.w	r3, r3, #16
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d102      	bne.n	800cc60 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800cc5a:	2305      	movs	r3, #5
 800cc5c:	75fb      	strb	r3, [r7, #23]
 800cc5e:	e04e      	b.n	800ccfe <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	781b      	ldrb	r3, [r3, #0]
 800cc64:	2b04      	cmp	r3, #4
 800cc66:	d130      	bne.n	800ccca <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	689a      	ldr	r2, [r3, #8]
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800cc70:	693b      	ldr	r3, [r7, #16]
 800cc72:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cc76:	4613      	mov	r3, r2
 800cc78:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	79d2      	ldrb	r2, [r2, #7]
 800cc80:	431a      	orrs	r2, r3
 800cc82:	693b      	ldr	r3, [r7, #16]
 800cc84:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800cc8a:	693b      	ldr	r3, [r7, #16]
 800cc8c:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	695b      	ldr	r3, [r3, #20]
 800cc92:	3334      	adds	r3, #52	@ 0x34
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7fc ffef 	bl	8009c78 <ld_dword>
 800cc9a:	4602      	mov	r2, r0
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	695b      	ldr	r3, [r3, #20]
 800cca4:	3321      	adds	r3, #33	@ 0x21
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 0302 	and.w	r3, r3, #2
 800ccac:	b2da      	uxtb	r2, r3
 800ccae:	693b      	ldr	r3, [r7, #16]
 800ccb0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	695b      	ldr	r3, [r3, #20]
 800ccb6:	3338      	adds	r3, #56	@ 0x38
 800ccb8:	4618      	mov	r0, r3
 800ccba:	f7fd f800 	bl	8009cbe <ld_qword>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	460b      	mov	r3, r1
 800ccc2:	6939      	ldr	r1, [r7, #16]
 800ccc4:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800ccc8:	e79b      	b.n	800cc02 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccd4:	68fa      	ldr	r2, [r7, #12]
 800ccd6:	8992      	ldrh	r2, [r2, #12]
 800ccd8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ccdc:	fb00 f202 	mul.w	r2, r0, r2
 800cce0:	1a9b      	subs	r3, r3, r2
 800cce2:	440b      	add	r3, r1
 800cce4:	4619      	mov	r1, r3
 800cce6:	68f8      	ldr	r0, [r7, #12]
 800cce8:	f7fe fc55 	bl	800b596 <ld_clust>
 800ccec:	4602      	mov	r2, r0
 800ccee:	693b      	ldr	r3, [r7, #16]
 800ccf0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ccf2:	e786      	b.n	800cc02 <follow_path+0x56>
			if (res != FR_OK) break;
 800ccf4:	bf00      	nop
 800ccf6:	e002      	b.n	800ccfe <follow_path+0x152>
				break;
 800ccf8:	bf00      	nop
 800ccfa:	e000      	b.n	800ccfe <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccfc:	bf00      	nop
			}
		}
	}

	return res;
 800ccfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd00:	4618      	mov	r0, r3
 800cd02:	3718      	adds	r7, #24
 800cd04:	46bd      	mov	sp, r7
 800cd06:	bd80      	pop	{r7, pc}

0800cd08 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd10:	f04f 33ff 	mov.w	r3, #4294967295
 800cd14:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d031      	beq.n	800cd82 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	617b      	str	r3, [r7, #20]
 800cd24:	e002      	b.n	800cd2c <get_ldnumber+0x24>
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	3301      	adds	r3, #1
 800cd2a:	617b      	str	r3, [r7, #20]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	2b1f      	cmp	r3, #31
 800cd32:	d903      	bls.n	800cd3c <get_ldnumber+0x34>
 800cd34:	697b      	ldr	r3, [r7, #20]
 800cd36:	781b      	ldrb	r3, [r3, #0]
 800cd38:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd3a:	d1f4      	bne.n	800cd26 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b3a      	cmp	r3, #58	@ 0x3a
 800cd42:	d11c      	bne.n	800cd7e <get_ldnumber+0x76>
			tp = *path;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	1c5a      	adds	r2, r3, #1
 800cd4e:	60fa      	str	r2, [r7, #12]
 800cd50:	781b      	ldrb	r3, [r3, #0]
 800cd52:	3b30      	subs	r3, #48	@ 0x30
 800cd54:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	2b09      	cmp	r3, #9
 800cd5a:	d80e      	bhi.n	800cd7a <get_ldnumber+0x72>
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	429a      	cmp	r2, r3
 800cd62:	d10a      	bne.n	800cd7a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d107      	bne.n	800cd7a <get_ldnumber+0x72>
					vol = (int)i;
 800cd6a:	68bb      	ldr	r3, [r7, #8]
 800cd6c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	3301      	adds	r3, #1
 800cd72:	617b      	str	r3, [r7, #20]
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	697a      	ldr	r2, [r7, #20]
 800cd78:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd7a:	693b      	ldr	r3, [r7, #16]
 800cd7c:	e002      	b.n	800cd84 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd7e:	2300      	movs	r3, #0
 800cd80:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd82:	693b      	ldr	r3, [r7, #16]
}
 800cd84:	4618      	mov	r0, r3
 800cd86:	371c      	adds	r7, #28
 800cd88:	46bd      	mov	sp, r7
 800cd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8e:	4770      	bx	lr

0800cd90 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b082      	sub	sp, #8
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	70da      	strb	r2, [r3, #3]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f04f 32ff 	mov.w	r2, #4294967295
 800cda6:	63da      	str	r2, [r3, #60]	@ 0x3c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cda8:	6839      	ldr	r1, [r7, #0]
 800cdaa:	6878      	ldr	r0, [r7, #4]
 800cdac:	f7fd fb90 	bl	800a4d0 <move_window>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d001      	beq.n	800cdba <check_fs+0x2a>
 800cdb6:	2304      	movs	r3, #4
 800cdb8:	e044      	b.n	800ce44 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	3340      	adds	r3, #64	@ 0x40
 800cdbe:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fc ff40 	bl	8009c48 <ld_word>
 800cdc8:	4603      	mov	r3, r0
 800cdca:	461a      	mov	r2, r3
 800cdcc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800cdd0:	429a      	cmp	r2, r3
 800cdd2:	d001      	beq.n	800cdd8 <check_fs+0x48>
 800cdd4:	2303      	movs	r3, #3
 800cdd6:	e035      	b.n	800ce44 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cdde:	2be9      	cmp	r3, #233	@ 0xe9
 800cde0:	d009      	beq.n	800cdf6 <check_fs+0x66>
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800cde8:	2beb      	cmp	r3, #235	@ 0xeb
 800cdea:	d11e      	bne.n	800ce2a <check_fs+0x9a>
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cdf2:	2b90      	cmp	r3, #144	@ 0x90
 800cdf4:	d119      	bne.n	800ce2a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	3340      	adds	r3, #64	@ 0x40
 800cdfa:	3336      	adds	r3, #54	@ 0x36
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	f7fc ff3b 	bl	8009c78 <ld_dword>
 800ce02:	4603      	mov	r3, r0
 800ce04:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800ce08:	4a10      	ldr	r2, [pc, #64]	@ (800ce4c <check_fs+0xbc>)
 800ce0a:	4293      	cmp	r3, r2
 800ce0c:	d101      	bne.n	800ce12 <check_fs+0x82>
 800ce0e:	2300      	movs	r3, #0
 800ce10:	e018      	b.n	800ce44 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	3340      	adds	r3, #64	@ 0x40
 800ce16:	3352      	adds	r3, #82	@ 0x52
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7fc ff2d 	bl	8009c78 <ld_dword>
 800ce1e:	4603      	mov	r3, r0
 800ce20:	4a0b      	ldr	r2, [pc, #44]	@ (800ce50 <check_fs+0xc0>)
 800ce22:	4293      	cmp	r3, r2
 800ce24:	d101      	bne.n	800ce2a <check_fs+0x9a>
 800ce26:	2300      	movs	r3, #0
 800ce28:	e00c      	b.n	800ce44 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	3340      	adds	r3, #64	@ 0x40
 800ce2e:	220b      	movs	r2, #11
 800ce30:	4908      	ldr	r1, [pc, #32]	@ (800ce54 <check_fs+0xc4>)
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7fd f929 	bl	800a08a <mem_cmp>
 800ce38:	4603      	mov	r3, r0
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d101      	bne.n	800ce42 <check_fs+0xb2>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	e000      	b.n	800ce44 <check_fs+0xb4>
#endif
	return 2;
 800ce42:	2302      	movs	r3, #2
}
 800ce44:	4618      	mov	r0, r3
 800ce46:	3708      	adds	r7, #8
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	00544146 	.word	0x00544146
 800ce50:	33544146 	.word	0x33544146
 800ce54:	08014190 	.word	0x08014190

0800ce58 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ce5c:	b09c      	sub	sp, #112	@ 0x70
 800ce5e:	af00      	add	r7, sp, #0
 800ce60:	61f8      	str	r0, [r7, #28]
 800ce62:	61b9      	str	r1, [r7, #24]
 800ce64:	4613      	mov	r3, r2
 800ce66:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce68:	69bb      	ldr	r3, [r7, #24]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce6e:	69f8      	ldr	r0, [r7, #28]
 800ce70:	f7ff ff4a 	bl	800cd08 <get_ldnumber>
 800ce74:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	da01      	bge.n	800ce80 <find_volume+0x28>
 800ce7c:	230b      	movs	r3, #11
 800ce7e:	e378      	b.n	800d572 <find_volume+0x71a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce80:	4aa2      	ldr	r2, [pc, #648]	@ (800d10c <find_volume+0x2b4>)
 800ce82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ce84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce88:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d101      	bne.n	800ce94 <find_volume+0x3c>
 800ce90:	230c      	movs	r3, #12
 800ce92:	e36e      	b.n	800d572 <find_volume+0x71a>

	ENTER_FF(fs);						/* Lock the volume */
 800ce94:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ce96:	f7fd f93a 	bl	800a10e <lock_fs>
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d101      	bne.n	800cea4 <find_volume+0x4c>
 800cea0:	230f      	movs	r3, #15
 800cea2:	e366      	b.n	800d572 <find_volume+0x71a>
	*rfs = fs;							/* Return pointer to the file system object */
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800cea8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ceaa:	7dfb      	ldrb	r3, [r7, #23]
 800ceac:	f023 0301 	bic.w	r3, r3, #1
 800ceb0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ceb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ceb4:	781b      	ldrb	r3, [r3, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d01a      	beq.n	800cef0 <find_volume+0x98>
		stat = disk_status(fs->drv);
 800ceba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fc fe22 	bl	8009b08 <disk_status>
 800cec4:	4603      	mov	r3, r0
 800cec6:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ceca:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cece:	f003 0301 	and.w	r3, r3, #1
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d10c      	bne.n	800cef0 <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ced6:	7dfb      	ldrb	r3, [r7, #23]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d007      	beq.n	800ceec <find_volume+0x94>
 800cedc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cee0:	f003 0304 	and.w	r3, r3, #4
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 800cee8:	230a      	movs	r3, #10
 800ceea:	e342      	b.n	800d572 <find_volume+0x71a>
			}
			return FR_OK;				/* The file system object is valid */
 800ceec:	2300      	movs	r3, #0
 800ceee:	e340      	b.n	800d572 <find_volume+0x71a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800cef0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cef2:	2200      	movs	r2, #0
 800cef4:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800cef6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cef8:	b2da      	uxtb	r2, r3
 800cefa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cefc:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cefe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf00:	785b      	ldrb	r3, [r3, #1]
 800cf02:	4618      	mov	r0, r3
 800cf04:	f7fc fe1a 	bl	8009b3c <disk_initialize>
 800cf08:	4603      	mov	r3, r0
 800cf0a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cf0e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cf12:	f003 0301 	and.w	r3, r3, #1
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d001      	beq.n	800cf1e <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cf1a:	2303      	movs	r3, #3
 800cf1c:	e329      	b.n	800d572 <find_volume+0x71a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf1e:	7dfb      	ldrb	r3, [r7, #23]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d007      	beq.n	800cf34 <find_volume+0xdc>
 800cf24:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800cf28:	f003 0304 	and.w	r3, r3, #4
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 800cf30:	230a      	movs	r3, #10
 800cf32:	e31e      	b.n	800d572 <find_volume+0x71a>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cf34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf36:	7858      	ldrb	r0, [r3, #1]
 800cf38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf3a:	330c      	adds	r3, #12
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	2102      	movs	r1, #2
 800cf40:	f7fc fe64 	bl	8009c0c <disk_ioctl>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d001      	beq.n	800cf4e <find_volume+0xf6>
 800cf4a:	2301      	movs	r3, #1
 800cf4c:	e311      	b.n	800d572 <find_volume+0x71a>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cf4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf50:	899b      	ldrh	r3, [r3, #12]
 800cf52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cf56:	d80d      	bhi.n	800cf74 <find_volume+0x11c>
 800cf58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf5a:	899b      	ldrh	r3, [r3, #12]
 800cf5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cf60:	d308      	bcc.n	800cf74 <find_volume+0x11c>
 800cf62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf64:	899b      	ldrh	r3, [r3, #12]
 800cf66:	461a      	mov	r2, r3
 800cf68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf6a:	899b      	ldrh	r3, [r3, #12]
 800cf6c:	3b01      	subs	r3, #1
 800cf6e:	4013      	ands	r3, r2
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d001      	beq.n	800cf78 <find_volume+0x120>
 800cf74:	2301      	movs	r3, #1
 800cf76:	e2fc      	b.n	800d572 <find_volume+0x71a>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf78:	2300      	movs	r3, #0
 800cf7a:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800cf7e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800cf80:	f7ff ff06 	bl	800cd90 <check_fs>
 800cf84:	4603      	mov	r3, r0
 800cf86:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf8a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800cf8e:	2b02      	cmp	r3, #2
 800cf90:	d14d      	bne.n	800d02e <find_volume+0x1d6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf92:	2300      	movs	r3, #0
 800cf94:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cf96:	e020      	b.n	800cfda <find_volume+0x182>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf9a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800cf9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfa0:	011b      	lsls	r3, r3, #4
 800cfa2:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800cfa6:	4413      	add	r3, r2
 800cfa8:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cfaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfac:	3304      	adds	r3, #4
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d006      	beq.n	800cfc2 <find_volume+0x16a>
 800cfb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cfb6:	3308      	adds	r3, #8
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7fc fe5d 	bl	8009c78 <ld_dword>
 800cfbe:	4602      	mov	r2, r0
 800cfc0:	e000      	b.n	800cfc4 <find_volume+0x16c>
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	3360      	adds	r3, #96	@ 0x60
 800cfca:	f107 0110 	add.w	r1, r7, #16
 800cfce:	440b      	add	r3, r1
 800cfd0:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cfd4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cfda:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfdc:	2b03      	cmp	r3, #3
 800cfde:	d9db      	bls.n	800cf98 <find_volume+0x140>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 800cfe4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d002      	beq.n	800cff0 <find_volume+0x198>
 800cfea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cfec:	3b01      	subs	r3, #1
 800cfee:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	3360      	adds	r3, #96	@ 0x60
 800cff6:	f107 0210 	add.w	r2, r7, #16
 800cffa:	4413      	add	r3, r2
 800cffc:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d000:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d002:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d004:	2b00      	cmp	r3, #0
 800d006:	d005      	beq.n	800d014 <find_volume+0x1bc>
 800d008:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d00a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d00c:	f7ff fec0 	bl	800cd90 <check_fs>
 800d010:	4603      	mov	r3, r0
 800d012:	e000      	b.n	800d016 <find_volume+0x1be>
 800d014:	2303      	movs	r3, #3
 800d016:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d01a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d01e:	2b01      	cmp	r3, #1
 800d020:	d905      	bls.n	800d02e <find_volume+0x1d6>
 800d022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d024:	3301      	adds	r3, #1
 800d026:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d028:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d02a:	2b03      	cmp	r3, #3
 800d02c:	d9e0      	bls.n	800cff0 <find_volume+0x198>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d02e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d032:	2b04      	cmp	r3, #4
 800d034:	d101      	bne.n	800d03a <find_volume+0x1e2>
 800d036:	2301      	movs	r3, #1
 800d038:	e29b      	b.n	800d572 <find_volume+0x71a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d03a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d03e:	2b01      	cmp	r3, #1
 800d040:	d901      	bls.n	800d046 <find_volume+0x1ee>
 800d042:	230d      	movs	r3, #13
 800d044:	e295      	b.n	800d572 <find_volume+0x71a>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d046:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d04a:	2b01      	cmp	r3, #1
 800d04c:	f040 8100 	bne.w	800d250 <find_volume+0x3f8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d050:	230b      	movs	r3, #11
 800d052:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d054:	e002      	b.n	800d05c <find_volume+0x204>
 800d056:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d058:	3301      	adds	r3, #1
 800d05a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d05c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d05e:	2b3f      	cmp	r3, #63	@ 0x3f
 800d060:	d806      	bhi.n	800d070 <find_volume+0x218>
 800d062:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d066:	4413      	add	r3, r2
 800d068:	3340      	adds	r3, #64	@ 0x40
 800d06a:	781b      	ldrb	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d0f2      	beq.n	800d056 <find_volume+0x1fe>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d070:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d072:	2b3f      	cmp	r3, #63	@ 0x3f
 800d074:	d801      	bhi.n	800d07a <find_volume+0x222>
 800d076:	230d      	movs	r3, #13
 800d078:	e27b      	b.n	800d572 <find_volume+0x71a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d07a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d07c:	3340      	adds	r3, #64	@ 0x40
 800d07e:	3368      	adds	r3, #104	@ 0x68
 800d080:	4618      	mov	r0, r3
 800d082:	f7fc fde1 	bl	8009c48 <ld_word>
 800d086:	4603      	mov	r3, r0
 800d088:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d08c:	d001      	beq.n	800d092 <find_volume+0x23a>
 800d08e:	230d      	movs	r3, #13
 800d090:	e26f      	b.n	800d572 <find_volume+0x71a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d092:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d094:	f893 30ac 	ldrb.w	r3, [r3, #172]	@ 0xac
 800d098:	461a      	mov	r2, r3
 800d09a:	2301      	movs	r3, #1
 800d09c:	4093      	lsls	r3, r2
 800d09e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d0a0:	8992      	ldrh	r2, [r2, #12]
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d001      	beq.n	800d0aa <find_volume+0x252>
			return FR_NO_FILESYSTEM;
 800d0a6:	230d      	movs	r3, #13
 800d0a8:	e263      	b.n	800d572 <find_volume+0x71a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d0aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0ac:	3340      	adds	r3, #64	@ 0x40
 800d0ae:	3348      	adds	r3, #72	@ 0x48
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	f7fc fe04 	bl	8009cbe <ld_qword>
 800d0b6:	4602      	mov	r2, r0
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800d0bc:	2000      	movs	r0, #0
 800d0be:	60b9      	str	r1, [r7, #8]
 800d0c0:	60f8      	str	r0, [r7, #12]
 800d0c2:	68b9      	ldr	r1, [r7, #8]
 800d0c4:	1851      	adds	r1, r2, r1
 800d0c6:	6039      	str	r1, [r7, #0]
 800d0c8:	68f9      	ldr	r1, [r7, #12]
 800d0ca:	eb43 0101 	adc.w	r1, r3, r1
 800d0ce:	6079      	str	r1, [r7, #4]
 800d0d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d0d4:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d0d8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d0dc:	2b01      	cmp	r3, #1
 800d0de:	d301      	bcc.n	800d0e4 <find_volume+0x28c>
 800d0e0:	230d      	movs	r3, #13
 800d0e2:	e246      	b.n	800d572 <find_volume+0x71a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d0e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0e6:	3340      	adds	r3, #64	@ 0x40
 800d0e8:	3354      	adds	r3, #84	@ 0x54
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7fc fdc4 	bl	8009c78 <ld_dword>
 800d0f0:	4602      	mov	r2, r0
 800d0f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0f4:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d0f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0f8:	f893 20ae 	ldrb.w	r2, [r3, #174]	@ 0xae
 800d0fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d0fe:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d100:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d102:	789b      	ldrb	r3, [r3, #2]
 800d104:	2b01      	cmp	r3, #1
 800d106:	d003      	beq.n	800d110 <find_volume+0x2b8>
 800d108:	230d      	movs	r3, #13
 800d10a:	e232      	b.n	800d572 <find_volume+0x71a>
 800d10c:	200022f4 	.word	0x200022f4

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d110:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d112:	f893 30ad 	ldrb.w	r3, [r3, #173]	@ 0xad
 800d116:	461a      	mov	r2, r3
 800d118:	2301      	movs	r3, #1
 800d11a:	4093      	lsls	r3, r2
 800d11c:	b29a      	uxth	r2, r3
 800d11e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d120:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d124:	895b      	ldrh	r3, [r3, #10]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d101      	bne.n	800d12e <find_volume+0x2d6>
 800d12a:	230d      	movs	r3, #13
 800d12c:	e221      	b.n	800d572 <find_volume+0x71a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d12e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d130:	3340      	adds	r3, #64	@ 0x40
 800d132:	335c      	adds	r3, #92	@ 0x5c
 800d134:	4618      	mov	r0, r3
 800d136:	f7fc fd9f 	bl	8009c78 <ld_dword>
 800d13a:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d13c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d13e:	4a9a      	ldr	r2, [pc, #616]	@ (800d3a8 <find_volume+0x550>)
 800d140:	4293      	cmp	r3, r2
 800d142:	d901      	bls.n	800d148 <find_volume+0x2f0>
 800d144:	230d      	movs	r3, #13
 800d146:	e214      	b.n	800d572 <find_volume+0x71a>
		fs->n_fatent = nclst + 2;
 800d148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d14a:	1c9a      	adds	r2, r3, #2
 800d14c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d14e:	625a      	str	r2, [r3, #36]	@ 0x24

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d150:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d152:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d154:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d158:	3340      	adds	r3, #64	@ 0x40
 800d15a:	3358      	adds	r3, #88	@ 0x58
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7fc fd8b 	bl	8009c78 <ld_dword>
 800d162:	4602      	mov	r2, r0
 800d164:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d166:	441a      	add	r2, r3
 800d168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d16a:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d16c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d16e:	3340      	adds	r3, #64	@ 0x40
 800d170:	3350      	adds	r3, #80	@ 0x50
 800d172:	4618      	mov	r0, r3
 800d174:	f7fc fd80 	bl	8009c78 <ld_dword>
 800d178:	4602      	mov	r2, r0
 800d17a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d17c:	441a      	add	r2, r3
 800d17e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d180:	631a      	str	r2, [r3, #48]	@ 0x30
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d184:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d186:	2200      	movs	r2, #0
 800d188:	469a      	mov	sl, r3
 800d18a:	4693      	mov	fp, r2
 800d18c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d18e:	895b      	ldrh	r3, [r3, #10]
 800d190:	461a      	mov	r2, r3
 800d192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d194:	fb02 f303 	mul.w	r3, r2, r3
 800d198:	2200      	movs	r2, #0
 800d19a:	4698      	mov	r8, r3
 800d19c:	4691      	mov	r9, r2
 800d19e:	eb1a 0408 	adds.w	r4, sl, r8
 800d1a2:	eb4b 0509 	adc.w	r5, fp, r9
 800d1a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800d1aa:	42a2      	cmp	r2, r4
 800d1ac:	41ab      	sbcs	r3, r5
 800d1ae:	d201      	bcs.n	800d1b4 <find_volume+0x35c>
 800d1b0:	230d      	movs	r3, #13
 800d1b2:	e1de      	b.n	800d572 <find_volume+0x71a>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d1b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1b6:	3340      	adds	r3, #64	@ 0x40
 800d1b8:	3360      	adds	r3, #96	@ 0x60
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fc fd5c 	bl	8009c78 <ld_dword>
 800d1c0:	4602      	mov	r2, r0
 800d1c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1c4:	635a      	str	r2, [r3, #52]	@ 0x34

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d1c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d1ca:	4619      	mov	r1, r3
 800d1cc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d1ce:	f7fd fa1d 	bl	800a60c <clust2sect>
 800d1d2:	4603      	mov	r3, r0
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d1d8:	f7fd f97a 	bl	800a4d0 <move_window>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <find_volume+0x38e>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e1c5      	b.n	800d572 <find_volume+0x71a>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d1ea:	e015      	b.n	800d218 <find_volume+0x3c0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d1ec:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d1ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d1f0:	4413      	add	r3, r2
 800d1f2:	3340      	adds	r3, #64	@ 0x40
 800d1f4:	781b      	ldrb	r3, [r3, #0]
 800d1f6:	2b81      	cmp	r3, #129	@ 0x81
 800d1f8:	d10b      	bne.n	800d212 <find_volume+0x3ba>
 800d1fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d1fc:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800d200:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d202:	3314      	adds	r3, #20
 800d204:	4413      	add	r3, r2
 800d206:	4618      	mov	r0, r3
 800d208:	f7fc fd36 	bl	8009c78 <ld_dword>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d009      	beq.n	800d226 <find_volume+0x3ce>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d212:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d214:	3320      	adds	r3, #32
 800d216:	65bb      	str	r3, [r7, #88]	@ 0x58
 800d218:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d21a:	899b      	ldrh	r3, [r3, #12]
 800d21c:	461a      	mov	r2, r3
 800d21e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d220:	4293      	cmp	r3, r2
 800d222:	d3e3      	bcc.n	800d1ec <find_volume+0x394>
 800d224:	e000      	b.n	800d228 <find_volume+0x3d0>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d226:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800d228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d22a:	899b      	ldrh	r3, [r3, #12]
 800d22c:	461a      	mov	r2, r3
 800d22e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d230:	4293      	cmp	r3, r2
 800d232:	d101      	bne.n	800d238 <find_volume+0x3e0>
 800d234:	230d      	movs	r3, #13
 800d236:	e19c      	b.n	800d572 <find_volume+0x71a>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d238:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d23a:	f04f 32ff 	mov.w	r2, #4294967295
 800d23e:	621a      	str	r2, [r3, #32]
 800d240:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d242:	6a1a      	ldr	r2, [r3, #32]
 800d244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d246:	61da      	str	r2, [r3, #28]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800d248:	2304      	movs	r3, #4
 800d24a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800d24e:	e17e      	b.n	800d54e <find_volume+0x6f6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d252:	3340      	adds	r3, #64	@ 0x40
 800d254:	330b      	adds	r3, #11
 800d256:	4618      	mov	r0, r3
 800d258:	f7fc fcf6 	bl	8009c48 <ld_word>
 800d25c:	4603      	mov	r3, r0
 800d25e:	461a      	mov	r2, r3
 800d260:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d262:	899b      	ldrh	r3, [r3, #12]
 800d264:	429a      	cmp	r2, r3
 800d266:	d001      	beq.n	800d26c <find_volume+0x414>
 800d268:	230d      	movs	r3, #13
 800d26a:	e182      	b.n	800d572 <find_volume+0x71a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d26c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d26e:	3340      	adds	r3, #64	@ 0x40
 800d270:	3316      	adds	r3, #22
 800d272:	4618      	mov	r0, r3
 800d274:	f7fc fce8 	bl	8009c48 <ld_word>
 800d278:	4603      	mov	r3, r0
 800d27a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d27c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d106      	bne.n	800d290 <find_volume+0x438>
 800d282:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d284:	3340      	adds	r3, #64	@ 0x40
 800d286:	3324      	adds	r3, #36	@ 0x24
 800d288:	4618      	mov	r0, r3
 800d28a:	f7fc fcf5 	bl	8009c78 <ld_dword>
 800d28e:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800d290:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d292:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800d294:	629a      	str	r2, [r3, #40]	@ 0x28

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d296:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d298:	f893 2050 	ldrb.w	r2, [r3, #80]	@ 0x50
 800d29c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d29e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d2a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2a2:	789b      	ldrb	r3, [r3, #2]
 800d2a4:	2b01      	cmp	r3, #1
 800d2a6:	d005      	beq.n	800d2b4 <find_volume+0x45c>
 800d2a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2aa:	789b      	ldrb	r3, [r3, #2]
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d001      	beq.n	800d2b4 <find_volume+0x45c>
 800d2b0:	230d      	movs	r3, #13
 800d2b2:	e15e      	b.n	800d572 <find_volume+0x71a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d2b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2b6:	789b      	ldrb	r3, [r3, #2]
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d2bc:	fb02 f303 	mul.w	r3, r2, r3
 800d2c0:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d2c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2c4:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2cc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d2ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2d0:	895b      	ldrh	r3, [r3, #10]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d008      	beq.n	800d2e8 <find_volume+0x490>
 800d2d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2d8:	895b      	ldrh	r3, [r3, #10]
 800d2da:	461a      	mov	r2, r3
 800d2dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2de:	895b      	ldrh	r3, [r3, #10]
 800d2e0:	3b01      	subs	r3, #1
 800d2e2:	4013      	ands	r3, r2
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d001      	beq.n	800d2ec <find_volume+0x494>
 800d2e8:	230d      	movs	r3, #13
 800d2ea:	e142      	b.n	800d572 <find_volume+0x71a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d2ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2ee:	3340      	adds	r3, #64	@ 0x40
 800d2f0:	3311      	adds	r3, #17
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f7fc fca8 	bl	8009c48 <ld_word>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	461a      	mov	r2, r3
 800d2fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d2fe:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d302:	891b      	ldrh	r3, [r3, #8]
 800d304:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d306:	8992      	ldrh	r2, [r2, #12]
 800d308:	0952      	lsrs	r2, r2, #5
 800d30a:	b292      	uxth	r2, r2
 800d30c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d310:	fb01 f202 	mul.w	r2, r1, r2
 800d314:	1a9b      	subs	r3, r3, r2
 800d316:	b29b      	uxth	r3, r3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d001      	beq.n	800d320 <find_volume+0x4c8>
 800d31c:	230d      	movs	r3, #13
 800d31e:	e128      	b.n	800d572 <find_volume+0x71a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d322:	3340      	adds	r3, #64	@ 0x40
 800d324:	3313      	adds	r3, #19
 800d326:	4618      	mov	r0, r3
 800d328:	f7fc fc8e 	bl	8009c48 <ld_word>
 800d32c:	4603      	mov	r3, r0
 800d32e:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d330:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d332:	2b00      	cmp	r3, #0
 800d334:	d106      	bne.n	800d344 <find_volume+0x4ec>
 800d336:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d338:	3340      	adds	r3, #64	@ 0x40
 800d33a:	3320      	adds	r3, #32
 800d33c:	4618      	mov	r0, r3
 800d33e:	f7fc fc9b 	bl	8009c78 <ld_dword>
 800d342:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d346:	3340      	adds	r3, #64	@ 0x40
 800d348:	330e      	adds	r3, #14
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fc fc7c 	bl	8009c48 <ld_word>
 800d350:	4603      	mov	r3, r0
 800d352:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d356:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d101      	bne.n	800d362 <find_volume+0x50a>
 800d35e:	230d      	movs	r3, #13
 800d360:	e107      	b.n	800d572 <find_volume+0x71a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d362:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d366:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d368:	4413      	add	r3, r2
 800d36a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d36c:	8911      	ldrh	r1, [r2, #8]
 800d36e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d370:	8992      	ldrh	r2, [r2, #12]
 800d372:	0952      	lsrs	r2, r2, #5
 800d374:	b292      	uxth	r2, r2
 800d376:	fbb1 f2f2 	udiv	r2, r1, r2
 800d37a:	b292      	uxth	r2, r2
 800d37c:	4413      	add	r3, r2
 800d37e:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d380:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d382:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d384:	429a      	cmp	r2, r3
 800d386:	d201      	bcs.n	800d38c <find_volume+0x534>
 800d388:	230d      	movs	r3, #13
 800d38a:	e0f2      	b.n	800d572 <find_volume+0x71a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d38c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800d38e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d390:	1ad3      	subs	r3, r2, r3
 800d392:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d394:	8952      	ldrh	r2, [r2, #10]
 800d396:	fbb3 f3f2 	udiv	r3, r3, r2
 800d39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d39c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d104      	bne.n	800d3ac <find_volume+0x554>
 800d3a2:	230d      	movs	r3, #13
 800d3a4:	e0e5      	b.n	800d572 <find_volume+0x71a>
 800d3a6:	bf00      	nop
 800d3a8:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d3b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b4:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d802      	bhi.n	800d3c2 <find_volume+0x56a>
 800d3bc:	2302      	movs	r3, #2
 800d3be:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d3c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3c4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d3c8:	4293      	cmp	r3, r2
 800d3ca:	d802      	bhi.n	800d3d2 <find_volume+0x57a>
 800d3cc:	2301      	movs	r3, #1
 800d3ce:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d3d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3d4:	1c9a      	adds	r2, r3, #2
 800d3d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3d8:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->volbase = bsect;							/* Volume start sector */
 800d3da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3dc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d3de:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d3e0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800d3e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d3e6:	441a      	add	r2, r3
 800d3e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3ea:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->database = bsect + sysect;					/* Data start sector */
 800d3ec:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800d3ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d3f0:	441a      	add	r2, r3
 800d3f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d3f4:	639a      	str	r2, [r3, #56]	@ 0x38
		if (fmt == FS_FAT32) {
 800d3f6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d3fa:	2b03      	cmp	r3, #3
 800d3fc:	d11e      	bne.n	800d43c <find_volume+0x5e4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d3fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d400:	3340      	adds	r3, #64	@ 0x40
 800d402:	332a      	adds	r3, #42	@ 0x2a
 800d404:	4618      	mov	r0, r3
 800d406:	f7fc fc1f 	bl	8009c48 <ld_word>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d001      	beq.n	800d414 <find_volume+0x5bc>
 800d410:	230d      	movs	r3, #13
 800d412:	e0ae      	b.n	800d572 <find_volume+0x71a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d414:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d416:	891b      	ldrh	r3, [r3, #8]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d001      	beq.n	800d420 <find_volume+0x5c8>
 800d41c:	230d      	movs	r3, #13
 800d41e:	e0a8      	b.n	800d572 <find_volume+0x71a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d420:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d422:	3340      	adds	r3, #64	@ 0x40
 800d424:	332c      	adds	r3, #44	@ 0x2c
 800d426:	4618      	mov	r0, r3
 800d428:	f7fc fc26 	bl	8009c78 <ld_dword>
 800d42c:	4602      	mov	r2, r0
 800d42e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d430:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d434:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d436:	009b      	lsls	r3, r3, #2
 800d438:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800d43a:	e01f      	b.n	800d47c <find_volume+0x624>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d43c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d43e:	891b      	ldrh	r3, [r3, #8]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d101      	bne.n	800d448 <find_volume+0x5f0>
 800d444:	230d      	movs	r3, #13
 800d446:	e094      	b.n	800d572 <find_volume+0x71a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d448:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d44a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d44c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d44e:	441a      	add	r2, r3
 800d450:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d452:	635a      	str	r2, [r3, #52]	@ 0x34
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d454:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d103      	bne.n	800d464 <find_volume+0x60c>
 800d45c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d45e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d460:	005b      	lsls	r3, r3, #1
 800d462:	e00a      	b.n	800d47a <find_volume+0x622>
 800d464:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d468:	4613      	mov	r3, r2
 800d46a:	005b      	lsls	r3, r3, #1
 800d46c:	4413      	add	r3, r2
 800d46e:	085a      	lsrs	r2, r3, #1
 800d470:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d474:	f003 0301 	and.w	r3, r3, #1
 800d478:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d47a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d47c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d47e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d480:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d482:	899b      	ldrh	r3, [r3, #12]
 800d484:	4619      	mov	r1, r3
 800d486:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d488:	440b      	add	r3, r1
 800d48a:	3b01      	subs	r3, #1
 800d48c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d48e:	8989      	ldrh	r1, [r1, #12]
 800d490:	fbb3 f3f1 	udiv	r3, r3, r1
 800d494:	429a      	cmp	r2, r3
 800d496:	d201      	bcs.n	800d49c <find_volume+0x644>
 800d498:	230d      	movs	r3, #13
 800d49a:	e06a      	b.n	800d572 <find_volume+0x71a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d49c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d49e:	f04f 32ff 	mov.w	r2, #4294967295
 800d4a2:	621a      	str	r2, [r3, #32]
 800d4a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4a6:	6a1a      	ldr	r2, [r3, #32]
 800d4a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4aa:	61da      	str	r2, [r3, #28]
		fs->fsi_flag = 0x80;
 800d4ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4ae:	2280      	movs	r2, #128	@ 0x80
 800d4b0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d4b2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800d4b6:	2b03      	cmp	r3, #3
 800d4b8:	d149      	bne.n	800d54e <find_volume+0x6f6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d4ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4bc:	3340      	adds	r3, #64	@ 0x40
 800d4be:	3330      	adds	r3, #48	@ 0x30
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7fc fbc1 	bl	8009c48 <ld_word>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	2b01      	cmp	r3, #1
 800d4ca:	d140      	bne.n	800d54e <find_volume+0x6f6>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d4cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d4d4:	f7fc fffc 	bl	800a4d0 <move_window>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d137      	bne.n	800d54e <find_volume+0x6f6>
		{
			fs->fsi_flag = 0;
 800d4de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d4e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e6:	3340      	adds	r3, #64	@ 0x40
 800d4e8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	f7fc fbab 	bl	8009c48 <ld_word>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d127      	bne.n	800d54e <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d4fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d500:	3340      	adds	r3, #64	@ 0x40
 800d502:	4618      	mov	r0, r3
 800d504:	f7fc fbb8 	bl	8009c78 <ld_dword>
 800d508:	4603      	mov	r3, r0
 800d50a:	4a1c      	ldr	r2, [pc, #112]	@ (800d57c <find_volume+0x724>)
 800d50c:	4293      	cmp	r3, r2
 800d50e:	d11e      	bne.n	800d54e <find_volume+0x6f6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d510:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d512:	3340      	adds	r3, #64	@ 0x40
 800d514:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d518:	4618      	mov	r0, r3
 800d51a:	f7fc fbad 	bl	8009c78 <ld_dword>
 800d51e:	4603      	mov	r3, r0
 800d520:	4a17      	ldr	r2, [pc, #92]	@ (800d580 <find_volume+0x728>)
 800d522:	4293      	cmp	r3, r2
 800d524:	d113      	bne.n	800d54e <find_volume+0x6f6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d528:	3340      	adds	r3, #64	@ 0x40
 800d52a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d52e:	4618      	mov	r0, r3
 800d530:	f7fc fba2 	bl	8009c78 <ld_dword>
 800d534:	4602      	mov	r2, r0
 800d536:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d538:	621a      	str	r2, [r3, #32]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d53a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d53c:	3340      	adds	r3, #64	@ 0x40
 800d53e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d542:	4618      	mov	r0, r3
 800d544:	f7fc fb98 	bl	8009c78 <ld_dword>
 800d548:	4602      	mov	r2, r0
 800d54a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d54c:	61da      	str	r2, [r3, #28]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d54e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d550:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800d554:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d556:	4b0b      	ldr	r3, [pc, #44]	@ (800d584 <find_volume+0x72c>)
 800d558:	881b      	ldrh	r3, [r3, #0]
 800d55a:	3301      	adds	r3, #1
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	4b09      	ldr	r3, [pc, #36]	@ (800d584 <find_volume+0x72c>)
 800d560:	801a      	strh	r2, [r3, #0]
 800d562:	4b08      	ldr	r3, [pc, #32]	@ (800d584 <find_volume+0x72c>)
 800d564:	881a      	ldrh	r2, [r3, #0]
 800d566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d568:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d56a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800d56c:	f7fc ff48 	bl	800a400 <clear_lock>
#endif
	return FR_OK;
 800d570:	2300      	movs	r3, #0
}
 800d572:	4618      	mov	r0, r3
 800d574:	3770      	adds	r7, #112	@ 0x70
 800d576:	46bd      	mov	sp, r7
 800d578:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d57c:	41615252 	.word	0x41615252
 800d580:	61417272 	.word	0x61417272
 800d584:	200022f8 	.word	0x200022f8

0800d588 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	b084      	sub	sp, #16
 800d58c:	af00      	add	r7, sp, #0
 800d58e:	6078      	str	r0, [r7, #4]
 800d590:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d592:	2309      	movs	r3, #9
 800d594:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d02e      	beq.n	800d5fa <validate+0x72>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d02a      	beq.n	800d5fa <validate+0x72>
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d025      	beq.n	800d5fa <validate+0x72>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	889a      	ldrh	r2, [r3, #4]
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	88db      	ldrh	r3, [r3, #6]
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d11e      	bne.n	800d5fa <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f7fc fda4 	bl	800a10e <lock_fs>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d014      	beq.n	800d5f6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	785b      	ldrb	r3, [r3, #1]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fc fa98 	bl	8009b08 <disk_status>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	f003 0301 	and.w	r3, r3, #1
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d102      	bne.n	800d5e8 <validate+0x60>
				res = FR_OK;
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	73fb      	strb	r3, [r7, #15]
 800d5e6:	e008      	b.n	800d5fa <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	4618      	mov	r0, r3
 800d5f0:	f7fc fda3 	bl	800a13a <unlock_fs>
 800d5f4:	e001      	b.n	800d5fa <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800d5f6:	230f      	movs	r3, #15
 800d5f8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d5fa:	7bfb      	ldrb	r3, [r7, #15]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d102      	bne.n	800d606 <validate+0x7e>
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	e000      	b.n	800d608 <validate+0x80>
 800d606:	2300      	movs	r3, #0
 800d608:	683a      	ldr	r2, [r7, #0]
 800d60a:	6013      	str	r3, [r2, #0]
	return res;
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
	...

0800d618 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b088      	sub	sp, #32
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	60f8      	str	r0, [r7, #12]
 800d620:	60b9      	str	r1, [r7, #8]
 800d622:	4613      	mov	r3, r2
 800d624:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d62a:	f107 0310 	add.w	r3, r7, #16
 800d62e:	4618      	mov	r0, r3
 800d630:	f7ff fb6a 	bl	800cd08 <get_ldnumber>
 800d634:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d636:	69fb      	ldr	r3, [r7, #28]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	da01      	bge.n	800d640 <f_mount+0x28>
 800d63c:	230b      	movs	r3, #11
 800d63e:	e048      	b.n	800d6d2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d640:	4a26      	ldr	r2, [pc, #152]	@ (800d6dc <f_mount+0xc4>)
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d648:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d64a:	69bb      	ldr	r3, [r7, #24]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d00f      	beq.n	800d670 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d650:	69b8      	ldr	r0, [r7, #24]
 800d652:	f7fc fed5 	bl	800a400 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800d656:	69bb      	ldr	r3, [r7, #24]
 800d658:	699b      	ldr	r3, [r3, #24]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f001 fe63 	bl	800f326 <ff_del_syncobj>
 800d660:	4603      	mov	r3, r0
 800d662:	2b00      	cmp	r3, #0
 800d664:	d101      	bne.n	800d66a <f_mount+0x52>
 800d666:	2302      	movs	r3, #2
 800d668:	e033      	b.n	800d6d2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d66a:	69bb      	ldr	r3, [r7, #24]
 800d66c:	2200      	movs	r2, #0
 800d66e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00f      	beq.n	800d696 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	2200      	movs	r2, #0
 800d67a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800d67c:	69fb      	ldr	r3, [r7, #28]
 800d67e:	b2da      	uxtb	r2, r3
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	3318      	adds	r3, #24
 800d684:	4619      	mov	r1, r3
 800d686:	4610      	mov	r0, r2
 800d688:	f001 fe32 	bl	800f2f0 <ff_cre_syncobj>
 800d68c:	4603      	mov	r3, r0
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d101      	bne.n	800d696 <f_mount+0x7e>
 800d692:	2302      	movs	r3, #2
 800d694:	e01d      	b.n	800d6d2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d696:	68fa      	ldr	r2, [r7, #12]
 800d698:	4910      	ldr	r1, [pc, #64]	@ (800d6dc <f_mount+0xc4>)
 800d69a:	69fb      	ldr	r3, [r7, #28]
 800d69c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d002      	beq.n	800d6ac <f_mount+0x94>
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d001      	beq.n	800d6b0 <f_mount+0x98>
 800d6ac:	2300      	movs	r3, #0
 800d6ae:	e010      	b.n	800d6d2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d6b0:	f107 010c 	add.w	r1, r7, #12
 800d6b4:	f107 0308 	add.w	r3, r7, #8
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7ff fbcc 	bl	800ce58 <find_volume>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	7dfa      	ldrb	r2, [r7, #23]
 800d6c8:	4611      	mov	r1, r2
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f7fc fd35 	bl	800a13a <unlock_fs>
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6d2:	4618      	mov	r0, r3
 800d6d4:	3720      	adds	r7, #32
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}
 800d6da:	bf00      	nop
 800d6dc:	200022f4 	.word	0x200022f4

0800d6e0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d6e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d6e4:	f5ad 6da0 	sub.w	sp, sp, #1280	@ 0x500
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d6ee:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d6f2:	6018      	str	r0, [r3, #0]
 800d6f4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d6f8:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800d6fc:	6019      	str	r1, [r3, #0]
 800d6fe:	4611      	mov	r1, r2
 800d700:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d704:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 800d708:	460b      	mov	r3, r1
 800d70a:	7013      	strb	r3, [r2, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d70c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d710:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d101      	bne.n	800d71e <f_open+0x3e>
 800d71a:	2309      	movs	r3, #9
 800d71c:	e3f3      	b.n	800df06 <f_open+0x826>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d71e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d722:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 800d726:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d72a:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d72e:	781b      	ldrb	r3, [r3, #0]
 800d730:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d734:	7013      	strb	r3, [r2, #0]
	res = find_volume(&path, &fs, mode);
 800d736:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d73a:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	f207 418c 	addw	r1, r7, #1164	@ 0x48c
 800d744:	f107 0020 	add.w	r0, r7, #32
 800d748:	461a      	mov	r2, r3
 800d74a:	f7ff fb85 	bl	800ce58 <find_volume>
 800d74e:	4603      	mov	r3, r0
 800d750:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
	if (res == FR_OK) {
 800d754:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f040 83bf 	bne.w	800dedc <f_open+0x7fc>
		dj.obj.fs = fs;
 800d75e:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d762:	f8c7 3490 	str.w	r3, [r7, #1168]	@ 0x490
		INIT_NAMBUF(fs);
 800d766:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d76a:	f507 7223 	add.w	r2, r7, #652	@ 0x28c
 800d76e:	611a      	str	r2, [r3, #16]
 800d770:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d774:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800d778:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d77a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d77e:	f5a3 639c 	sub.w	r3, r3, #1248	@ 0x4e0
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f507 6292 	add.w	r2, r7, #1168	@ 0x490
 800d788:	4619      	mov	r1, r3
 800d78a:	4610      	mov	r0, r2
 800d78c:	f7ff fa0e 	bl	800cbac <follow_path>
 800d790:	4603      	mov	r3, r0
 800d792:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d796:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d11c      	bne.n	800d7d8 <f_open+0xf8>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d79e:	f897 34db 	ldrb.w	r3, [r7, #1243]	@ 0x4db
 800d7a2:	b25b      	sxtb	r3, r3
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	da03      	bge.n	800d7b0 <f_open+0xd0>
				res = FR_INVALID_NAME;
 800d7a8:	2306      	movs	r3, #6
 800d7aa:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 800d7ae:	e013      	b.n	800d7d8 <f_open+0xf8>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d7b0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d7b4:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b01      	cmp	r3, #1
 800d7bc:	bf8c      	ite	hi
 800d7be:	2301      	movhi	r3, #1
 800d7c0:	2300      	movls	r3, #0
 800d7c2:	b2db      	uxtb	r3, r3
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800d7ca:	4611      	mov	r1, r2
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fc fccf 	bl	800a170 <chk_lock>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d7d8:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d7dc:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d7e0:	781b      	ldrb	r3, [r3, #0]
 800d7e2:	f003 031c 	and.w	r3, r3, #28
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f000 8169 	beq.w	800dabe <f_open+0x3de>
			if (res != FR_OK) {					/* No file, create new */
 800d7ec:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d01f      	beq.n	800d834 <f_open+0x154>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d7f4:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800d7f8:	2b04      	cmp	r3, #4
 800d7fa:	d10e      	bne.n	800d81a <f_open+0x13a>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d7fc:	f7fc fd14 	bl	800a228 <enq_lock>
 800d800:	4603      	mov	r3, r0
 800d802:	2b00      	cmp	r3, #0
 800d804:	d006      	beq.n	800d814 <f_open+0x134>
 800d806:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800d80a:	4618      	mov	r0, r3
 800d80c:	f7fe fd7e 	bl	800c30c <dir_register>
 800d810:	4603      	mov	r3, r0
 800d812:	e000      	b.n	800d816 <f_open+0x136>
 800d814:	2312      	movs	r3, #18
 800d816:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d81a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d81e:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 800d822:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d826:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	f043 0308 	orr.w	r3, r3, #8
 800d830:	7013      	strb	r3, [r2, #0]
 800d832:	e015      	b.n	800d860 <f_open+0x180>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d834:	f897 3496 	ldrb.w	r3, [r7, #1174]	@ 0x496
 800d838:	f003 0311 	and.w	r3, r3, #17
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d003      	beq.n	800d848 <f_open+0x168>
					res = FR_DENIED;
 800d840:	2307      	movs	r3, #7
 800d842:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 800d846:	e00b      	b.n	800d860 <f_open+0x180>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d848:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d84c:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d850:	781b      	ldrb	r3, [r3, #0]
 800d852:	f003 0304 	and.w	r3, r3, #4
 800d856:	2b00      	cmp	r3, #0
 800d858:	d002      	beq.n	800d860 <f_open+0x180>
 800d85a:	2308      	movs	r3, #8
 800d85c:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d860:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800d864:	2b00      	cmp	r3, #0
 800d866:	f040 814a 	bne.w	800dafe <f_open+0x41e>
 800d86a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d86e:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	f003 0308 	and.w	r3, r3, #8
 800d878:	2b00      	cmp	r3, #0
 800d87a:	f000 8140 	beq.w	800dafe <f_open+0x41e>
				dw = GET_FATTIME();
 800d87e:	f7f8 fca9 	bl	80061d4 <get_fattime>
 800d882:	f8c7 04ec 	str.w	r0, [r7, #1260]	@ 0x4ec
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d886:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d88a:	781b      	ldrb	r3, [r3, #0]
 800d88c:	2b04      	cmp	r3, #4
 800d88e:	f040 80ba 	bne.w	800da06 <f_open+0x326>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d892:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800d896:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d89a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d8a2:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d8a6:	695b      	ldr	r3, [r3, #20]
 800d8a8:	3334      	adds	r3, #52	@ 0x34
 800d8aa:	4618      	mov	r0, r3
 800d8ac:	f7fc f9e4 	bl	8009c78 <ld_dword>
 800d8b0:	4602      	mov	r2, r0
 800d8b2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d8b6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d8be:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d8c2:	695b      	ldr	r3, [r3, #20]
 800d8c4:	3338      	adds	r3, #56	@ 0x38
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fc f9f9 	bl	8009cbe <ld_qword>
 800d8cc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d8d0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d8da:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d8de:	695b      	ldr	r3, [r3, #20]
 800d8e0:	3321      	adds	r3, #33	@ 0x21
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	f003 0302 	and.w	r3, r3, #2
 800d8e8:	b2d9      	uxtb	r1, r3
 800d8ea:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d8ee:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d8f2:	681a      	ldr	r2, [r3, #0]
 800d8f4:	460b      	mov	r3, r1
 800d8f6:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 800d8f8:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d8fc:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2200      	movs	r2, #0
 800d904:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d906:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d90a:	695b      	ldr	r3, [r3, #20]
 800d90c:	3308      	adds	r3, #8
 800d90e:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 800d912:	4618      	mov	r0, r3
 800d914:	f7fc fac9 	bl	8009eaa <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d918:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d91c:	695b      	ldr	r3, [r3, #20]
 800d91e:	f103 0214 	add.w	r2, r3, #20
 800d922:	2300      	movs	r3, #0
 800d924:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d926:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d92a:	695b      	ldr	r3, [r3, #20]
 800d92c:	330c      	adds	r3, #12
 800d92e:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 800d932:	4618      	mov	r0, r3
 800d934:	f7fc fab9 	bl	8009eaa <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d938:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	f103 0215 	add.w	r2, r3, #21
 800d942:	2300      	movs	r3, #0
 800d944:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d946:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d94a:	695b      	ldr	r3, [r3, #20]
 800d94c:	1d1a      	adds	r2, r3, #4
 800d94e:	2320      	movs	r3, #32
 800d950:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d952:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d956:	695b      	ldr	r3, [r3, #20]
 800d958:	3334      	adds	r3, #52	@ 0x34
 800d95a:	2100      	movs	r1, #0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7fc faa4 	bl	8009eaa <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d962:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800d96c:	f04f 0200 	mov.w	r2, #0
 800d970:	f04f 0300 	mov.w	r3, #0
 800d974:	4608      	mov	r0, r1
 800d976:	f7fc fac4 	bl	8009f02 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d97a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800d984:	f04f 0200 	mov.w	r2, #0
 800d988:	f04f 0300 	mov.w	r3, #0
 800d98c:	4608      	mov	r0, r1
 800d98e:	f7fc fab8 	bl	8009f02 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d992:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800d996:	695b      	ldr	r3, [r3, #20]
 800d998:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 800d99c:	2301      	movs	r3, #1
 800d99e:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800d9a0:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f7fe f9fd 	bl	800bda4 <store_xdir>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d9b0:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	f040 80a2 	bne.w	800dafe <f_open+0x41e>
 800d9ba:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d9be:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	f000 8099 	beq.w	800dafe <f_open+0x41e>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d9cc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d9d0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d9da:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	689b      	ldr	r3, [r3, #8]
 800d9e2:	2200      	movs	r2, #0
 800d9e4:	4619      	mov	r1, r3
 800d9e6:	f7fd f9ff 	bl	800ade8 <remove_chain>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d9f0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800d9f4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	689b      	ldr	r3, [r3, #8]
 800d9fc:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800da00:	3b01      	subs	r3, #1
 800da02:	61d3      	str	r3, [r2, #28]
 800da04:	e07b      	b.n	800dafe <f_open+0x41e>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800da06:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800da0a:	330e      	adds	r3, #14
 800da0c:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 800da10:	4618      	mov	r0, r3
 800da12:	f7fc fa4a 	bl	8009eaa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800da16:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800da1a:	3316      	adds	r3, #22
 800da1c:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 800da20:	4618      	mov	r0, r3
 800da22:	f7fc fa42 	bl	8009eaa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800da26:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800da2a:	f103 020b 	add.w	r2, r3, #11
 800da2e:	2320      	movs	r3, #32
 800da30:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800da32:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800da36:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800da3a:	4619      	mov	r1, r3
 800da3c:	4610      	mov	r0, r2
 800da3e:	f7fd fdaa 	bl	800b596 <ld_clust>
 800da42:	f8c7 04e8 	str.w	r0, [r7, #1256]	@ 0x4e8
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800da46:	f8d7 048c 	ldr.w	r0, [r7, #1164]	@ 0x48c
 800da4a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800da4e:	2200      	movs	r2, #0
 800da50:	4619      	mov	r1, r3
 800da52:	f7fd fdbf 	bl	800b5d4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800da56:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800da5a:	331c      	adds	r3, #28
 800da5c:	2100      	movs	r1, #0
 800da5e:	4618      	mov	r0, r3
 800da60:	f7fc fa23 	bl	8009eaa <st_dword>
					fs->wflag = 1;
 800da64:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800da68:	2301      	movs	r3, #1
 800da6a:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800da6c:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 800da70:	2b00      	cmp	r3, #0
 800da72:	d044      	beq.n	800dafe <f_open+0x41e>
						dw = fs->winsect;
 800da74:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800da78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da7a:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
						res = remove_chain(&dj.obj, cl, 0);
 800da7e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800da82:	2200      	movs	r2, #0
 800da84:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	@ 0x4e8
 800da88:	4618      	mov	r0, r3
 800da8a:	f7fd f9ad 	bl	800ade8 <remove_chain>
 800da8e:	4603      	mov	r3, r0
 800da90:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
						if (res == FR_OK) {
 800da94:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d130      	bne.n	800dafe <f_open+0x41e>
							res = move_window(fs, dw);
 800da9c:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800daa0:	f8d7 14ec 	ldr.w	r1, [r7, #1260]	@ 0x4ec
 800daa4:	4618      	mov	r0, r3
 800daa6:	f7fc fd13 	bl	800a4d0 <move_window>
 800daaa:	4603      	mov	r3, r0
 800daac:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800dab0:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800dab4:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	@ 0x4e8
 800dab8:	3b01      	subs	r3, #1
 800daba:	61d3      	str	r3, [r2, #28]
 800dabc:	e01f      	b.n	800dafe <f_open+0x41e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800dabe:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d11b      	bne.n	800dafe <f_open+0x41e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800dac6:	f897 3496 	ldrb.w	r3, [r7, #1174]	@ 0x496
 800daca:	f003 0310 	and.w	r3, r3, #16
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d003      	beq.n	800dada <f_open+0x3fa>
					res = FR_NO_FILE;
 800dad2:	2304      	movs	r3, #4
 800dad4:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 800dad8:	e011      	b.n	800dafe <f_open+0x41e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800dada:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dade:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800dae2:	781b      	ldrb	r3, [r3, #0]
 800dae4:	f003 0302 	and.w	r3, r3, #2
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d008      	beq.n	800dafe <f_open+0x41e>
 800daec:	f897 3496 	ldrb.w	r3, [r7, #1174]	@ 0x496
 800daf0:	f003 0301 	and.w	r3, r3, #1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d002      	beq.n	800dafe <f_open+0x41e>
						res = FR_DENIED;
 800daf8:	2307      	movs	r3, #7
 800dafa:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
					}
				}
			}
		}
		if (res == FR_OK) {
 800dafe:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800db02:	2b00      	cmp	r3, #0
 800db04:	d148      	bne.n	800db98 <f_open+0x4b8>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800db06:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db0a:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	f003 0308 	and.w	r3, r3, #8
 800db14:	2b00      	cmp	r3, #0
 800db16:	d00b      	beq.n	800db30 <f_open+0x450>
				mode |= FA_MODIFIED;
 800db18:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db1c:	f2a3 42e1 	subw	r2, r3, #1249	@ 0x4e1
 800db20:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db24:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db2e:	7013      	strb	r3, [r2, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800db30:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800db34:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800db36:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db3a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 800db42:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 800db46:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db4a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800db52:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db56:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800db5a:	781b      	ldrb	r3, [r3, #0]
 800db5c:	2b01      	cmp	r3, #1
 800db5e:	bf8c      	ite	hi
 800db60:	2301      	movhi	r3, #1
 800db62:	2300      	movls	r3, #0
 800db64:	b2db      	uxtb	r3, r3
 800db66:	461a      	mov	r2, r3
 800db68:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800db6c:	4611      	mov	r1, r2
 800db6e:	4618      	mov	r0, r3
 800db70:	f7fc fb7c 	bl	800a26c <inc_lock>
 800db74:	4602      	mov	r2, r0
 800db76:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db7a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800db82:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800db86:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d102      	bne.n	800db98 <f_open+0x4b8>
 800db92:	2302      	movs	r3, #2
 800db94:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
				}
			}
		}
#endif

		if (res == FR_OK) {
 800db98:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	f040 819d 	bne.w	800dedc <f_open+0x7fc>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800dba2:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dba6:	781b      	ldrb	r3, [r3, #0]
 800dba8:	2b04      	cmp	r3, #4
 800dbaa:	d14c      	bne.n	800dc46 <f_open+0x566>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800dbac:	f8d7 2498 	ldr.w	r2, [r7, #1176]	@ 0x498
 800dbb0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dbb4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800dbbc:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 800dbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800dbca:	f897 2497 	ldrb.w	r2, [r7, #1175]	@ 0x497
 800dbce:	431a      	orrs	r2, r3
 800dbd0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dbd4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800dbdc:	f8d7 24dc 	ldr.w	r2, [r7, #1244]	@ 0x4dc
 800dbe0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dbe4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800dbec:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dbf0:	695b      	ldr	r3, [r3, #20]
 800dbf2:	3334      	adds	r3, #52	@ 0x34
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f7fc f83f 	bl	8009c78 <ld_dword>
 800dbfa:	4602      	mov	r2, r0
 800dbfc:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dc00:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800dc08:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dc0c:	695b      	ldr	r3, [r3, #20]
 800dc0e:	3338      	adds	r3, #56	@ 0x38
 800dc10:	4618      	mov	r0, r3
 800dc12:	f7fc f854 	bl	8009cbe <ld_qword>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	f507 61a0 	add.w	r1, r7, #1280	@ 0x500
 800dc1e:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800dc22:	6809      	ldr	r1, [r1, #0]
 800dc24:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dc28:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dc2c:	695b      	ldr	r3, [r3, #20]
 800dc2e:	3321      	adds	r3, #33	@ 0x21
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	f003 0302 	and.w	r3, r3, #2
 800dc36:	b2da      	uxtb	r2, r3
 800dc38:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dc3c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	71da      	strb	r2, [r3, #7]
 800dc44:	e021      	b.n	800dc8a <f_open+0x5aa>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800dc46:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800dc4a:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7fd fca0 	bl	800b596 <ld_clust>
 800dc56:	4602      	mov	r2, r0
 800dc58:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dc5c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800dc64:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800dc68:	331c      	adds	r3, #28
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fc f804 	bl	8009c78 <ld_dword>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2200      	movs	r2, #0
 800dc74:	613b      	str	r3, [r7, #16]
 800dc76:	617a      	str	r2, [r7, #20]
 800dc78:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dc7c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dc86:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800dc8a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dc8e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	2200      	movs	r2, #0
 800dc96:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800dc98:	f8d7 248c 	ldr.w	r2, [r7, #1164]	@ 0x48c
 800dc9c:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dca0:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800dca8:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dcac:	88da      	ldrh	r2, [r3, #6]
 800dcae:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dcb2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800dcba:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dcbe:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 800dcc8:	f2a2 42e1 	subw	r2, r2, #1249	@ 0x4e1
 800dccc:	7812      	ldrb	r2, [r2, #0]
 800dcce:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 800dcd2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dcd6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800dce2:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dce6:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2200      	movs	r2, #0
 800dcee:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800dcf0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dcf4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dcf8:	6819      	ldr	r1, [r3, #0]
 800dcfa:	f04f 0200 	mov.w	r2, #0
 800dcfe:	f04f 0300 	mov.w	r3, #0
 800dd02:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800dd06:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dd0a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	3354      	adds	r3, #84	@ 0x54
 800dd12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800dd16:	2100      	movs	r1, #0
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fc f99b 	bl	800a054 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800dd1e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dd22:	f2a3 43e1 	subw	r3, r3, #1249	@ 0x4e1
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	f003 0320 	and.w	r3, r3, #32
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	f000 80d5 	beq.w	800dedc <f_open+0x7fc>
 800dd32:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dd36:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	f000 80cb 	beq.w	800dedc <f_open+0x7fc>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800dd46:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dd4a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd54:	f507 61a0 	add.w	r1, r7, #1280	@ 0x500
 800dd58:	f2a1 41dc 	subw	r1, r1, #1244	@ 0x4dc
 800dd5c:	6809      	ldr	r1, [r1, #0]
 800dd5e:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800dd62:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dd66:	895b      	ldrh	r3, [r3, #10]
 800dd68:	461a      	mov	r2, r3
 800dd6a:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800dd6e:	899b      	ldrh	r3, [r3, #12]
 800dd70:	fb02 f303 	mul.w	r3, r2, r3
 800dd74:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800dd78:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dd7c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	f8c7 34f8 	str.w	r3, [r7, #1272]	@ 0x4f8
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800dd88:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dd8c:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800dd96:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800dd9a:	e9c1 2300 	strd	r2, r3, [r1]
 800dd9e:	e02b      	b.n	800ddf8 <f_open+0x718>
					clst = get_fat(&fp->obj, clst);
 800dda0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dda4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dda8:	681b      	ldr	r3, [r3, #0]
 800ddaa:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	@ 0x4f8
 800ddae:	4618      	mov	r0, r3
 800ddb0:	f7fc fc4c 	bl	800a64c <get_fat>
 800ddb4:	f8c7 04f8 	str.w	r0, [r7, #1272]	@ 0x4f8
					if (clst <= 1) res = FR_INT_ERR;
 800ddb8:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d802      	bhi.n	800ddc6 <f_open+0x6e6>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ddc6:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	@ 0x4f8
 800ddca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ddce:	d102      	bne.n	800ddd6 <f_open+0x6f6>
 800ddd0:	2301      	movs	r3, #1
 800ddd2:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ddd6:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 800ddda:	2200      	movs	r2, #0
 800dddc:	4698      	mov	r8, r3
 800ddde:	4691      	mov	r9, r2
 800dde0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800dde4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dde8:	ebb2 0a08 	subs.w	sl, r2, r8
 800ddec:	eb63 0b09 	sbc.w	fp, r3, r9
 800ddf0:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800ddf4:	e9c3 ab00 	strd	sl, fp, [r3]
 800ddf8:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d10c      	bne.n	800de1a <f_open+0x73a>
 800de00:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 800de04:	2200      	movs	r2, #0
 800de06:	461c      	mov	r4, r3
 800de08:	4615      	mov	r5, r2
 800de0a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800de0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de12:	4294      	cmp	r4, r2
 800de14:	eb75 0303 	sbcs.w	r3, r5, r3
 800de18:	d3c2      	bcc.n	800dda0 <f_open+0x6c0>
				}
				fp->clust = clst;
 800de1a:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800de1e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	@ 0x4f8
 800de28:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800de2a:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d154      	bne.n	800dedc <f_open+0x7fc>
 800de32:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800de36:	899b      	ldrh	r3, [r3, #12]
 800de38:	b29b      	uxth	r3, r3
 800de3a:	2200      	movs	r2, #0
 800de3c:	60bb      	str	r3, [r7, #8]
 800de3e:	60fa      	str	r2, [r7, #12]
 800de40:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 800de44:	e9d3 0100 	ldrd	r0, r1, [r3]
 800de48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800de4c:	f7f2 fd3e 	bl	80008cc <__aeabi_uldivmod>
 800de50:	4313      	orrs	r3, r2
 800de52:	d043      	beq.n	800dedc <f_open+0x7fc>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800de54:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800de58:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	@ 0x4f8
 800de5c:	4618      	mov	r0, r3
 800de5e:	f7fc fbd5 	bl	800a60c <clust2sect>
 800de62:	f8c7 04e0 	str.w	r0, [r7, #1248]	@ 0x4e0
 800de66:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d103      	bne.n	800de76 <f_open+0x796>
						res = FR_INT_ERR;
 800de6e:	2302      	movs	r3, #2
 800de70:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
 800de74:	e032      	b.n	800dedc <f_open+0x7fc>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800de76:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800de7a:	899b      	ldrh	r3, [r3, #12]
 800de7c:	b29b      	uxth	r3, r3
 800de7e:	2200      	movs	r2, #0
 800de80:	603b      	str	r3, [r7, #0]
 800de82:	607a      	str	r2, [r7, #4]
 800de84:	e9d7 2300 	ldrd	r2, r3, [r7]
 800de88:	f507 619e 	add.w	r1, r7, #1264	@ 0x4f0
 800de8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800de90:	f7f2 fd1c 	bl	80008cc <__aeabi_uldivmod>
 800de94:	4602      	mov	r2, r0
 800de96:	460b      	mov	r3, r1
 800de98:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	@ 0x4e0
 800de9c:	441a      	add	r2, r3
 800de9e:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dea2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800deaa:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800deae:	7858      	ldrb	r0, [r3, #1]
 800deb0:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800deb4:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800debe:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dec2:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800dec6:	681b      	ldr	r3, [r3, #0]
 800dec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800deca:	2301      	movs	r3, #1
 800decc:	f7fb fe5e 	bl	8009b8c <disk_read>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d002      	beq.n	800dedc <f_open+0x7fc>
 800ded6:	2301      	movs	r3, #1
 800ded8:	f887 34ff 	strb.w	r3, [r7, #1279]	@ 0x4ff
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800dedc:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d006      	beq.n	800def2 <f_open+0x812>
 800dee4:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 800dee8:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	2200      	movs	r2, #0
 800def0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800def2:	f8d7 348c 	ldr.w	r3, [r7, #1164]	@ 0x48c
 800def6:	f897 24ff 	ldrb.w	r2, [r7, #1279]	@ 0x4ff
 800defa:	4611      	mov	r1, r2
 800defc:	4618      	mov	r0, r3
 800defe:	f7fc f91c 	bl	800a13a <unlock_fs>
 800df02:	f897 34ff 	ldrb.w	r3, [r7, #1279]	@ 0x4ff
}
 800df06:	4618      	mov	r0, r3
 800df08:	f507 67a0 	add.w	r7, r7, #1280	@ 0x500
 800df0c:	46bd      	mov	sp, r7
 800df0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800df12 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800df12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df16:	b091      	sub	sp, #68	@ 0x44
 800df18:	af00      	add	r7, sp, #0
 800df1a:	61f8      	str	r0, [r7, #28]
 800df1c:	61b9      	str	r1, [r7, #24]
 800df1e:	617a      	str	r2, [r7, #20]
 800df20:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800df22:	69bb      	ldr	r3, [r7, #24]
 800df24:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	2200      	movs	r2, #0
 800df2a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	f107 0220 	add.w	r2, r7, #32
 800df32:	4611      	mov	r1, r2
 800df34:	4618      	mov	r0, r3
 800df36:	f7ff fb27 	bl	800d588 <validate>
 800df3a:	4603      	mov	r3, r0
 800df3c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800df40:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800df44:	2b00      	cmp	r3, #0
 800df46:	d108      	bne.n	800df5a <f_write+0x48>
 800df48:	69fb      	ldr	r3, [r7, #28]
 800df4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800df4e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800df52:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800df56:	2b00      	cmp	r3, #0
 800df58:	d009      	beq.n	800df6e <f_write+0x5c>
 800df5a:	6a3b      	ldr	r3, [r7, #32]
 800df5c:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800df60:	4611      	mov	r1, r2
 800df62:	4618      	mov	r0, r3
 800df64:	f7fc f8e9 	bl	800a13a <unlock_fs>
 800df68:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800df6c:	e1d2      	b.n	800e314 <f_write+0x402>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800df6e:	69fb      	ldr	r3, [r7, #28]
 800df70:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800df74:	f003 0302 	and.w	r3, r3, #2
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d106      	bne.n	800df8a <f_write+0x78>
 800df7c:	6a3b      	ldr	r3, [r7, #32]
 800df7e:	2107      	movs	r1, #7
 800df80:	4618      	mov	r0, r3
 800df82:	f7fc f8da 	bl	800a13a <unlock_fs>
 800df86:	2307      	movs	r3, #7
 800df88:	e1c4      	b.n	800e314 <f_write+0x402>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800df8a:	6a3b      	ldr	r3, [r7, #32]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	2b04      	cmp	r3, #4
 800df90:	f000 81ab 	beq.w	800e2ea <f_write+0x3d8>
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	18d1      	adds	r1, r2, r3
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	4299      	cmp	r1, r3
 800dfa8:	f080 819f 	bcs.w	800e2ea <f_write+0x3d8>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800dfb2:	4613      	mov	r3, r2
 800dfb4:	43db      	mvns	r3, r3
 800dfb6:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800dfb8:	e197      	b.n	800e2ea <f_write+0x3d8>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800dfba:	69fb      	ldr	r3, [r7, #28]
 800dfbc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dfc0:	6a3b      	ldr	r3, [r7, #32]
 800dfc2:	899b      	ldrh	r3, [r3, #12]
 800dfc4:	b29b      	uxth	r3, r3
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	461d      	mov	r5, r3
 800dfca:	4616      	mov	r6, r2
 800dfcc:	462a      	mov	r2, r5
 800dfce:	4633      	mov	r3, r6
 800dfd0:	f7f2 fc7c 	bl	80008cc <__aeabi_uldivmod>
 800dfd4:	4313      	orrs	r3, r2
 800dfd6:	f040 8128 	bne.w	800e22a <f_write+0x318>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800dfda:	69fb      	ldr	r3, [r7, #28]
 800dfdc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800dfe0:	6a3b      	ldr	r3, [r7, #32]
 800dfe2:	899b      	ldrh	r3, [r3, #12]
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	60bb      	str	r3, [r7, #8]
 800dfea:	60fa      	str	r2, [r7, #12]
 800dfec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800dff0:	f7f2 fc6c 	bl	80008cc <__aeabi_uldivmod>
 800dff4:	4602      	mov	r2, r0
 800dff6:	460b      	mov	r3, r1
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	895b      	ldrh	r3, [r3, #10]
 800dffc:	3b01      	subs	r3, #1
 800dffe:	4013      	ands	r3, r2
 800e000:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 800e002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e004:	2b00      	cmp	r3, #0
 800e006:	d150      	bne.n	800e0aa <f_write+0x198>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e00e:	4313      	orrs	r3, r2
 800e010:	d10c      	bne.n	800e02c <f_write+0x11a>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e012:	69fb      	ldr	r3, [r7, #28]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 800e018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d11a      	bne.n	800e054 <f_write+0x142>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e01e:	69fb      	ldr	r3, [r7, #28]
 800e020:	2100      	movs	r1, #0
 800e022:	4618      	mov	r0, r3
 800e024:	f7fc ff94 	bl	800af50 <create_chain>
 800e028:	63b8      	str	r0, [r7, #56]	@ 0x38
 800e02a:	e013      	b.n	800e054 <f_write+0x142>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e030:	2b00      	cmp	r3, #0
 800e032:	d007      	beq.n	800e044 <f_write+0x132>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e034:	69fb      	ldr	r3, [r7, #28]
 800e036:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e03a:	69f8      	ldr	r0, [r7, #28]
 800e03c:	f7fd f889 	bl	800b152 <clmt_clust>
 800e040:	63b8      	str	r0, [r7, #56]	@ 0x38
 800e042:	e007      	b.n	800e054 <f_write+0x142>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e044:	69fa      	ldr	r2, [r7, #28]
 800e046:	69fb      	ldr	r3, [r7, #28]
 800e048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7fc ff7f 	bl	800af50 <create_chain>
 800e052:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e056:	2b00      	cmp	r3, #0
 800e058:	f000 814c 	beq.w	800e2f4 <f_write+0x3e2>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e05c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e05e:	2b01      	cmp	r3, #1
 800e060:	d10a      	bne.n	800e078 <f_write+0x166>
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	2202      	movs	r2, #2
 800e066:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e06a:	6a3b      	ldr	r3, [r7, #32]
 800e06c:	2102      	movs	r1, #2
 800e06e:	4618      	mov	r0, r3
 800e070:	f7fc f863 	bl	800a13a <unlock_fs>
 800e074:	2302      	movs	r3, #2
 800e076:	e14d      	b.n	800e314 <f_write+0x402>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e07e:	d10a      	bne.n	800e096 <f_write+0x184>
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	2201      	movs	r2, #1
 800e084:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	2101      	movs	r1, #1
 800e08c:	4618      	mov	r0, r3
 800e08e:	f7fc f854 	bl	800a13a <unlock_fs>
 800e092:	2301      	movs	r3, #1
 800e094:	e13e      	b.n	800e314 <f_write+0x402>
				fp->clust = clst;			/* Update current cluster */
 800e096:	69fb      	ldr	r3, [r7, #28]
 800e098:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e09a:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e09c:	69fb      	ldr	r3, [r7, #28]
 800e09e:	689b      	ldr	r3, [r3, #8]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d102      	bne.n	800e0aa <f_write+0x198>
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e0a8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e0aa:	69fb      	ldr	r3, [r7, #28]
 800e0ac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0b0:	b25b      	sxtb	r3, r3
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	da20      	bge.n	800e0f8 <f_write+0x1e6>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e0b6:	6a3b      	ldr	r3, [r7, #32]
 800e0b8:	7858      	ldrb	r0, [r3, #1]
 800e0ba:	69fb      	ldr	r3, [r7, #28]
 800e0bc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	f7fb fd81 	bl	8009bcc <disk_write>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d00a      	beq.n	800e0e6 <f_write+0x1d4>
 800e0d0:	69fb      	ldr	r3, [r7, #28]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	2101      	movs	r1, #1
 800e0dc:	4618      	mov	r0, r3
 800e0de:	f7fc f82c 	bl	800a13a <unlock_fs>
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e116      	b.n	800e314 <f_write+0x402>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e0e6:	69fb      	ldr	r3, [r7, #28]
 800e0e8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e0ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e0f0:	b2da      	uxtb	r2, r3
 800e0f2:	69fb      	ldr	r3, [r7, #28]
 800e0f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e0f8:	6a3a      	ldr	r2, [r7, #32]
 800e0fa:	69fb      	ldr	r3, [r7, #28]
 800e0fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0fe:	4619      	mov	r1, r3
 800e100:	4610      	mov	r0, r2
 800e102:	f7fc fa83 	bl	800a60c <clust2sect>
 800e106:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d10a      	bne.n	800e124 <f_write+0x212>
 800e10e:	69fb      	ldr	r3, [r7, #28]
 800e110:	2202      	movs	r2, #2
 800e112:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e116:	6a3b      	ldr	r3, [r7, #32]
 800e118:	2102      	movs	r1, #2
 800e11a:	4618      	mov	r0, r3
 800e11c:	f7fc f80d 	bl	800a13a <unlock_fs>
 800e120:	2302      	movs	r3, #2
 800e122:	e0f7      	b.n	800e314 <f_write+0x402>
			sect += csect;
 800e124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e128:	4413      	add	r3, r2
 800e12a:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e12c:	6a3b      	ldr	r3, [r7, #32]
 800e12e:	899b      	ldrh	r3, [r3, #12]
 800e130:	461a      	mov	r2, r3
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	fbb3 f3f2 	udiv	r3, r3, r2
 800e138:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	d04b      	beq.n	800e1d8 <f_write+0x2c6>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e144:	4413      	add	r3, r2
 800e146:	6a3a      	ldr	r2, [r7, #32]
 800e148:	8952      	ldrh	r2, [r2, #10]
 800e14a:	4293      	cmp	r3, r2
 800e14c:	d905      	bls.n	800e15a <f_write+0x248>
					cc = fs->csize - csect;
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	895b      	ldrh	r3, [r3, #10]
 800e152:	461a      	mov	r2, r3
 800e154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e156:	1ad3      	subs	r3, r2, r3
 800e158:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e15a:	6a3b      	ldr	r3, [r7, #32]
 800e15c:	7858      	ldrb	r0, [r3, #1]
 800e15e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e164:	f7fb fd32 	bl	8009bcc <disk_write>
 800e168:	4603      	mov	r3, r0
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d00a      	beq.n	800e184 <f_write+0x272>
 800e16e:	69fb      	ldr	r3, [r7, #28]
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	2101      	movs	r1, #1
 800e17a:	4618      	mov	r0, r3
 800e17c:	f7fb ffdd 	bl	800a13a <unlock_fs>
 800e180:	2301      	movs	r3, #1
 800e182:	e0c7      	b.n	800e314 <f_write+0x402>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e184:	69fb      	ldr	r3, [r7, #28]
 800e186:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e18a:	1ad3      	subs	r3, r2, r3
 800e18c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e18e:	429a      	cmp	r2, r3
 800e190:	d91a      	bls.n	800e1c8 <f_write+0x2b6>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e19c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e19e:	1ad3      	subs	r3, r2, r3
 800e1a0:	6a3a      	ldr	r2, [r7, #32]
 800e1a2:	8992      	ldrh	r2, [r2, #12]
 800e1a4:	fb02 f303 	mul.w	r3, r2, r3
 800e1a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1aa:	18d1      	adds	r1, r2, r3
 800e1ac:	6a3b      	ldr	r3, [r7, #32]
 800e1ae:	899b      	ldrh	r3, [r3, #12]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	f7fb ff2e 	bl	800a012 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e1bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1c0:	b2da      	uxtb	r2, r3
 800e1c2:	69fb      	ldr	r3, [r7, #28]
 800e1c4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e1c8:	6a3b      	ldr	r3, [r7, #32]
 800e1ca:	899b      	ldrh	r3, [r3, #12]
 800e1cc:	461a      	mov	r2, r3
 800e1ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e1d0:	fb02 f303 	mul.w	r3, r2, r3
 800e1d4:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800e1d6:	e05d      	b.n	800e294 <f_write+0x382>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e1d8:	69fb      	ldr	r3, [r7, #28]
 800e1da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e1de:	429a      	cmp	r2, r3
 800e1e0:	d020      	beq.n	800e224 <f_write+0x312>
				fp->fptr < fp->obj.objsize &&
 800e1e2:	69fb      	ldr	r3, [r7, #28]
 800e1e4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e1e8:	69fb      	ldr	r3, [r7, #28]
 800e1ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e1ee:	4290      	cmp	r0, r2
 800e1f0:	eb71 0303 	sbcs.w	r3, r1, r3
 800e1f4:	d216      	bcs.n	800e224 <f_write+0x312>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e1f6:	6a3b      	ldr	r3, [r7, #32]
 800e1f8:	7858      	ldrb	r0, [r3, #1]
 800e1fa:	69fb      	ldr	r3, [r7, #28]
 800e1fc:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e200:	2301      	movs	r3, #1
 800e202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e204:	f7fb fcc2 	bl	8009b8c <disk_read>
 800e208:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <f_write+0x312>
					ABORT(fs, FR_DISK_ERR);
 800e20e:	69fb      	ldr	r3, [r7, #28]
 800e210:	2201      	movs	r2, #1
 800e212:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e216:	6a3b      	ldr	r3, [r7, #32]
 800e218:	2101      	movs	r1, #1
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fb ff8d 	bl	800a13a <unlock_fs>
 800e220:	2301      	movs	r3, #1
 800e222:	e077      	b.n	800e314 <f_write+0x402>
			}
#endif
			fp->sect = sect;
 800e224:	69fb      	ldr	r3, [r7, #28]
 800e226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e228:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	899b      	ldrh	r3, [r3, #12]
 800e22e:	4618      	mov	r0, r3
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e236:	6a3b      	ldr	r3, [r7, #32]
 800e238:	899b      	ldrh	r3, [r3, #12]
 800e23a:	fbb2 f1f3 	udiv	r1, r2, r3
 800e23e:	fb01 f303 	mul.w	r3, r1, r3
 800e242:	1ad3      	subs	r3, r2, r3
 800e244:	1ac3      	subs	r3, r0, r3
 800e246:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e248:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	d901      	bls.n	800e254 <f_write+0x342>
 800e250:	697b      	ldr	r3, [r7, #20]
 800e252:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800e25a:	69fb      	ldr	r3, [r7, #28]
 800e25c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800e260:	6a3b      	ldr	r3, [r7, #32]
 800e262:	899b      	ldrh	r3, [r3, #12]
 800e264:	b29b      	uxth	r3, r3
 800e266:	2200      	movs	r2, #0
 800e268:	603b      	str	r3, [r7, #0]
 800e26a:	607a      	str	r2, [r7, #4]
 800e26c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e270:	f7f2 fb2c 	bl	80008cc <__aeabi_uldivmod>
 800e274:	4613      	mov	r3, r2
 800e276:	4423      	add	r3, r4
 800e278:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e27a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7fb fec8 	bl	800a012 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e288:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e28c:	b2da      	uxtb	r2, r3
 800e28e:	69fb      	ldr	r3, [r7, #28]
 800e290:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e298:	4413      	add	r3, r2
 800e29a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e29c:	69fb      	ldr	r3, [r7, #28]
 800e29e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e2a2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e2a4:	2000      	movs	r0, #0
 800e2a6:	4688      	mov	r8, r1
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	eb12 0a08 	adds.w	sl, r2, r8
 800e2ae:	eb43 0b09 	adc.w	fp, r3, r9
 800e2b2:	69fb      	ldr	r3, [r7, #28]
 800e2b4:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800e2b8:	69fb      	ldr	r3, [r7, #28]
 800e2ba:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800e2be:	69fb      	ldr	r3, [r7, #28]
 800e2c0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800e2c4:	4290      	cmp	r0, r2
 800e2c6:	eb71 0403 	sbcs.w	r4, r1, r3
 800e2ca:	d201      	bcs.n	800e2d0 <f_write+0x3be>
 800e2cc:	4610      	mov	r0, r2
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	681a      	ldr	r2, [r3, #0]
 800e2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2dc:	441a      	add	r2, r3
 800e2de:	693b      	ldr	r3, [r7, #16]
 800e2e0:	601a      	str	r2, [r3, #0]
 800e2e2:	697a      	ldr	r2, [r7, #20]
 800e2e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e2e6:	1ad3      	subs	r3, r2, r3
 800e2e8:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	f47f ae64 	bne.w	800dfba <f_write+0xa8>
 800e2f2:	e000      	b.n	800e2f6 <f_write+0x3e4>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e2f4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e2fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e300:	b2da      	uxtb	r2, r3
 800e302:	69fb      	ldr	r3, [r7, #28]
 800e304:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 800e308:	6a3b      	ldr	r3, [r7, #32]
 800e30a:	2100      	movs	r1, #0
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fb ff14 	bl	800a13a <unlock_fs>
 800e312:	2300      	movs	r3, #0
}
 800e314:	4618      	mov	r0, r3
 800e316:	3744      	adds	r7, #68	@ 0x44
 800e318:	46bd      	mov	sp, r7
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e31e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e31e:	b580      	push	{r7, lr}
 800e320:	f5ad 6d99 	sub.w	sp, sp, #1224	@ 0x4c8
 800e324:	af00      	add	r7, sp, #0
 800e326:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e32a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e32e:	6018      	str	r0, [r3, #0]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e330:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e334:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 800e33e:	4611      	mov	r1, r2
 800e340:	4618      	mov	r0, r3
 800e342:	f7ff f921 	bl	800d588 <validate>
 800e346:	4603      	mov	r3, r0
 800e348:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
	if (res == FR_OK) {
 800e34c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800e350:	2b00      	cmp	r3, #0
 800e352:	f040 818b 	bne.w	800e66c <f_sync+0x34e>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e356:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e35a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e364:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e368:	2b00      	cmp	r3, #0
 800e36a:	f000 817f 	beq.w	800e66c <f_sync+0x34e>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e36e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e372:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e37c:	b25b      	sxtb	r3, r3
 800e37e:	2b00      	cmp	r3, #0
 800e380:	da2e      	bge.n	800e3e0 <f_sync+0xc2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e382:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e386:	7858      	ldrb	r0, [r3, #1]
 800e388:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e38c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800e396:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e39a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	f7fb fc12 	bl	8009bcc <disk_write>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d007      	beq.n	800e3be <f_sync+0xa0>
 800e3ae:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e3b2:	2101      	movs	r1, #1
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fb fec0 	bl	800a13a <unlock_fs>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e160      	b.n	800e680 <f_sync+0x362>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e3be:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e3c2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e3cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e3d6:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e3e0:	f7f7 fef8 	bl	80061d4 <get_fattime>
 800e3e4:	f8c7 04c0 	str.w	r0, [r7, #1216]	@ 0x4c0
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e3e8:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	2b04      	cmp	r3, #4
 800e3f0:	f040 80ca 	bne.w	800e588 <f_sync+0x26a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e3f4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e3f8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f7fc fc92 	bl	800ad28 <fill_first_frag>
 800e404:	4603      	mov	r3, r0
 800e406:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800e40a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d112      	bne.n	800e438 <f_sync+0x11a>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e412:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e416:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e41a:	6818      	ldr	r0, [r3, #0]
 800e41c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e420:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e424:	681b      	ldr	r3, [r3, #0]
 800e426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e428:	f04f 32ff 	mov.w	r2, #4294967295
 800e42c:	4619      	mov	r1, r3
 800e42e:	f7fc fcaa 	bl	800ad86 <fill_last_frag>
 800e432:	4603      	mov	r3, r0
 800e434:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				}
				if (res == FR_OK) {
 800e438:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	f040 8115 	bne.w	800e66c <f_sync+0x34e>
					INIT_NAMBUF(fs);
 800e442:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e446:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800e44a:	611a      	str	r2, [r3, #16]
 800e44c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e450:	f107 0208 	add.w	r2, r7, #8
 800e454:	615a      	str	r2, [r3, #20]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e456:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e45a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e45e:	681a      	ldr	r2, [r3, #0]
 800e460:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800e464:	4611      	mov	r1, r2
 800e466:	4618      	mov	r0, r3
 800e468:	f7fd fc66 	bl	800bd38 <load_obj_dir>
 800e46c:	4603      	mov	r3, r0
 800e46e:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					if (res == FR_OK) {
 800e472:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800e476:	2b00      	cmp	r3, #0
 800e478:	f040 80f8 	bne.w	800e66c <f_sync+0x34e>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e47c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e480:	695b      	ldr	r3, [r3, #20]
 800e482:	3304      	adds	r3, #4
 800e484:	781a      	ldrb	r2, [r3, #0]
 800e486:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	3304      	adds	r3, #4
 800e48e:	f042 0220 	orr.w	r2, r2, #32
 800e492:	b2d2      	uxtb	r2, r2
 800e494:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e496:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e49a:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	79da      	ldrb	r2, [r3, #7]
 800e4a2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e4a6:	695b      	ldr	r3, [r3, #20]
 800e4a8:	3321      	adds	r3, #33	@ 0x21
 800e4aa:	f042 0201 	orr.w	r2, r2, #1
 800e4ae:	b2d2      	uxtb	r2, r2
 800e4b0:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e4b2:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e4b6:	695b      	ldr	r3, [r3, #20]
 800e4b8:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800e4bc:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e4c0:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	689b      	ldr	r3, [r3, #8]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	4610      	mov	r0, r2
 800e4cc:	f7fb fced 	bl	8009eaa <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e4d0:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e4d4:	695b      	ldr	r3, [r3, #20]
 800e4d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800e4da:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e4de:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e4e8:	4608      	mov	r0, r1
 800e4ea:	f7fb fd0a 	bl	8009f02 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e4ee:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e4f2:	695b      	ldr	r3, [r3, #20]
 800e4f4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800e4f8:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e4fc:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e506:	4608      	mov	r0, r1
 800e508:	f7fb fcfb 	bl	8009f02 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e50c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e510:	695b      	ldr	r3, [r3, #20]
 800e512:	330c      	adds	r3, #12
 800e514:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800e518:	4618      	mov	r0, r3
 800e51a:	f7fb fcc6 	bl	8009eaa <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e51e:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e522:	695b      	ldr	r3, [r3, #20]
 800e524:	3315      	adds	r3, #21
 800e526:	2200      	movs	r2, #0
 800e528:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e52a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e52e:	695b      	ldr	r3, [r3, #20]
 800e530:	3310      	adds	r3, #16
 800e532:	2100      	movs	r1, #0
 800e534:	4618      	mov	r0, r3
 800e536:	f7fb fcb8 	bl	8009eaa <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e53a:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800e53e:	4618      	mov	r0, r3
 800e540:	f7fd fc30 	bl	800bda4 <store_xdir>
 800e544:	4603      	mov	r3, r0
 800e546:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
						if (res == FR_OK) {
 800e54a:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f040 808c 	bne.w	800e66c <f_sync+0x34e>
							res = sync_fs(fs);
 800e554:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e558:	4618      	mov	r0, r3
 800e55a:	f7fb ffe7 	bl	800a52c <sync_fs>
 800e55e:	4603      	mov	r3, r0
 800e560:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e564:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e568:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e572:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e576:	b2da      	uxtb	r2, r3
 800e578:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e57c:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 800e586:	e071      	b.n	800e66c <f_sync+0x34e>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e588:	f8d7 24b8 	ldr.w	r2, [r7, #1208]	@ 0x4b8
 800e58c:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e590:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e594:	681b      	ldr	r3, [r3, #0]
 800e596:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e598:	4619      	mov	r1, r3
 800e59a:	4610      	mov	r0, r2
 800e59c:	f7fb ff98 	bl	800a4d0 <move_window>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
				if (res == FR_OK) {
 800e5a6:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d15e      	bne.n	800e66c <f_sync+0x34e>
					dir = fp->dir_ptr;
 800e5ae:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e5b2:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e5ba:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e5be:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800e5c2:	330b      	adds	r3, #11
 800e5c4:	781a      	ldrb	r2, [r3, #0]
 800e5c6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800e5ca:	330b      	adds	r3, #11
 800e5cc:	f042 0220 	orr.w	r2, r2, #32
 800e5d0:	b2d2      	uxtb	r2, r2
 800e5d2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e5d4:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e5d8:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	6818      	ldr	r0, [r3, #0]
 800e5e0:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e5e4:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	689b      	ldr	r3, [r3, #8]
 800e5ec:	461a      	mov	r2, r3
 800e5ee:	f8d7 14bc 	ldr.w	r1, [r7, #1212]	@ 0x4bc
 800e5f2:	f7fc ffef 	bl	800b5d4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e5f6:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800e5fa:	f103 001c 	add.w	r0, r3, #28
 800e5fe:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e602:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e60c:	4613      	mov	r3, r2
 800e60e:	4619      	mov	r1, r3
 800e610:	f7fb fc4b 	bl	8009eaa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e614:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800e618:	3316      	adds	r3, #22
 800e61a:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 800e61e:	4618      	mov	r0, r3
 800e620:	f7fb fc43 	bl	8009eaa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e624:	f8d7 34bc 	ldr.w	r3, [r7, #1212]	@ 0x4bc
 800e628:	3312      	adds	r3, #18
 800e62a:	2100      	movs	r1, #0
 800e62c:	4618      	mov	r0, r3
 800e62e:	f7fb fc21 	bl	8009e74 <st_word>
					fs->wflag = 1;
 800e632:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e636:	2201      	movs	r2, #1
 800e638:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e63a:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e63e:	4618      	mov	r0, r3
 800e640:	f7fb ff74 	bl	800a52c <sync_fs>
 800e644:	4603      	mov	r3, r0
 800e646:	f887 34c7 	strb.w	r3, [r7, #1223]	@ 0x4c7
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e64a:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e64e:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800e658:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e65c:	b2da      	uxtb	r2, r3
 800e65e:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 800e662:	f2a3 43c4 	subw	r3, r3, #1220	@ 0x4c4
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e66c:	f8d7 34b8 	ldr.w	r3, [r7, #1208]	@ 0x4b8
 800e670:	f897 24c7 	ldrb.w	r2, [r7, #1223]	@ 0x4c7
 800e674:	4611      	mov	r1, r2
 800e676:	4618      	mov	r0, r3
 800e678:	f7fb fd5f 	bl	800a13a <unlock_fs>
 800e67c:	f897 34c7 	ldrb.w	r3, [r7, #1223]	@ 0x4c7
}
 800e680:	4618      	mov	r0, r3
 800e682:	f507 6799 	add.w	r7, r7, #1224	@ 0x4c8
 800e686:	46bd      	mov	sp, r7
 800e688:	bd80      	pop	{r7, pc}

0800e68a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e68a:	b580      	push	{r7, lr}
 800e68c:	b084      	sub	sp, #16
 800e68e:	af00      	add	r7, sp, #0
 800e690:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e692:	6878      	ldr	r0, [r7, #4]
 800e694:	f7ff fe43 	bl	800e31e <f_sync>
 800e698:	4603      	mov	r3, r0
 800e69a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e69c:	7bfb      	ldrb	r3, [r7, #15]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d11d      	bne.n	800e6de <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f107 0208 	add.w	r2, r7, #8
 800e6a8:	4611      	mov	r1, r2
 800e6aa:	4618      	mov	r0, r3
 800e6ac:	f7fe ff6c 	bl	800d588 <validate>
 800e6b0:	4603      	mov	r3, r0
 800e6b2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e6b4:	7bfb      	ldrb	r3, [r7, #15]
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d111      	bne.n	800e6de <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7fb fe62 	bl	800a388 <dec_lock>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e6c8:	7bfb      	ldrb	r3, [r7, #15]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d102      	bne.n	800e6d4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e6d4:	68bb      	ldr	r3, [r7, #8]
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	4618      	mov	r0, r3
 800e6da:	f7fb fd2e 	bl	800a13a <unlock_fs>
#endif
		}
	}
	return res;
 800e6de:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	3710      	adds	r7, #16
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	bd80      	pop	{r7, pc}

0800e6e8 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800e6e8:	b580      	push	{r7, lr}
 800e6ea:	f5ad 6d8f 	sub.w	sp, sp, #1144	@ 0x478
 800e6ee:	af00      	add	r7, sp, #0
 800e6f0:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e6f4:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e6f8:	6018      	str	r0, [r3, #0]
 800e6fa:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e6fe:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800e702:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800e704:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e708:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d101      	bne.n	800e716 <f_opendir+0x2e>
 800e712:	2309      	movs	r3, #9
 800e714:	e0f4      	b.n	800e900 <f_opendir+0x218>

	/* Get logical drive */
	obj = &dp->obj;
 800e716:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e71a:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
	res = find_volume(&path, &fs, 0);
 800e724:	f207 416c 	addw	r1, r7, #1132	@ 0x46c
 800e728:	463b      	mov	r3, r7
 800e72a:	2200      	movs	r2, #0
 800e72c:	4618      	mov	r0, r3
 800e72e:	f7fe fb93 	bl	800ce58 <find_volume>
 800e732:	4603      	mov	r3, r0
 800e734:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
	if (res == FR_OK) {
 800e738:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	f040 80cd 	bne.w	800e8dc <f_opendir+0x1f4>
		obj->fs = fs;
 800e742:	f8d7 246c 	ldr.w	r2, [r7, #1132]	@ 0x46c
 800e746:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e74a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800e74c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e750:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 800e754:	611a      	str	r2, [r3, #16]
 800e756:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e75a:	f107 020c 	add.w	r2, r7, #12
 800e75e:	615a      	str	r2, [r3, #20]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800e760:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e764:	f5a3 638f 	sub.w	r3, r3, #1144	@ 0x478
 800e768:	681a      	ldr	r2, [r3, #0]
 800e76a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e76e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e772:	4611      	mov	r1, r2
 800e774:	6818      	ldr	r0, [r3, #0]
 800e776:	f7fe fa19 	bl	800cbac <follow_path>
 800e77a:	4603      	mov	r3, r0
 800e77c:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
		if (res == FR_OK) {						/* Follow completed */
 800e780:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800e784:	2b00      	cmp	r3, #0
 800e786:	f040 80a2 	bne.w	800e8ce <f_opendir+0x1e6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800e78a:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e78e:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800e798:	b25b      	sxtb	r3, r3
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	db60      	blt.n	800e860 <f_opendir+0x178>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800e79e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e7a2:	799b      	ldrb	r3, [r3, #6]
 800e7a4:	f003 0310 	and.w	r3, r3, #16
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d056      	beq.n	800e85a <f_opendir+0x172>
#if _FS_EXFAT
					if (fs->fs_type == FS_EXFAT) {
 800e7ac:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b04      	cmp	r3, #4
 800e7b4:	d140      	bne.n	800e838 <f_opendir+0x150>
						obj->c_scl = obj->sclust;							/* Get containing directory inforamation */
 800e7b6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e7ba:	689a      	ldr	r2, [r3, #8]
 800e7bc:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e7c0:	621a      	str	r2, [r3, #32]
						obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800e7c2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e7c6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e7ca:	4613      	mov	r3, r2
 800e7cc:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800e7d0:	f8d7 2470 	ldr.w	r2, [r7, #1136]	@ 0x470
 800e7d4:	79d2      	ldrb	r2, [r2, #7]
 800e7d6:	431a      	orrs	r2, r3
 800e7d8:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e7dc:	625a      	str	r2, [r3, #36]	@ 0x24
						obj->c_ofs = dp->blk_ofs;
 800e7de:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e7e2:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e7ea:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e7ee:	629a      	str	r2, [r3, #40]	@ 0x28
						obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e7f0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e7f4:	695b      	ldr	r3, [r3, #20]
 800e7f6:	3334      	adds	r3, #52	@ 0x34
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fb fa3d 	bl	8009c78 <ld_dword>
 800e7fe:	4602      	mov	r2, r0
 800e800:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e804:	609a      	str	r2, [r3, #8]
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e806:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e80a:	695b      	ldr	r3, [r3, #20]
 800e80c:	3338      	adds	r3, #56	@ 0x38
 800e80e:	4618      	mov	r0, r3
 800e810:	f7fb fa55 	bl	8009cbe <ld_qword>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	f8d7 1470 	ldr.w	r1, [r7, #1136]	@ 0x470
 800e81c:	e9c1 2304 	strd	r2, r3, [r1, #16]
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e820:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e824:	695b      	ldr	r3, [r3, #20]
 800e826:	3321      	adds	r3, #33	@ 0x21
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	f003 0302 	and.w	r3, r3, #2
 800e82e:	b2da      	uxtb	r2, r3
 800e830:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e834:	71da      	strb	r2, [r3, #7]
 800e836:	e013      	b.n	800e860 <f_opendir+0x178>
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800e838:	f8d7 246c 	ldr.w	r2, [r7, #1132]	@ 0x46c
 800e83c:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e840:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e844:	681b      	ldr	r3, [r3, #0]
 800e846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e848:	4619      	mov	r1, r3
 800e84a:	4610      	mov	r0, r2
 800e84c:	f7fc fea3 	bl	800b596 <ld_clust>
 800e850:	4602      	mov	r2, r0
 800e852:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e856:	609a      	str	r2, [r3, #8]
 800e858:	e002      	b.n	800e860 <f_opendir+0x178>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800e85a:	2305      	movs	r3, #5
 800e85c:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
				}
			}
			if (res == FR_OK) {
 800e860:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800e864:	2b00      	cmp	r3, #0
 800e866:	d132      	bne.n	800e8ce <f_opendir+0x1e6>
				obj->id = fs->id;
 800e868:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e86c:	88da      	ldrh	r2, [r3, #6]
 800e86e:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e872:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800e874:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e878:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e87c:	2100      	movs	r1, #0
 800e87e:	6818      	ldr	r0, [r3, #0]
 800e880:	f7fc fcb3 	bl	800b1ea <dir_sdi>
 800e884:	4603      	mov	r3, r0
 800e886:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800e88a:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d11d      	bne.n	800e8ce <f_opendir+0x1e6>
					if (obj->sclust) {
 800e892:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e896:	689b      	ldr	r3, [r3, #8]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d014      	beq.n	800e8c6 <f_opendir+0x1de>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800e89c:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 800e8a0:	f2a3 4374 	subw	r3, r3, #1140	@ 0x474
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	6818      	ldr	r0, [r3, #0]
 800e8a8:	f7fb fce0 	bl	800a26c <inc_lock>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e8b2:	62da      	str	r2, [r3, #44]	@ 0x2c
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800e8b4:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d107      	bne.n	800e8ce <f_opendir+0x1e6>
 800e8be:	2312      	movs	r3, #18
 800e8c0:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
 800e8c4:	e003      	b.n	800e8ce <f_opendir+0x1e6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800e8c6:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800e8ce:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800e8d2:	2b04      	cmp	r3, #4
 800e8d4:	d102      	bne.n	800e8dc <f_opendir+0x1f4>
 800e8d6:	2305      	movs	r3, #5
 800e8d8:	f887 3477 	strb.w	r3, [r7, #1143]	@ 0x477
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800e8dc:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d003      	beq.n	800e8ec <f_opendir+0x204>
 800e8e4:	f8d7 3470 	ldr.w	r3, [r7, #1136]	@ 0x470
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e8ec:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800e8f0:	f897 2477 	ldrb.w	r2, [r7, #1143]	@ 0x477
 800e8f4:	4611      	mov	r1, r2
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f7fb fc1f 	bl	800a13a <unlock_fs>
 800e8fc:	f897 3477 	ldrb.w	r3, [r7, #1143]	@ 0x477
}
 800e900:	4618      	mov	r0, r3
 800e902:	f507 678f 	add.w	r7, r7, #1144	@ 0x478
 800e906:	46bd      	mov	sp, r7
 800e908:	bd80      	pop	{r7, pc}

0800e90a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800e90a:	b580      	push	{r7, lr}
 800e90c:	b084      	sub	sp, #16
 800e90e:	af00      	add	r7, sp, #0
 800e910:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	f107 0208 	add.w	r2, r7, #8
 800e918:	4611      	mov	r1, r2
 800e91a:	4618      	mov	r0, r3
 800e91c:	f7fe fe34 	bl	800d588 <validate>
 800e920:	4603      	mov	r3, r0
 800e922:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e924:	7bfb      	ldrb	r3, [r7, #15]
 800e926:	2b00      	cmp	r3, #0
 800e928:	d115      	bne.n	800e956 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d006      	beq.n	800e940 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e936:	4618      	mov	r0, r3
 800e938:	f7fb fd26 	bl	800a388 <dec_lock>
 800e93c:	4603      	mov	r3, r0
 800e93e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800e940:	7bfb      	ldrb	r3, [r7, #15]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d102      	bne.n	800e94c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	2100      	movs	r1, #0
 800e950:	4618      	mov	r0, r3
 800e952:	f7fb fbf2 	bl	800a13a <unlock_fs>
#endif
	}
	return res;
 800e956:	7bfb      	ldrb	r3, [r7, #15]
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3710      	adds	r7, #16
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	f5ad 6d8e 	sub.w	sp, sp, #1136	@ 0x470
 800e966:	af00      	add	r7, sp, #0
 800e968:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800e96c:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800e970:	6018      	str	r0, [r3, #0]
 800e972:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800e976:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800e97a:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800e97c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800e980:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 800e98a:	4611      	mov	r1, r2
 800e98c:	4618      	mov	r0, r3
 800e98e:	f7fe fdfb 	bl	800d588 <validate>
 800e992:	4603      	mov	r3, r0
 800e994:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
	if (res == FR_OK) {
 800e998:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d150      	bne.n	800ea42 <f_readdir+0xe2>
		if (!fno) {
 800e9a0:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800e9a4:	f5a3 638e 	sub.w	r3, r3, #1136	@ 0x470
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d10b      	bne.n	800e9c6 <f_readdir+0x66>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800e9ae:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800e9b2:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800e9b6:	2100      	movs	r1, #0
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	f7fc fc16 	bl	800b1ea <dir_sdi>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
 800e9c4:	e03d      	b.n	800ea42 <f_readdir+0xe2>
		} else {
			INIT_NAMBUF(fs);
 800e9c6:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800e9ca:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800e9ce:	611a      	str	r2, [r3, #16]
 800e9d0:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800e9d4:	f107 0208 	add.w	r2, r7, #8
 800e9d8:	615a      	str	r2, [r3, #20]
			res = dir_read(dp, 0);			/* Read an item */
 800e9da:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800e9de:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	6818      	ldr	r0, [r3, #0]
 800e9e6:	f7fd fa9f 	bl	800bf28 <dir_read>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800e9f0:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800e9f4:	2b04      	cmp	r3, #4
 800e9f6:	d102      	bne.n	800e9fe <f_readdir+0x9e>
 800e9f8:	2300      	movs	r3, #0
 800e9fa:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			if (res == FR_OK) {				/* A valid entry is found */
 800e9fe:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d11d      	bne.n	800ea42 <f_readdir+0xe2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ea06:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800ea0a:	f5a3 628e 	sub.w	r2, r3, #1136	@ 0x470
 800ea0e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800ea12:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800ea16:	6811      	ldr	r1, [r2, #0]
 800ea18:	6818      	ldr	r0, [r3, #0]
 800ea1a:	f7fd fe21 	bl	800c660 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ea1e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800ea22:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800ea26:	2100      	movs	r1, #0
 800ea28:	6818      	ldr	r0, [r3, #0]
 800ea2a:	f7fc fc72 	bl	800b312 <dir_next>
 800ea2e:	4603      	mov	r3, r0
 800ea30:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ea34:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
 800ea38:	2b04      	cmp	r3, #4
 800ea3a:	d102      	bne.n	800ea42 <f_readdir+0xe2>
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	f887 346f 	strb.w	r3, [r7, #1135]	@ 0x46f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ea42:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800ea46:	f897 246f 	ldrb.w	r2, [r7, #1135]	@ 0x46f
 800ea4a:	4611      	mov	r1, r2
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	f7fb fb74 	bl	800a13a <unlock_fs>
 800ea52:	f897 346f 	ldrb.w	r3, [r7, #1135]	@ 0x46f
}
 800ea56:	4618      	mov	r0, r3
 800ea58:	f507 678e 	add.w	r7, r7, #1136	@ 0x470
 800ea5c:	46bd      	mov	sp, r7
 800ea5e:	bd80      	pop	{r7, pc}

0800ea60 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	f5ad 6d98 	sub.w	sp, sp, #1216	@ 0x4c0
 800ea66:	af00      	add	r7, sp, #0
 800ea68:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800ea6c:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 800ea70:	6018      	str	r0, [r3, #0]
 800ea72:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800ea76:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 800ea7a:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800ea7c:	f507 618d 	add.w	r1, r7, #1128	@ 0x468
 800ea80:	1d3b      	adds	r3, r7, #4
 800ea82:	2200      	movs	r2, #0
 800ea84:	4618      	mov	r0, r3
 800ea86:	f7fe f9e7 	bl	800ce58 <find_volume>
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
	if (res == FR_OK) {
 800ea90:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d135      	bne.n	800eb04 <f_stat+0xa4>
		INIT_NAMBUF(dj.obj.fs);
 800ea98:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800ea9c:	f507 721a 	add.w	r2, r7, #616	@ 0x268
 800eaa0:	611a      	str	r2, [r3, #16]
 800eaa2:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800eaa6:	f107 0208 	add.w	r2, r7, #8
 800eaaa:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);	/* Follow the file path */
 800eaac:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800eab0:	f2a3 43bc 	subw	r3, r3, #1212	@ 0x4bc
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800eaba:	4611      	mov	r1, r2
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fe f875 	bl	800cbac <follow_path>
 800eac2:	4603      	mov	r3, r0
 800eac4:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
		if (res == FR_OK) {				/* Follow completed */
 800eac8:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d119      	bne.n	800eb04 <f_stat+0xa4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800ead0:	f897 34b3 	ldrb.w	r3, [r7, #1203]	@ 0x4b3
 800ead4:	b25b      	sxtb	r3, r3
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	da03      	bge.n	800eae2 <f_stat+0x82>
				res = FR_INVALID_NAME;
 800eada:	2306      	movs	r3, #6
 800eadc:	f887 34bf 	strb.w	r3, [r7, #1215]	@ 0x4bf
 800eae0:	e010      	b.n	800eb04 <f_stat+0xa4>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800eae2:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800eae6:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d009      	beq.n	800eb04 <f_stat+0xa4>
 800eaf0:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 800eaf4:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 800eaf8:	f507 628d 	add.w	r2, r7, #1128	@ 0x468
 800eafc:	6819      	ldr	r1, [r3, #0]
 800eafe:	4610      	mov	r0, r2
 800eb00:	f7fd fdae 	bl	800c660 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800eb04:	f8d7 3468 	ldr.w	r3, [r7, #1128]	@ 0x468
 800eb08:	f897 24bf 	ldrb.w	r2, [r7, #1215]	@ 0x4bf
 800eb0c:	4611      	mov	r1, r2
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fb fb13 	bl	800a13a <unlock_fs>
 800eb14:	f897 34bf 	ldrb.w	r3, [r7, #1215]	@ 0x4bf
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	f507 6798 	add.w	r7, r7, #1216	@ 0x4c0
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b09a      	sub	sp, #104	@ 0x68
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	60f8      	str	r0, [r7, #12]
 800eb2a:	60b9      	str	r1, [r7, #8]
 800eb2c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800eb2e:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 800eb32:	f107 030c 	add.w	r3, r7, #12
 800eb36:	2200      	movs	r2, #0
 800eb38:	4618      	mov	r0, r3
 800eb3a:	f7fe f98d 	bl	800ce58 <find_volume>
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800eb44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f040 80eb 	bne.w	800ed24 <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 800eb4e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800eb54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb56:	6a1a      	ldr	r2, [r3, #32]
 800eb58:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb5c:	3b02      	subs	r3, #2
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d804      	bhi.n	800eb6c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800eb62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb64:	6a1a      	ldr	r2, [r3, #32]
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	601a      	str	r2, [r3, #0]
 800eb6a:	e0db      	b.n	800ed24 <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	663b      	str	r3, [r7, #96]	@ 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800eb70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	2b01      	cmp	r3, #1
 800eb76:	d128      	bne.n	800ebca <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800eb78:	2302      	movs	r3, #2
 800eb7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800eb7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb7e:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 800eb80:	f107 0310 	add.w	r3, r7, #16
 800eb84:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fb fd60 	bl	800a64c <get_fat>
 800eb8c:	6478      	str	r0, [r7, #68]	@ 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800eb8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb94:	d103      	bne.n	800eb9e <f_getfree+0x7c>
 800eb96:	2301      	movs	r3, #1
 800eb98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800eb9c:	e0b5      	b.n	800ed0a <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800eb9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eba0:	2b01      	cmp	r3, #1
 800eba2:	d103      	bne.n	800ebac <f_getfree+0x8a>
 800eba4:	2302      	movs	r3, #2
 800eba6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ebaa:	e0ae      	b.n	800ed0a <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 800ebac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d102      	bne.n	800ebb8 <f_getfree+0x96>
 800ebb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ebb4:	3301      	adds	r3, #1
 800ebb6:	663b      	str	r3, [r7, #96]	@ 0x60
				} while (++clst < fs->n_fatent);
 800ebb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ebba:	3301      	adds	r3, #1
 800ebbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ebbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebc2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800ebc4:	429a      	cmp	r2, r3
 800ebc6:	d3db      	bcc.n	800eb80 <f_getfree+0x5e>
 800ebc8:	e09f      	b.n	800ed0a <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 800ebca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebcc:	781b      	ldrb	r3, [r3, #0]
 800ebce:	2b04      	cmp	r3, #4
 800ebd0:	d14b      	bne.n	800ec6a <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 800ebd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ebd6:	3b02      	subs	r3, #2
 800ebd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sect = fs->database;
 800ebda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ebde:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0;
 800ebe0:	2300      	movs	r3, #0
 800ebe2:	657b      	str	r3, [r7, #84]	@ 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800ebe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d10d      	bne.n	800ec06 <f_getfree+0xe4>
 800ebea:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800ebec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	f7fb fc6c 	bl	800a4d0 <move_window>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800ebfe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d17e      	bne.n	800ed04 <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800ec06:	2308      	movs	r3, #8
 800ec08:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec0a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec0e:	4413      	add	r3, r2
 800ec10:	3340      	adds	r3, #64	@ 0x40
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800ec18:	e013      	b.n	800ec42 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 800ec1a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ec1e:	f003 0301 	and.w	r3, r3, #1
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d102      	bne.n	800ec2c <f_getfree+0x10a>
 800ec26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ec28:	3301      	adds	r3, #1
 800ec2a:	663b      	str	r3, [r7, #96]	@ 0x60
							bm >>= 1;
 800ec2c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800ec30:	085b      	lsrs	r3, r3, #1
 800ec32:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800ec36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec38:	3b01      	subs	r3, #1
 800ec3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ec3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec3e:	3b01      	subs	r3, #1
 800ec40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d002      	beq.n	800ec4e <f_getfree+0x12c>
 800ec48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d1e5      	bne.n	800ec1a <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 800ec4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec50:	3301      	adds	r3, #1
 800ec52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ec54:	8992      	ldrh	r2, [r2, #12]
 800ec56:	fbb3 f1f2 	udiv	r1, r3, r2
 800ec5a:	fb01 f202 	mul.w	r2, r1, r2
 800ec5e:	1a9b      	subs	r3, r3, r2
 800ec60:	657b      	str	r3, [r7, #84]	@ 0x54
					} while (clst);
 800ec62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d1bd      	bne.n	800ebe4 <f_getfree+0xc2>
 800ec68:	e04f      	b.n	800ed0a <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800ec6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ec70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec74:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0; p = 0;
 800ec76:	2300      	movs	r3, #0
 800ec78:	657b      	str	r3, [r7, #84]	@ 0x54
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	653b      	str	r3, [r7, #80]	@ 0x50
					do {
						if (i == 0) {
 800ec7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d113      	bne.n	800ecac <f_getfree+0x18a>
							res = move_window(fs, sect++);
 800ec84:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800ec86:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ec88:	1c5a      	adds	r2, r3, #1
 800ec8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	f7fb fc1f 	bl	800a4d0 <move_window>
 800ec92:	4603      	mov	r3, r0
 800ec94:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							if (res != FR_OK) break;
 800ec98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d133      	bne.n	800ed08 <f_getfree+0x1e6>
							p = fs->win;
 800eca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eca2:	3340      	adds	r3, #64	@ 0x40
 800eca4:	653b      	str	r3, [r7, #80]	@ 0x50
							i = SS(fs);
 800eca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eca8:	899b      	ldrh	r3, [r3, #12]
 800ecaa:	657b      	str	r3, [r7, #84]	@ 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 800ecac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecae:	781b      	ldrb	r3, [r3, #0]
 800ecb0:	2b02      	cmp	r3, #2
 800ecb2:	d10f      	bne.n	800ecd4 <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 800ecb4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ecb6:	f7fa ffc7 	bl	8009c48 <ld_word>
 800ecba:	4603      	mov	r3, r0
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d102      	bne.n	800ecc6 <f_getfree+0x1a4>
 800ecc0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 2; i -= 2;
 800ecc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecc8:	3302      	adds	r3, #2
 800ecca:	653b      	str	r3, [r7, #80]	@ 0x50
 800eccc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecce:	3b02      	subs	r3, #2
 800ecd0:	657b      	str	r3, [r7, #84]	@ 0x54
 800ecd2:	e010      	b.n	800ecf6 <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800ecd4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800ecd6:	f7fa ffcf 	bl	8009c78 <ld_dword>
 800ecda:	4603      	mov	r3, r0
 800ecdc:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d102      	bne.n	800ecea <f_getfree+0x1c8>
 800ece4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ece6:	3301      	adds	r3, #1
 800ece8:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 4; i -= 4;
 800ecea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ecec:	3304      	adds	r3, #4
 800ecee:	653b      	str	r3, [r7, #80]	@ 0x50
 800ecf0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ecf2:	3b04      	subs	r3, #4
 800ecf4:	657b      	str	r3, [r7, #84]	@ 0x54
						}
					} while (--clst);
 800ecf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecf8:	3b01      	subs	r3, #1
 800ecfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ecfc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d1bd      	bne.n	800ec7e <f_getfree+0x15c>
 800ed02:	e002      	b.n	800ed0a <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800ed04:	bf00      	nop
 800ed06:	e000      	b.n	800ed0a <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800ed08:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ed0e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800ed10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed12:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800ed14:	621a      	str	r2, [r3, #32]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800ed16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed18:	791a      	ldrb	r2, [r3, #4]
 800ed1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed1c:	f042 0201 	orr.w	r2, r2, #1
 800ed20:	b2d2      	uxtb	r2, r2
 800ed22:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800ed24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed26:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 800ed2a:	4611      	mov	r1, r2
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7fb fa04 	bl	800a13a <unlock_fs>
 800ed32:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3768      	adds	r7, #104	@ 0x68
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}

0800ed3e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 800ed3e:	b5b0      	push	{r4, r5, r7, lr}
 800ed40:	f5ad 6d9c 	sub.w	sp, sp, #1248	@ 0x4e0
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800ed4a:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed4e:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 800ed50:	f207 416c 	addw	r1, r7, #1132	@ 0x46c
 800ed54:	1d3b      	adds	r3, r7, #4
 800ed56:	2202      	movs	r2, #2
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fe f87d 	bl	800ce58 <find_volume>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
	dj.obj.fs = fs;
 800ed64:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ed68:	f8c7 3470 	str.w	r3, [r7, #1136]	@ 0x470
	if (res == FR_OK) {
 800ed6c:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	f040 818c 	bne.w	800f08e <f_mkdir+0x350>
		INIT_NAMBUF(fs);
 800ed76:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ed7a:	f507 721b 	add.w	r2, r7, #620	@ 0x26c
 800ed7e:	611a      	str	r2, [r3, #16]
 800ed80:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ed84:	f107 020c 	add.w	r2, r7, #12
 800ed88:	615a      	str	r2, [r3, #20]
		res = follow_path(&dj, path);			/* Follow the file path */
 800ed8a:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 800ed8e:	f2a3 43dc 	subw	r3, r3, #1244	@ 0x4dc
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800ed98:	4611      	mov	r1, r2
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7fd ff06 	bl	800cbac <follow_path>
 800eda0:	4603      	mov	r3, r0
 800eda2:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 800eda6:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d102      	bne.n	800edb4 <f_mkdir+0x76>
 800edae:	2308      	movs	r3, #8
 800edb0:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 800edb4:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800edb8:	2b04      	cmp	r3, #4
 800edba:	f040 8168 	bne.w	800f08e <f_mkdir+0x350>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 800edbe:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800edc2:	2100      	movs	r1, #0
 800edc4:	4618      	mov	r0, r3
 800edc6:	f7fc f8c3 	bl	800af50 <create_chain>
 800edca:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 800edce:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800edd2:	895b      	ldrh	r3, [r3, #10]
 800edd4:	461a      	mov	r2, r3
 800edd6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800edda:	899b      	ldrh	r3, [r3, #12]
 800eddc:	fb02 f303 	mul.w	r3, r2, r3
 800ede0:	2200      	movs	r2, #0
 800ede2:	461c      	mov	r4, r3
 800ede4:	4615      	mov	r5, r2
 800ede6:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800edea:	e9c3 4500 	strd	r4, r5, [r3]
			res = FR_OK;
 800edee:	2300      	movs	r3, #0
 800edf0:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 800edf4:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d102      	bne.n	800ee02 <f_mkdir+0xc4>
 800edfc:	2307      	movs	r3, #7
 800edfe:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
			if (dcl == 1) res = FR_INT_ERR;
 800ee02:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800ee06:	2b01      	cmp	r3, #1
 800ee08:	d102      	bne.n	800ee10 <f_mkdir+0xd2>
 800ee0a:	2302      	movs	r3, #2
 800ee0c:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ee10:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 800ee14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee18:	d102      	bne.n	800ee20 <f_mkdir+0xe2>
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 800ee20:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d107      	bne.n	800ee38 <f_mkdir+0xfa>
 800ee28:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7fb fb0b 	bl	800a448 <sync_window>
 800ee32:	4603      	mov	r3, r0
 800ee34:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
			tm = GET_FATTIME();
 800ee38:	f7f7 f9cc 	bl	80061d4 <get_fattime>
 800ee3c:	f8c7 04c8 	str.w	r0, [r7, #1224]	@ 0x4c8
			if (res == FR_OK) {					/* Initialize the new directory table */
 800ee40:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	f040 8099 	bne.w	800ef7c <f_mkdir+0x23e>
				dsc = clust2sect(fs, dcl);
 800ee4a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ee4e:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 800ee52:	4618      	mov	r0, r3
 800ee54:	f7fb fbda 	bl	800a60c <clust2sect>
 800ee58:	f8c7 04d4 	str.w	r0, [r7, #1236]	@ 0x4d4
				dir = fs->win;
 800ee5c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ee60:	3340      	adds	r3, #64	@ 0x40
 800ee62:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
				mem_set(dir, 0, SS(fs));
 800ee66:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ee6a:	899b      	ldrh	r3, [r3, #12]
 800ee6c:	461a      	mov	r2, r3
 800ee6e:	2100      	movs	r1, #0
 800ee70:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	@ 0x4c4
 800ee74:	f7fb f8ee 	bl	800a054 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ee78:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ee7c:	781b      	ldrb	r3, [r3, #0]
 800ee7e:	2b04      	cmp	r3, #4
 800ee80:	d04a      	beq.n	800ef18 <f_mkdir+0x1da>
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 800ee82:	220b      	movs	r2, #11
 800ee84:	2120      	movs	r1, #32
 800ee86:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	@ 0x4c4
 800ee8a:	f7fb f8e3 	bl	800a054 <mem_set>
					dir[DIR_Name] = '.';
 800ee8e:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ee92:	222e      	movs	r2, #46	@ 0x2e
 800ee94:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 800ee96:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ee9a:	330b      	adds	r3, #11
 800ee9c:	2210      	movs	r2, #16
 800ee9e:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 800eea0:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eea4:	3316      	adds	r3, #22
 800eea6:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7fa fffd 	bl	8009eaa <st_dword>
					st_clust(fs, dir, dcl);
 800eeb0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800eeb4:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 800eeb8:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800eebc:	4618      	mov	r0, r3
 800eebe:	f7fc fb89 	bl	800b5d4 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 800eec2:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eec6:	3320      	adds	r3, #32
 800eec8:	2220      	movs	r2, #32
 800eeca:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fb f89f 	bl	800a012 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 800eed4:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800eed8:	3321      	adds	r3, #33	@ 0x21
 800eeda:	222e      	movs	r2, #46	@ 0x2e
 800eedc:	701a      	strb	r2, [r3, #0]
 800eede:	f8d7 3478 	ldr.w	r3, [r7, #1144]	@ 0x478
 800eee2:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 800eee6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800eeea:	781b      	ldrb	r3, [r3, #0]
 800eeec:	2b03      	cmp	r3, #3
 800eeee:	d109      	bne.n	800ef04 <f_mkdir+0x1c6>
 800eef0:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800eef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eef6:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d102      	bne.n	800ef04 <f_mkdir+0x1c6>
 800eefe:	2300      	movs	r3, #0
 800ef00:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
					st_clust(fs, dir + SZDIRE, pcl);
 800ef04:	f8d7 046c 	ldr.w	r0, [r7, #1132]	@ 0x46c
 800ef08:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800ef0c:	3320      	adds	r3, #32
 800ef0e:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	@ 0x4d0
 800ef12:	4619      	mov	r1, r3
 800ef14:	f7fc fb5e 	bl	800b5d4 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ef18:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ef1c:	895b      	ldrh	r3, [r3, #10]
 800ef1e:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 800ef22:	e025      	b.n	800ef70 <f_mkdir+0x232>
					fs->winsect = dsc++;
 800ef24:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 800ef28:	1c5a      	adds	r2, r3, #1
 800ef2a:	f8c7 24d4 	str.w	r2, [r7, #1236]	@ 0x4d4
 800ef2e:	f8d7 246c 	ldr.w	r2, [r7, #1132]	@ 0x46c
 800ef32:	63d3      	str	r3, [r2, #60]	@ 0x3c
					fs->wflag = 1;
 800ef34:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ef38:	2201      	movs	r2, #1
 800ef3a:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 800ef3c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ef40:	4618      	mov	r0, r3
 800ef42:	f7fb fa81 	bl	800a448 <sync_window>
 800ef46:	4603      	mov	r3, r0
 800ef48:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
					if (res != FR_OK) break;
 800ef4c:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d112      	bne.n	800ef7a <f_mkdir+0x23c>
					mem_set(dir, 0, SS(fs));
 800ef54:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800ef58:	899b      	ldrh	r3, [r3, #12]
 800ef5a:	461a      	mov	r2, r3
 800ef5c:	2100      	movs	r1, #0
 800ef5e:	f8d7 04c4 	ldr.w	r0, [r7, #1220]	@ 0x4c4
 800ef62:	f7fb f877 	bl	800a054 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 800ef66:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ef6a:	3b01      	subs	r3, #1
 800ef6c:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 800ef70:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	@ 0x4d8
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d1d5      	bne.n	800ef24 <f_mkdir+0x1e6>
 800ef78:	e000      	b.n	800ef7c <f_mkdir+0x23e>
					if (res != FR_OK) break;
 800ef7a:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 800ef7c:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	d107      	bne.n	800ef94 <f_mkdir+0x256>
				res = dir_register(&dj);	/* Register the object to the directoy */
 800ef84:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800ef88:	4618      	mov	r0, r3
 800ef8a:	f7fd f9bf 	bl	800c30c <dir_register>
 800ef8e:	4603      	mov	r3, r0
 800ef90:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
			}
			if (res == FR_OK) {
 800ef94:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d170      	bne.n	800f07e <f_mkdir+0x340>
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
 800ef9c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800efa0:	781b      	ldrb	r3, [r3, #0]
 800efa2:	2b04      	cmp	r3, #4
 800efa4:	d140      	bne.n	800f028 <f_mkdir+0x2ea>
					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
 800efa6:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800efaa:	695b      	ldr	r3, [r3, #20]
 800efac:	330c      	adds	r3, #12
 800efae:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 800efb2:	4618      	mov	r0, r3
 800efb4:	f7fa ff79 	bl	8009eaa <st_dword>
					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
 800efb8:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800efbc:	695b      	ldr	r3, [r3, #20]
 800efbe:	3334      	adds	r3, #52	@ 0x34
 800efc0:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 800efc4:	4618      	mov	r0, r3
 800efc6:	f7fa ff70 	bl	8009eaa <st_dword>
					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)dj.obj.objsize);	/* File size needs to be valid */
 800efca:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800efce:	695b      	ldr	r3, [r3, #20]
 800efd0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800efd4:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800efd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efdc:	4613      	mov	r3, r2
 800efde:	4619      	mov	r1, r3
 800efe0:	f7fa ff63 	bl	8009eaa <st_dword>
					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)dj.obj.objsize);
 800efe4:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800efe8:	695b      	ldr	r3, [r3, #20]
 800efea:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800efee:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 800eff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eff6:	4613      	mov	r3, r2
 800eff8:	4619      	mov	r1, r3
 800effa:	f7fa ff56 	bl	8009eaa <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag (contiguous) */
 800effe:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800f002:	695b      	ldr	r3, [r3, #20]
 800f004:	3321      	adds	r3, #33	@ 0x21
 800f006:	2203      	movs	r2, #3
 800f008:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
 800f00a:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	3304      	adds	r3, #4
 800f012:	2210      	movs	r2, #16
 800f014:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800f016:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7fc fec2 	bl	800bda4 <store_xdir>
 800f020:	4603      	mov	r3, r0
 800f022:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
 800f026:	e01d      	b.n	800f064 <f_mkdir+0x326>
				} else
#endif
				{
					dir = dj.dir;
 800f028:	f8d7 34ac 	ldr.w	r3, [r7, #1196]	@ 0x4ac
 800f02c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 800f030:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800f034:	3316      	adds	r3, #22
 800f036:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 800f03a:	4618      	mov	r0, r3
 800f03c:	f7fa ff35 	bl	8009eaa <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 800f040:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800f044:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	@ 0x4cc
 800f048:	f8d7 14c4 	ldr.w	r1, [r7, #1220]	@ 0x4c4
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fc fac1 	bl	800b5d4 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 800f052:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	@ 0x4c4
 800f056:	330b      	adds	r3, #11
 800f058:	2210      	movs	r2, #16
 800f05a:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 800f05c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800f060:	2201      	movs	r2, #1
 800f062:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 800f064:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d110      	bne.n	800f08e <f_mkdir+0x350>
					res = sync_fs(fs);
 800f06c:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800f070:	4618      	mov	r0, r3
 800f072:	f7fb fa5b 	bl	800a52c <sync_fs>
 800f076:	4603      	mov	r3, r0
 800f078:	f887 34df 	strb.w	r3, [r7, #1247]	@ 0x4df
 800f07c:	e007      	b.n	800f08e <f_mkdir+0x350>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 800f07e:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 800f082:	2200      	movs	r2, #0
 800f084:	f8d7 14cc 	ldr.w	r1, [r7, #1228]	@ 0x4cc
 800f088:	4618      	mov	r0, r3
 800f08a:	f7fb fead 	bl	800ade8 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 800f08e:	f8d7 346c 	ldr.w	r3, [r7, #1132]	@ 0x46c
 800f092:	f897 24df 	ldrb.w	r2, [r7, #1247]	@ 0x4df
 800f096:	4611      	mov	r1, r2
 800f098:	4618      	mov	r0, r3
 800f09a:	f7fb f84e 	bl	800a13a <unlock_fs>
 800f09e:	f897 34df 	ldrb.w	r3, [r7, #1247]	@ 0x4df
}
 800f0a2:	4618      	mov	r0, r3
 800f0a4:	f507 679c 	add.w	r7, r7, #1248	@ 0x4e0
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	bdb0      	pop	{r4, r5, r7, pc}

0800f0ac <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f0ac:	b480      	push	{r7}
 800f0ae:	b087      	sub	sp, #28
 800f0b0:	af00      	add	r7, sp, #0
 800f0b2:	60f8      	str	r0, [r7, #12]
 800f0b4:	60b9      	str	r1, [r7, #8]
 800f0b6:	4613      	mov	r3, r2
 800f0b8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f0c2:	4b1f      	ldr	r3, [pc, #124]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0c4:	7a5b      	ldrb	r3, [r3, #9]
 800f0c6:	b2db      	uxtb	r3, r3
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d131      	bne.n	800f130 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f0cc:	4b1c      	ldr	r3, [pc, #112]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0ce:	7a5b      	ldrb	r3, [r3, #9]
 800f0d0:	b2db      	uxtb	r3, r3
 800f0d2:	461a      	mov	r2, r3
 800f0d4:	4b1a      	ldr	r3, [pc, #104]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f0da:	4b19      	ldr	r3, [pc, #100]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0dc:	7a5b      	ldrb	r3, [r3, #9]
 800f0de:	b2db      	uxtb	r3, r3
 800f0e0:	4a17      	ldr	r2, [pc, #92]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0e2:	009b      	lsls	r3, r3, #2
 800f0e4:	4413      	add	r3, r2
 800f0e6:	68fa      	ldr	r2, [r7, #12]
 800f0e8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f0ea:	4b15      	ldr	r3, [pc, #84]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0ec:	7a5b      	ldrb	r3, [r3, #9]
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	461a      	mov	r2, r3
 800f0f2:	4b13      	ldr	r3, [pc, #76]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0f4:	4413      	add	r3, r2
 800f0f6:	79fa      	ldrb	r2, [r7, #7]
 800f0f8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f0fa:	4b11      	ldr	r3, [pc, #68]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f0fc:	7a5b      	ldrb	r3, [r3, #9]
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	1c5a      	adds	r2, r3, #1
 800f102:	b2d1      	uxtb	r1, r2
 800f104:	4a0e      	ldr	r2, [pc, #56]	@ (800f140 <FATFS_LinkDriverEx+0x94>)
 800f106:	7251      	strb	r1, [r2, #9]
 800f108:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f10a:	7dbb      	ldrb	r3, [r7, #22]
 800f10c:	3330      	adds	r3, #48	@ 0x30
 800f10e:	b2da      	uxtb	r2, r3
 800f110:	68bb      	ldr	r3, [r7, #8]
 800f112:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f114:	68bb      	ldr	r3, [r7, #8]
 800f116:	3301      	adds	r3, #1
 800f118:	223a      	movs	r2, #58	@ 0x3a
 800f11a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	3302      	adds	r3, #2
 800f120:	222f      	movs	r2, #47	@ 0x2f
 800f122:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	3303      	adds	r3, #3
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f12c:	2300      	movs	r3, #0
 800f12e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f130:	7dfb      	ldrb	r3, [r7, #23]
}
 800f132:	4618      	mov	r0, r3
 800f134:	371c      	adds	r7, #28
 800f136:	46bd      	mov	sp, r7
 800f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f13c:	4770      	bx	lr
 800f13e:	bf00      	nop
 800f140:	2000231c 	.word	0x2000231c

0800f144 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b082      	sub	sp, #8
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f14e:	2200      	movs	r2, #0
 800f150:	6839      	ldr	r1, [r7, #0]
 800f152:	6878      	ldr	r0, [r7, #4]
 800f154:	f7ff ffaa 	bl	800f0ac <FATFS_LinkDriverEx>
 800f158:	4603      	mov	r3, r0
}
 800f15a:	4618      	mov	r0, r3
 800f15c:	3708      	adds	r7, #8
 800f15e:	46bd      	mov	sp, r7
 800f160:	bd80      	pop	{r7, pc}
	...

0800f164 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800f164:	b480      	push	{r7}
 800f166:	b085      	sub	sp, #20
 800f168:	af00      	add	r7, sp, #0
 800f16a:	4603      	mov	r3, r0
 800f16c:	6039      	str	r1, [r7, #0]
 800f16e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800f170:	88fb      	ldrh	r3, [r7, #6]
 800f172:	2b7f      	cmp	r3, #127	@ 0x7f
 800f174:	d802      	bhi.n	800f17c <ff_convert+0x18>
		c = chr;
 800f176:	88fb      	ldrh	r3, [r7, #6]
 800f178:	81fb      	strh	r3, [r7, #14]
 800f17a:	e025      	b.n	800f1c8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d00b      	beq.n	800f19a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800f182:	88fb      	ldrh	r3, [r7, #6]
 800f184:	2bff      	cmp	r3, #255	@ 0xff
 800f186:	d805      	bhi.n	800f194 <ff_convert+0x30>
 800f188:	88fb      	ldrh	r3, [r7, #6]
 800f18a:	3b80      	subs	r3, #128	@ 0x80
 800f18c:	4a12      	ldr	r2, [pc, #72]	@ (800f1d8 <ff_convert+0x74>)
 800f18e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f192:	e000      	b.n	800f196 <ff_convert+0x32>
 800f194:	2300      	movs	r3, #0
 800f196:	81fb      	strh	r3, [r7, #14]
 800f198:	e016      	b.n	800f1c8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800f19a:	2300      	movs	r3, #0
 800f19c:	81fb      	strh	r3, [r7, #14]
 800f19e:	e009      	b.n	800f1b4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800f1a0:	89fb      	ldrh	r3, [r7, #14]
 800f1a2:	4a0d      	ldr	r2, [pc, #52]	@ (800f1d8 <ff_convert+0x74>)
 800f1a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f1a8:	88fa      	ldrh	r2, [r7, #6]
 800f1aa:	429a      	cmp	r2, r3
 800f1ac:	d006      	beq.n	800f1bc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800f1ae:	89fb      	ldrh	r3, [r7, #14]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	81fb      	strh	r3, [r7, #14]
 800f1b4:	89fb      	ldrh	r3, [r7, #14]
 800f1b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800f1b8:	d9f2      	bls.n	800f1a0 <ff_convert+0x3c>
 800f1ba:	e000      	b.n	800f1be <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800f1bc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800f1be:	89fb      	ldrh	r3, [r7, #14]
 800f1c0:	3380      	adds	r3, #128	@ 0x80
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	b2db      	uxtb	r3, r3
 800f1c6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800f1c8:	89fb      	ldrh	r3, [r7, #14]
}
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	3714      	adds	r7, #20
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d4:	4770      	bx	lr
 800f1d6:	bf00      	nop
 800f1d8:	080142c8 	.word	0x080142c8

0800f1dc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800f1dc:	b480      	push	{r7}
 800f1de:	b087      	sub	sp, #28
 800f1e0:	af00      	add	r7, sp, #0
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800f1e6:	88fb      	ldrh	r3, [r7, #6]
 800f1e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f1ec:	d201      	bcs.n	800f1f2 <ff_wtoupper+0x16>
 800f1ee:	4b3e      	ldr	r3, [pc, #248]	@ (800f2e8 <ff_wtoupper+0x10c>)
 800f1f0:	e000      	b.n	800f1f4 <ff_wtoupper+0x18>
 800f1f2:	4b3e      	ldr	r3, [pc, #248]	@ (800f2ec <ff_wtoupper+0x110>)
 800f1f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800f1f6:	697b      	ldr	r3, [r7, #20]
 800f1f8:	1c9a      	adds	r2, r3, #2
 800f1fa:	617a      	str	r2, [r7, #20]
 800f1fc:	881b      	ldrh	r3, [r3, #0]
 800f1fe:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800f200:	8a7b      	ldrh	r3, [r7, #18]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d068      	beq.n	800f2d8 <ff_wtoupper+0xfc>
 800f206:	88fa      	ldrh	r2, [r7, #6]
 800f208:	8a7b      	ldrh	r3, [r7, #18]
 800f20a:	429a      	cmp	r2, r3
 800f20c:	d364      	bcc.n	800f2d8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800f20e:	697b      	ldr	r3, [r7, #20]
 800f210:	1c9a      	adds	r2, r3, #2
 800f212:	617a      	str	r2, [r7, #20]
 800f214:	881b      	ldrh	r3, [r3, #0]
 800f216:	823b      	strh	r3, [r7, #16]
 800f218:	8a3b      	ldrh	r3, [r7, #16]
 800f21a:	0a1b      	lsrs	r3, r3, #8
 800f21c:	81fb      	strh	r3, [r7, #14]
 800f21e:	8a3b      	ldrh	r3, [r7, #16]
 800f220:	b2db      	uxtb	r3, r3
 800f222:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800f224:	88fa      	ldrh	r2, [r7, #6]
 800f226:	8a79      	ldrh	r1, [r7, #18]
 800f228:	8a3b      	ldrh	r3, [r7, #16]
 800f22a:	440b      	add	r3, r1
 800f22c:	429a      	cmp	r2, r3
 800f22e:	da49      	bge.n	800f2c4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800f230:	89fb      	ldrh	r3, [r7, #14]
 800f232:	2b08      	cmp	r3, #8
 800f234:	d84f      	bhi.n	800f2d6 <ff_wtoupper+0xfa>
 800f236:	a201      	add	r2, pc, #4	@ (adr r2, 800f23c <ff_wtoupper+0x60>)
 800f238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f23c:	0800f261 	.word	0x0800f261
 800f240:	0800f273 	.word	0x0800f273
 800f244:	0800f289 	.word	0x0800f289
 800f248:	0800f291 	.word	0x0800f291
 800f24c:	0800f299 	.word	0x0800f299
 800f250:	0800f2a1 	.word	0x0800f2a1
 800f254:	0800f2a9 	.word	0x0800f2a9
 800f258:	0800f2b1 	.word	0x0800f2b1
 800f25c:	0800f2b9 	.word	0x0800f2b9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800f260:	88fa      	ldrh	r2, [r7, #6]
 800f262:	8a7b      	ldrh	r3, [r7, #18]
 800f264:	1ad3      	subs	r3, r2, r3
 800f266:	005b      	lsls	r3, r3, #1
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	4413      	add	r3, r2
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	80fb      	strh	r3, [r7, #6]
 800f270:	e027      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800f272:	88fa      	ldrh	r2, [r7, #6]
 800f274:	8a7b      	ldrh	r3, [r7, #18]
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	b29b      	uxth	r3, r3
 800f27a:	f003 0301 	and.w	r3, r3, #1
 800f27e:	b29b      	uxth	r3, r3
 800f280:	88fa      	ldrh	r2, [r7, #6]
 800f282:	1ad3      	subs	r3, r2, r3
 800f284:	80fb      	strh	r3, [r7, #6]
 800f286:	e01c      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800f288:	88fb      	ldrh	r3, [r7, #6]
 800f28a:	3b10      	subs	r3, #16
 800f28c:	80fb      	strh	r3, [r7, #6]
 800f28e:	e018      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800f290:	88fb      	ldrh	r3, [r7, #6]
 800f292:	3b20      	subs	r3, #32
 800f294:	80fb      	strh	r3, [r7, #6]
 800f296:	e014      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800f298:	88fb      	ldrh	r3, [r7, #6]
 800f29a:	3b30      	subs	r3, #48	@ 0x30
 800f29c:	80fb      	strh	r3, [r7, #6]
 800f29e:	e010      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800f2a0:	88fb      	ldrh	r3, [r7, #6]
 800f2a2:	3b1a      	subs	r3, #26
 800f2a4:	80fb      	strh	r3, [r7, #6]
 800f2a6:	e00c      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800f2a8:	88fb      	ldrh	r3, [r7, #6]
 800f2aa:	3308      	adds	r3, #8
 800f2ac:	80fb      	strh	r3, [r7, #6]
 800f2ae:	e008      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800f2b0:	88fb      	ldrh	r3, [r7, #6]
 800f2b2:	3b50      	subs	r3, #80	@ 0x50
 800f2b4:	80fb      	strh	r3, [r7, #6]
 800f2b6:	e004      	b.n	800f2c2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800f2b8:	88fb      	ldrh	r3, [r7, #6]
 800f2ba:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800f2be:	80fb      	strh	r3, [r7, #6]
 800f2c0:	bf00      	nop
			}
			break;
 800f2c2:	e008      	b.n	800f2d6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800f2c4:	89fb      	ldrh	r3, [r7, #14]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d195      	bne.n	800f1f6 <ff_wtoupper+0x1a>
 800f2ca:	8a3b      	ldrh	r3, [r7, #16]
 800f2cc:	005b      	lsls	r3, r3, #1
 800f2ce:	697a      	ldr	r2, [r7, #20]
 800f2d0:	4413      	add	r3, r2
 800f2d2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800f2d4:	e78f      	b.n	800f1f6 <ff_wtoupper+0x1a>
			break;
 800f2d6:	bf00      	nop
	}

	return chr;
 800f2d8:	88fb      	ldrh	r3, [r7, #6]
}
 800f2da:	4618      	mov	r0, r3
 800f2dc:	371c      	adds	r7, #28
 800f2de:	46bd      	mov	sp, r7
 800f2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e4:	4770      	bx	lr
 800f2e6:	bf00      	nop
 800f2e8:	080143c8 	.word	0x080143c8
 800f2ec:	080145bc 	.word	0x080145bc

0800f2f0 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	6039      	str	r1, [r7, #0]
 800f2fa:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	2101      	movs	r1, #1
 800f300:	2001      	movs	r0, #1
 800f302:	f000 f95d 	bl	800f5c0 <osSemaphoreNew>
 800f306:	4602      	mov	r2, r0
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	2b00      	cmp	r3, #0
 800f312:	bf14      	ite	ne
 800f314:	2301      	movne	r3, #1
 800f316:	2300      	moveq	r3, #0
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	60fb      	str	r3, [r7, #12]

    return ret;
 800f31c:	68fb      	ldr	r3, [r7, #12]
}
 800f31e:	4618      	mov	r0, r3
 800f320:	3710      	adds	r7, #16
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b082      	sub	sp, #8
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800f32e:	6878      	ldr	r0, [r7, #4]
 800f330:	f000 fa66 	bl	800f800 <osSemaphoreDelete>
#endif
    return 1;
 800f334:	2301      	movs	r3, #1
}
 800f336:	4618      	mov	r0, r3
 800f338:	3708      	adds	r7, #8
 800f33a:	46bd      	mov	sp, r7
 800f33c:	bd80      	pop	{r7, pc}

0800f33e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800f33e:	b580      	push	{r7, lr}
 800f340:	b084      	sub	sp, #16
 800f342:	af00      	add	r7, sp, #0
 800f344:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800f346:	2300      	movs	r3, #0
 800f348:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800f34a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800f34e:	6878      	ldr	r0, [r7, #4]
 800f350:	f000 f9c0 	bl	800f6d4 <osSemaphoreAcquire>
 800f354:	4603      	mov	r3, r0
 800f356:	2b00      	cmp	r3, #0
 800f358:	d101      	bne.n	800f35e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800f35a:	2301      	movs	r3, #1
 800f35c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800f35e:	68fb      	ldr	r3, [r7, #12]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b082      	sub	sp, #8
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 fa01 	bl	800f778 <osSemaphoreRelease>
#endif
}
 800f376:	bf00      	nop
 800f378:	3708      	adds	r7, #8
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd80      	pop	{r7, pc}
	...

0800f380 <__NVIC_SetPriority>:
{
 800f380:	b480      	push	{r7}
 800f382:	b083      	sub	sp, #12
 800f384:	af00      	add	r7, sp, #0
 800f386:	4603      	mov	r3, r0
 800f388:	6039      	str	r1, [r7, #0]
 800f38a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800f38c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f390:	2b00      	cmp	r3, #0
 800f392:	db0a      	blt.n	800f3aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f394:	683b      	ldr	r3, [r7, #0]
 800f396:	b2da      	uxtb	r2, r3
 800f398:	490c      	ldr	r1, [pc, #48]	@ (800f3cc <__NVIC_SetPriority+0x4c>)
 800f39a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800f39e:	0112      	lsls	r2, r2, #4
 800f3a0:	b2d2      	uxtb	r2, r2
 800f3a2:	440b      	add	r3, r1
 800f3a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800f3a8:	e00a      	b.n	800f3c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800f3aa:	683b      	ldr	r3, [r7, #0]
 800f3ac:	b2da      	uxtb	r2, r3
 800f3ae:	4908      	ldr	r1, [pc, #32]	@ (800f3d0 <__NVIC_SetPriority+0x50>)
 800f3b0:	79fb      	ldrb	r3, [r7, #7]
 800f3b2:	f003 030f 	and.w	r3, r3, #15
 800f3b6:	3b04      	subs	r3, #4
 800f3b8:	0112      	lsls	r2, r2, #4
 800f3ba:	b2d2      	uxtb	r2, r2
 800f3bc:	440b      	add	r3, r1
 800f3be:	761a      	strb	r2, [r3, #24]
}
 800f3c0:	bf00      	nop
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	e000e100 	.word	0xe000e100
 800f3d0:	e000ed00 	.word	0xe000ed00

0800f3d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800f3d8:	4b05      	ldr	r3, [pc, #20]	@ (800f3f0 <SysTick_Handler+0x1c>)
 800f3da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800f3dc:	f002 fa6e 	bl	80118bc <xTaskGetSchedulerState>
 800f3e0:	4603      	mov	r3, r0
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d001      	beq.n	800f3ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800f3e6:	f003 f967 	bl	80126b8 <xPortSysTickHandler>
  }
}
 800f3ea:	bf00      	nop
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	e000e010 	.word	0xe000e010

0800f3f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	f06f 0004 	mvn.w	r0, #4
 800f3fe:	f7ff ffbf 	bl	800f380 <__NVIC_SetPriority>
#endif
}
 800f402:	bf00      	nop
 800f404:	bd80      	pop	{r7, pc}
	...

0800f408 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f40e:	f3ef 8305 	mrs	r3, IPSR
 800f412:	603b      	str	r3, [r7, #0]
  return(result);
 800f414:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f416:	2b00      	cmp	r3, #0
 800f418:	d003      	beq.n	800f422 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800f41a:	f06f 0305 	mvn.w	r3, #5
 800f41e:	607b      	str	r3, [r7, #4]
 800f420:	e00c      	b.n	800f43c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800f422:	4b0a      	ldr	r3, [pc, #40]	@ (800f44c <osKernelInitialize+0x44>)
 800f424:	681b      	ldr	r3, [r3, #0]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d105      	bne.n	800f436 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800f42a:	4b08      	ldr	r3, [pc, #32]	@ (800f44c <osKernelInitialize+0x44>)
 800f42c:	2201      	movs	r2, #1
 800f42e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800f430:	2300      	movs	r3, #0
 800f432:	607b      	str	r3, [r7, #4]
 800f434:	e002      	b.n	800f43c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800f436:	f04f 33ff 	mov.w	r3, #4294967295
 800f43a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f43c:	687b      	ldr	r3, [r7, #4]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	370c      	adds	r7, #12
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	20002328 	.word	0x20002328

0800f450 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800f450:	b580      	push	{r7, lr}
 800f452:	b082      	sub	sp, #8
 800f454:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f456:	f3ef 8305 	mrs	r3, IPSR
 800f45a:	603b      	str	r3, [r7, #0]
  return(result);
 800f45c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d003      	beq.n	800f46a <osKernelStart+0x1a>
    stat = osErrorISR;
 800f462:	f06f 0305 	mvn.w	r3, #5
 800f466:	607b      	str	r3, [r7, #4]
 800f468:	e010      	b.n	800f48c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800f46a:	4b0b      	ldr	r3, [pc, #44]	@ (800f498 <osKernelStart+0x48>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	2b01      	cmp	r3, #1
 800f470:	d109      	bne.n	800f486 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800f472:	f7ff ffbf 	bl	800f3f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800f476:	4b08      	ldr	r3, [pc, #32]	@ (800f498 <osKernelStart+0x48>)
 800f478:	2202      	movs	r2, #2
 800f47a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800f47c:	f001 fdd0 	bl	8011020 <vTaskStartScheduler>
      stat = osOK;
 800f480:	2300      	movs	r3, #0
 800f482:	607b      	str	r3, [r7, #4]
 800f484:	e002      	b.n	800f48c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800f486:	f04f 33ff 	mov.w	r3, #4294967295
 800f48a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800f48c:	687b      	ldr	r3, [r7, #4]
}
 800f48e:	4618      	mov	r0, r3
 800f490:	3708      	adds	r7, #8
 800f492:	46bd      	mov	sp, r7
 800f494:	bd80      	pop	{r7, pc}
 800f496:	bf00      	nop
 800f498:	20002328 	.word	0x20002328

0800f49c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b08e      	sub	sp, #56	@ 0x38
 800f4a0:	af04      	add	r7, sp, #16
 800f4a2:	60f8      	str	r0, [r7, #12]
 800f4a4:	60b9      	str	r1, [r7, #8]
 800f4a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f4ac:	f3ef 8305 	mrs	r3, IPSR
 800f4b0:	617b      	str	r3, [r7, #20]
  return(result);
 800f4b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	d17e      	bne.n	800f5b6 <osThreadNew+0x11a>
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d07b      	beq.n	800f5b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800f4be:	2380      	movs	r3, #128	@ 0x80
 800f4c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800f4c2:	2318      	movs	r3, #24
 800f4c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800f4ca:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d045      	beq.n	800f562 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d002      	beq.n	800f4e4 <osThreadNew+0x48>
        name = attr->name;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	681b      	ldr	r3, [r3, #0]
 800f4e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	699b      	ldr	r3, [r3, #24]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d002      	beq.n	800f4f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	699b      	ldr	r3, [r3, #24]
 800f4f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d008      	beq.n	800f50a <osThreadNew+0x6e>
 800f4f8:	69fb      	ldr	r3, [r7, #28]
 800f4fa:	2b38      	cmp	r3, #56	@ 0x38
 800f4fc:	d805      	bhi.n	800f50a <osThreadNew+0x6e>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	685b      	ldr	r3, [r3, #4]
 800f502:	f003 0301 	and.w	r3, r3, #1
 800f506:	2b00      	cmp	r3, #0
 800f508:	d001      	beq.n	800f50e <osThreadNew+0x72>
        return (NULL);
 800f50a:	2300      	movs	r3, #0
 800f50c:	e054      	b.n	800f5b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	695b      	ldr	r3, [r3, #20]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d003      	beq.n	800f51e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	695b      	ldr	r3, [r3, #20]
 800f51a:	089b      	lsrs	r3, r3, #2
 800f51c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d00e      	beq.n	800f544 <osThreadNew+0xa8>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	2b5b      	cmp	r3, #91	@ 0x5b
 800f52c:	d90a      	bls.n	800f544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800f532:	2b00      	cmp	r3, #0
 800f534:	d006      	beq.n	800f544 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	695b      	ldr	r3, [r3, #20]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d002      	beq.n	800f544 <osThreadNew+0xa8>
        mem = 1;
 800f53e:	2301      	movs	r3, #1
 800f540:	61bb      	str	r3, [r7, #24]
 800f542:	e010      	b.n	800f566 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	689b      	ldr	r3, [r3, #8]
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d10c      	bne.n	800f566 <osThreadNew+0xca>
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d108      	bne.n	800f566 <osThreadNew+0xca>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	691b      	ldr	r3, [r3, #16]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d104      	bne.n	800f566 <osThreadNew+0xca>
          mem = 0;
 800f55c:	2300      	movs	r3, #0
 800f55e:	61bb      	str	r3, [r7, #24]
 800f560:	e001      	b.n	800f566 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800f562:	2300      	movs	r3, #0
 800f564:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f566:	69bb      	ldr	r3, [r7, #24]
 800f568:	2b01      	cmp	r3, #1
 800f56a:	d110      	bne.n	800f58e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800f570:	687a      	ldr	r2, [r7, #4]
 800f572:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800f574:	9202      	str	r2, [sp, #8]
 800f576:	9301      	str	r3, [sp, #4]
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	9300      	str	r3, [sp, #0]
 800f57c:	68bb      	ldr	r3, [r7, #8]
 800f57e:	6a3a      	ldr	r2, [r7, #32]
 800f580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f582:	68f8      	ldr	r0, [r7, #12]
 800f584:	f001 fba6 	bl	8010cd4 <xTaskCreateStatic>
 800f588:	4603      	mov	r3, r0
 800f58a:	613b      	str	r3, [r7, #16]
 800f58c:	e013      	b.n	800f5b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d110      	bne.n	800f5b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800f594:	6a3b      	ldr	r3, [r7, #32]
 800f596:	b29a      	uxth	r2, r3
 800f598:	f107 0310 	add.w	r3, r7, #16
 800f59c:	9301      	str	r3, [sp, #4]
 800f59e:	69fb      	ldr	r3, [r7, #28]
 800f5a0:	9300      	str	r3, [sp, #0]
 800f5a2:	68bb      	ldr	r3, [r7, #8]
 800f5a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	f001 fbf4 	bl	8010d94 <xTaskCreate>
 800f5ac:	4603      	mov	r3, r0
 800f5ae:	2b01      	cmp	r3, #1
 800f5b0:	d001      	beq.n	800f5b6 <osThreadNew+0x11a>
            hTask = NULL;
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800f5b6:	693b      	ldr	r3, [r7, #16]
}
 800f5b8:	4618      	mov	r0, r3
 800f5ba:	3728      	adds	r7, #40	@ 0x28
 800f5bc:	46bd      	mov	sp, r7
 800f5be:	bd80      	pop	{r7, pc}

0800f5c0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b08a      	sub	sp, #40	@ 0x28
 800f5c4:	af02      	add	r7, sp, #8
 800f5c6:	60f8      	str	r0, [r7, #12]
 800f5c8:	60b9      	str	r1, [r7, #8]
 800f5ca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f5d0:	f3ef 8305 	mrs	r3, IPSR
 800f5d4:	613b      	str	r3, [r7, #16]
  return(result);
 800f5d6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	d175      	bne.n	800f6c8 <osSemaphoreNew+0x108>
 800f5dc:	68fb      	ldr	r3, [r7, #12]
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d072      	beq.n	800f6c8 <osSemaphoreNew+0x108>
 800f5e2:	68ba      	ldr	r2, [r7, #8]
 800f5e4:	68fb      	ldr	r3, [r7, #12]
 800f5e6:	429a      	cmp	r2, r3
 800f5e8:	d86e      	bhi.n	800f6c8 <osSemaphoreNew+0x108>
    mem = -1;
 800f5ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f5ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d015      	beq.n	800f622 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	689b      	ldr	r3, [r3, #8]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d006      	beq.n	800f60c <osSemaphoreNew+0x4c>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	68db      	ldr	r3, [r3, #12]
 800f602:	2b4f      	cmp	r3, #79	@ 0x4f
 800f604:	d902      	bls.n	800f60c <osSemaphoreNew+0x4c>
        mem = 1;
 800f606:	2301      	movs	r3, #1
 800f608:	61bb      	str	r3, [r7, #24]
 800f60a:	e00c      	b.n	800f626 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	689b      	ldr	r3, [r3, #8]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d108      	bne.n	800f626 <osSemaphoreNew+0x66>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	68db      	ldr	r3, [r3, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d104      	bne.n	800f626 <osSemaphoreNew+0x66>
          mem = 0;
 800f61c:	2300      	movs	r3, #0
 800f61e:	61bb      	str	r3, [r7, #24]
 800f620:	e001      	b.n	800f626 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800f622:	2300      	movs	r3, #0
 800f624:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800f626:	69bb      	ldr	r3, [r7, #24]
 800f628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f62c:	d04c      	beq.n	800f6c8 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	2b01      	cmp	r3, #1
 800f632:	d128      	bne.n	800f686 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	2b01      	cmp	r3, #1
 800f638:	d10a      	bne.n	800f650 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	689b      	ldr	r3, [r3, #8]
 800f63e:	2203      	movs	r2, #3
 800f640:	9200      	str	r2, [sp, #0]
 800f642:	2200      	movs	r2, #0
 800f644:	2100      	movs	r1, #0
 800f646:	2001      	movs	r0, #1
 800f648:	f000 fb82 	bl	800fd50 <xQueueGenericCreateStatic>
 800f64c:	61f8      	str	r0, [r7, #28]
 800f64e:	e005      	b.n	800f65c <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800f650:	2203      	movs	r2, #3
 800f652:	2100      	movs	r1, #0
 800f654:	2001      	movs	r0, #1
 800f656:	f000 fbf8 	bl	800fe4a <xQueueGenericCreate>
 800f65a:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d022      	beq.n	800f6a8 <osSemaphoreNew+0xe8>
 800f662:	68bb      	ldr	r3, [r7, #8]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d01f      	beq.n	800f6a8 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f668:	2300      	movs	r3, #0
 800f66a:	2200      	movs	r2, #0
 800f66c:	2100      	movs	r1, #0
 800f66e:	69f8      	ldr	r0, [r7, #28]
 800f670:	f000 fcb8 	bl	800ffe4 <xQueueGenericSend>
 800f674:	4603      	mov	r3, r0
 800f676:	2b01      	cmp	r3, #1
 800f678:	d016      	beq.n	800f6a8 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800f67a:	69f8      	ldr	r0, [r7, #28]
 800f67c:	f001 f956 	bl	801092c <vQueueDelete>
            hSemaphore = NULL;
 800f680:	2300      	movs	r3, #0
 800f682:	61fb      	str	r3, [r7, #28]
 800f684:	e010      	b.n	800f6a8 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800f686:	69bb      	ldr	r3, [r7, #24]
 800f688:	2b01      	cmp	r3, #1
 800f68a:	d108      	bne.n	800f69e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	689b      	ldr	r3, [r3, #8]
 800f690:	461a      	mov	r2, r3
 800f692:	68b9      	ldr	r1, [r7, #8]
 800f694:	68f8      	ldr	r0, [r7, #12]
 800f696:	f000 fc36 	bl	800ff06 <xQueueCreateCountingSemaphoreStatic>
 800f69a:	61f8      	str	r0, [r7, #28]
 800f69c:	e004      	b.n	800f6a8 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800f69e:	68b9      	ldr	r1, [r7, #8]
 800f6a0:	68f8      	ldr	r0, [r7, #12]
 800f6a2:	f000 fc69 	bl	800ff78 <xQueueCreateCountingSemaphore>
 800f6a6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800f6a8:	69fb      	ldr	r3, [r7, #28]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d00c      	beq.n	800f6c8 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800f6ae:	687b      	ldr	r3, [r7, #4]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d003      	beq.n	800f6bc <osSemaphoreNew+0xfc>
          name = attr->name;
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	617b      	str	r3, [r7, #20]
 800f6ba:	e001      	b.n	800f6c0 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800f6bc:	2300      	movs	r3, #0
 800f6be:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800f6c0:	6979      	ldr	r1, [r7, #20]
 800f6c2:	69f8      	ldr	r0, [r7, #28]
 800f6c4:	f001 fa7e 	bl	8010bc4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800f6c8:	69fb      	ldr	r3, [r7, #28]
}
 800f6ca:	4618      	mov	r0, r3
 800f6cc:	3720      	adds	r7, #32
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	bd80      	pop	{r7, pc}
	...

0800f6d4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d103      	bne.n	800f6f4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800f6ec:	f06f 0303 	mvn.w	r3, #3
 800f6f0:	617b      	str	r3, [r7, #20]
 800f6f2:	e039      	b.n	800f768 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f6f4:	f3ef 8305 	mrs	r3, IPSR
 800f6f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800f6fa:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d022      	beq.n	800f746 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d003      	beq.n	800f70e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800f706:	f06f 0303 	mvn.w	r3, #3
 800f70a:	617b      	str	r3, [r7, #20]
 800f70c:	e02c      	b.n	800f768 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800f70e:	2300      	movs	r3, #0
 800f710:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800f712:	f107 0308 	add.w	r3, r7, #8
 800f716:	461a      	mov	r2, r3
 800f718:	2100      	movs	r1, #0
 800f71a:	6938      	ldr	r0, [r7, #16]
 800f71c:	f001 f884 	bl	8010828 <xQueueReceiveFromISR>
 800f720:	4603      	mov	r3, r0
 800f722:	2b01      	cmp	r3, #1
 800f724:	d003      	beq.n	800f72e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800f726:	f06f 0302 	mvn.w	r3, #2
 800f72a:	617b      	str	r3, [r7, #20]
 800f72c:	e01c      	b.n	800f768 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800f72e:	68bb      	ldr	r3, [r7, #8]
 800f730:	2b00      	cmp	r3, #0
 800f732:	d019      	beq.n	800f768 <osSemaphoreAcquire+0x94>
 800f734:	4b0f      	ldr	r3, [pc, #60]	@ (800f774 <osSemaphoreAcquire+0xa0>)
 800f736:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f73a:	601a      	str	r2, [r3, #0]
 800f73c:	f3bf 8f4f 	dsb	sy
 800f740:	f3bf 8f6f 	isb	sy
 800f744:	e010      	b.n	800f768 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	6938      	ldr	r0, [r7, #16]
 800f74a:	f000 ff5d 	bl	8010608 <xQueueSemaphoreTake>
 800f74e:	4603      	mov	r3, r0
 800f750:	2b01      	cmp	r3, #1
 800f752:	d009      	beq.n	800f768 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2b00      	cmp	r3, #0
 800f758:	d003      	beq.n	800f762 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800f75a:	f06f 0301 	mvn.w	r3, #1
 800f75e:	617b      	str	r3, [r7, #20]
 800f760:	e002      	b.n	800f768 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800f762:	f06f 0302 	mvn.w	r3, #2
 800f766:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800f768:	697b      	ldr	r3, [r7, #20]
}
 800f76a:	4618      	mov	r0, r3
 800f76c:	3718      	adds	r7, #24
 800f76e:	46bd      	mov	sp, r7
 800f770:	bd80      	pop	{r7, pc}
 800f772:	bf00      	nop
 800f774:	e000ed04 	.word	0xe000ed04

0800f778 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800f778:	b580      	push	{r7, lr}
 800f77a:	b086      	sub	sp, #24
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800f784:	2300      	movs	r3, #0
 800f786:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800f788:	693b      	ldr	r3, [r7, #16]
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d103      	bne.n	800f796 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800f78e:	f06f 0303 	mvn.w	r3, #3
 800f792:	617b      	str	r3, [r7, #20]
 800f794:	e02c      	b.n	800f7f0 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f796:	f3ef 8305 	mrs	r3, IPSR
 800f79a:	60fb      	str	r3, [r7, #12]
  return(result);
 800f79c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d01a      	beq.n	800f7d8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800f7a6:	f107 0308 	add.w	r3, r7, #8
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6938      	ldr	r0, [r7, #16]
 800f7ae:	f000 fdb9 	bl	8010324 <xQueueGiveFromISR>
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d003      	beq.n	800f7c0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800f7b8:	f06f 0302 	mvn.w	r3, #2
 800f7bc:	617b      	str	r3, [r7, #20]
 800f7be:	e017      	b.n	800f7f0 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800f7c0:	68bb      	ldr	r3, [r7, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d014      	beq.n	800f7f0 <osSemaphoreRelease+0x78>
 800f7c6:	4b0d      	ldr	r3, [pc, #52]	@ (800f7fc <osSemaphoreRelease+0x84>)
 800f7c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f7cc:	601a      	str	r2, [r3, #0]
 800f7ce:	f3bf 8f4f 	dsb	sy
 800f7d2:	f3bf 8f6f 	isb	sy
 800f7d6:	e00b      	b.n	800f7f0 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800f7d8:	2300      	movs	r3, #0
 800f7da:	2200      	movs	r2, #0
 800f7dc:	2100      	movs	r1, #0
 800f7de:	6938      	ldr	r0, [r7, #16]
 800f7e0:	f000 fc00 	bl	800ffe4 <xQueueGenericSend>
 800f7e4:	4603      	mov	r3, r0
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	d002      	beq.n	800f7f0 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800f7ea:	f06f 0302 	mvn.w	r3, #2
 800f7ee:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800f7f0:	697b      	ldr	r3, [r7, #20]
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3718      	adds	r7, #24
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	e000ed04 	.word	0xe000ed04

0800f800 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800f800:	b580      	push	{r7, lr}
 800f802:	b086      	sub	sp, #24
 800f804:	af00      	add	r7, sp, #0
 800f806:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f80c:	f3ef 8305 	mrs	r3, IPSR
 800f810:	60fb      	str	r3, [r7, #12]
  return(result);
 800f812:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800f814:	2b00      	cmp	r3, #0
 800f816:	d003      	beq.n	800f820 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800f818:	f06f 0305 	mvn.w	r3, #5
 800f81c:	617b      	str	r3, [r7, #20]
 800f81e:	e00e      	b.n	800f83e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d103      	bne.n	800f82e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800f826:	f06f 0303 	mvn.w	r3, #3
 800f82a:	617b      	str	r3, [r7, #20]
 800f82c:	e007      	b.n	800f83e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800f82e:	6938      	ldr	r0, [r7, #16]
 800f830:	f001 f9f2 	bl	8010c18 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800f834:	2300      	movs	r3, #0
 800f836:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800f838:	6938      	ldr	r0, [r7, #16]
 800f83a:	f001 f877 	bl	801092c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800f83e:	697b      	ldr	r3, [r7, #20]
}
 800f840:	4618      	mov	r0, r3
 800f842:	3718      	adds	r7, #24
 800f844:	46bd      	mov	sp, r7
 800f846:	bd80      	pop	{r7, pc}

0800f848 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800f848:	b580      	push	{r7, lr}
 800f84a:	b08a      	sub	sp, #40	@ 0x28
 800f84c:	af02      	add	r7, sp, #8
 800f84e:	60f8      	str	r0, [r7, #12]
 800f850:	60b9      	str	r1, [r7, #8]
 800f852:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800f854:	2300      	movs	r3, #0
 800f856:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f858:	f3ef 8305 	mrs	r3, IPSR
 800f85c:	613b      	str	r3, [r7, #16]
  return(result);
 800f85e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800f860:	2b00      	cmp	r3, #0
 800f862:	d15f      	bne.n	800f924 <osMessageQueueNew+0xdc>
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2b00      	cmp	r3, #0
 800f868:	d05c      	beq.n	800f924 <osMessageQueueNew+0xdc>
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d059      	beq.n	800f924 <osMessageQueueNew+0xdc>
    mem = -1;
 800f870:	f04f 33ff 	mov.w	r3, #4294967295
 800f874:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d029      	beq.n	800f8d0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	689b      	ldr	r3, [r3, #8]
 800f880:	2b00      	cmp	r3, #0
 800f882:	d012      	beq.n	800f8aa <osMessageQueueNew+0x62>
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	68db      	ldr	r3, [r3, #12]
 800f888:	2b4f      	cmp	r3, #79	@ 0x4f
 800f88a:	d90e      	bls.n	800f8aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800f890:	2b00      	cmp	r3, #0
 800f892:	d00a      	beq.n	800f8aa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	695a      	ldr	r2, [r3, #20]
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	68b9      	ldr	r1, [r7, #8]
 800f89c:	fb01 f303 	mul.w	r3, r1, r3
 800f8a0:	429a      	cmp	r2, r3
 800f8a2:	d302      	bcc.n	800f8aa <osMessageQueueNew+0x62>
        mem = 1;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	61bb      	str	r3, [r7, #24]
 800f8a8:	e014      	b.n	800f8d4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	689b      	ldr	r3, [r3, #8]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	d110      	bne.n	800f8d4 <osMessageQueueNew+0x8c>
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	68db      	ldr	r3, [r3, #12]
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d10c      	bne.n	800f8d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d108      	bne.n	800f8d4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	695b      	ldr	r3, [r3, #20]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d104      	bne.n	800f8d4 <osMessageQueueNew+0x8c>
          mem = 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	61bb      	str	r3, [r7, #24]
 800f8ce:	e001      	b.n	800f8d4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800f8d4:	69bb      	ldr	r3, [r7, #24]
 800f8d6:	2b01      	cmp	r3, #1
 800f8d8:	d10b      	bne.n	800f8f2 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	691a      	ldr	r2, [r3, #16]
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	689b      	ldr	r3, [r3, #8]
 800f8e2:	2100      	movs	r1, #0
 800f8e4:	9100      	str	r1, [sp, #0]
 800f8e6:	68b9      	ldr	r1, [r7, #8]
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f000 fa31 	bl	800fd50 <xQueueGenericCreateStatic>
 800f8ee:	61f8      	str	r0, [r7, #28]
 800f8f0:	e008      	b.n	800f904 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800f8f2:	69bb      	ldr	r3, [r7, #24]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d105      	bne.n	800f904 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	68b9      	ldr	r1, [r7, #8]
 800f8fc:	68f8      	ldr	r0, [r7, #12]
 800f8fe:	f000 faa4 	bl	800fe4a <xQueueGenericCreate>
 800f902:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800f904:	69fb      	ldr	r3, [r7, #28]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d00c      	beq.n	800f924 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d003      	beq.n	800f918 <osMessageQueueNew+0xd0>
        name = attr->name;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	617b      	str	r3, [r7, #20]
 800f916:	e001      	b.n	800f91c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800f918:	2300      	movs	r3, #0
 800f91a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800f91c:	6979      	ldr	r1, [r7, #20]
 800f91e:	69f8      	ldr	r0, [r7, #28]
 800f920:	f001 f950 	bl	8010bc4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800f924:	69fb      	ldr	r3, [r7, #28]
}
 800f926:	4618      	mov	r0, r3
 800f928:	3720      	adds	r7, #32
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd80      	pop	{r7, pc}
	...

0800f930 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af00      	add	r7, sp, #0
 800f936:	60f8      	str	r0, [r7, #12]
 800f938:	60b9      	str	r1, [r7, #8]
 800f93a:	603b      	str	r3, [r7, #0]
 800f93c:	4613      	mov	r3, r2
 800f93e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800f944:	2300      	movs	r3, #0
 800f946:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f948:	f3ef 8305 	mrs	r3, IPSR
 800f94c:	617b      	str	r3, [r7, #20]
  return(result);
 800f94e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800f950:	2b00      	cmp	r3, #0
 800f952:	d028      	beq.n	800f9a6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800f954:	69bb      	ldr	r3, [r7, #24]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d005      	beq.n	800f966 <osMessageQueuePut+0x36>
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d002      	beq.n	800f966 <osMessageQueuePut+0x36>
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d003      	beq.n	800f96e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800f966:	f06f 0303 	mvn.w	r3, #3
 800f96a:	61fb      	str	r3, [r7, #28]
 800f96c:	e038      	b.n	800f9e0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800f96e:	2300      	movs	r3, #0
 800f970:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800f972:	f107 0210 	add.w	r2, r7, #16
 800f976:	2300      	movs	r3, #0
 800f978:	68b9      	ldr	r1, [r7, #8]
 800f97a:	69b8      	ldr	r0, [r7, #24]
 800f97c:	f000 fc34 	bl	80101e8 <xQueueGenericSendFromISR>
 800f980:	4603      	mov	r3, r0
 800f982:	2b01      	cmp	r3, #1
 800f984:	d003      	beq.n	800f98e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800f986:	f06f 0302 	mvn.w	r3, #2
 800f98a:	61fb      	str	r3, [r7, #28]
 800f98c:	e028      	b.n	800f9e0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d025      	beq.n	800f9e0 <osMessageQueuePut+0xb0>
 800f994:	4b15      	ldr	r3, [pc, #84]	@ (800f9ec <osMessageQueuePut+0xbc>)
 800f996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f99a:	601a      	str	r2, [r3, #0]
 800f99c:	f3bf 8f4f 	dsb	sy
 800f9a0:	f3bf 8f6f 	isb	sy
 800f9a4:	e01c      	b.n	800f9e0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800f9a6:	69bb      	ldr	r3, [r7, #24]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d002      	beq.n	800f9b2 <osMessageQueuePut+0x82>
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d103      	bne.n	800f9ba <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800f9b2:	f06f 0303 	mvn.w	r3, #3
 800f9b6:	61fb      	str	r3, [r7, #28]
 800f9b8:	e012      	b.n	800f9e0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	683a      	ldr	r2, [r7, #0]
 800f9be:	68b9      	ldr	r1, [r7, #8]
 800f9c0:	69b8      	ldr	r0, [r7, #24]
 800f9c2:	f000 fb0f 	bl	800ffe4 <xQueueGenericSend>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	2b01      	cmp	r3, #1
 800f9ca:	d009      	beq.n	800f9e0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	d003      	beq.n	800f9da <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800f9d2:	f06f 0301 	mvn.w	r3, #1
 800f9d6:	61fb      	str	r3, [r7, #28]
 800f9d8:	e002      	b.n	800f9e0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800f9da:	f06f 0302 	mvn.w	r3, #2
 800f9de:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800f9e0:	69fb      	ldr	r3, [r7, #28]
}
 800f9e2:	4618      	mov	r0, r3
 800f9e4:	3720      	adds	r7, #32
 800f9e6:	46bd      	mov	sp, r7
 800f9e8:	bd80      	pop	{r7, pc}
 800f9ea:	bf00      	nop
 800f9ec:	e000ed04 	.word	0xe000ed04

0800f9f0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b088      	sub	sp, #32
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	60f8      	str	r0, [r7, #12]
 800f9f8:	60b9      	str	r1, [r7, #8]
 800f9fa:	607a      	str	r2, [r7, #4]
 800f9fc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800fa02:	2300      	movs	r3, #0
 800fa04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800fa06:	f3ef 8305 	mrs	r3, IPSR
 800fa0a:	617b      	str	r3, [r7, #20]
  return(result);
 800fa0c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d028      	beq.n	800fa64 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d005      	beq.n	800fa24 <osMessageQueueGet+0x34>
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d002      	beq.n	800fa24 <osMessageQueueGet+0x34>
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d003      	beq.n	800fa2c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800fa24:	f06f 0303 	mvn.w	r3, #3
 800fa28:	61fb      	str	r3, [r7, #28]
 800fa2a:	e037      	b.n	800fa9c <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800fa30:	f107 0310 	add.w	r3, r7, #16
 800fa34:	461a      	mov	r2, r3
 800fa36:	68b9      	ldr	r1, [r7, #8]
 800fa38:	69b8      	ldr	r0, [r7, #24]
 800fa3a:	f000 fef5 	bl	8010828 <xQueueReceiveFromISR>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	2b01      	cmp	r3, #1
 800fa42:	d003      	beq.n	800fa4c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800fa44:	f06f 0302 	mvn.w	r3, #2
 800fa48:	61fb      	str	r3, [r7, #28]
 800fa4a:	e027      	b.n	800fa9c <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800fa4c:	693b      	ldr	r3, [r7, #16]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d024      	beq.n	800fa9c <osMessageQueueGet+0xac>
 800fa52:	4b15      	ldr	r3, [pc, #84]	@ (800faa8 <osMessageQueueGet+0xb8>)
 800fa54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fa58:	601a      	str	r2, [r3, #0]
 800fa5a:	f3bf 8f4f 	dsb	sy
 800fa5e:	f3bf 8f6f 	isb	sy
 800fa62:	e01b      	b.n	800fa9c <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800fa64:	69bb      	ldr	r3, [r7, #24]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d002      	beq.n	800fa70 <osMessageQueueGet+0x80>
 800fa6a:	68bb      	ldr	r3, [r7, #8]
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d103      	bne.n	800fa78 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800fa70:	f06f 0303 	mvn.w	r3, #3
 800fa74:	61fb      	str	r3, [r7, #28]
 800fa76:	e011      	b.n	800fa9c <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800fa78:	683a      	ldr	r2, [r7, #0]
 800fa7a:	68b9      	ldr	r1, [r7, #8]
 800fa7c:	69b8      	ldr	r0, [r7, #24]
 800fa7e:	f000 fce1 	bl	8010444 <xQueueReceive>
 800fa82:	4603      	mov	r3, r0
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d009      	beq.n	800fa9c <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800fa88:	683b      	ldr	r3, [r7, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d003      	beq.n	800fa96 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800fa8e:	f06f 0301 	mvn.w	r3, #1
 800fa92:	61fb      	str	r3, [r7, #28]
 800fa94:	e002      	b.n	800fa9c <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800fa96:	f06f 0302 	mvn.w	r3, #2
 800fa9a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800fa9c:	69fb      	ldr	r3, [r7, #28]
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	3720      	adds	r7, #32
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	e000ed04 	.word	0xe000ed04

0800faac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800faac:	b480      	push	{r7}
 800faae:	b085      	sub	sp, #20
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800fab8:	68fb      	ldr	r3, [r7, #12]
 800faba:	4a07      	ldr	r2, [pc, #28]	@ (800fad8 <vApplicationGetIdleTaskMemory+0x2c>)
 800fabc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800fabe:	68bb      	ldr	r3, [r7, #8]
 800fac0:	4a06      	ldr	r2, [pc, #24]	@ (800fadc <vApplicationGetIdleTaskMemory+0x30>)
 800fac2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	2280      	movs	r2, #128	@ 0x80
 800fac8:	601a      	str	r2, [r3, #0]
}
 800faca:	bf00      	nop
 800facc:	3714      	adds	r7, #20
 800face:	46bd      	mov	sp, r7
 800fad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fad4:	4770      	bx	lr
 800fad6:	bf00      	nop
 800fad8:	2000232c 	.word	0x2000232c
 800fadc:	20002388 	.word	0x20002388

0800fae0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800fae0:	b480      	push	{r7}
 800fae2:	b085      	sub	sp, #20
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	4a07      	ldr	r2, [pc, #28]	@ (800fb0c <vApplicationGetTimerTaskMemory+0x2c>)
 800faf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800faf2:	68bb      	ldr	r3, [r7, #8]
 800faf4:	4a06      	ldr	r2, [pc, #24]	@ (800fb10 <vApplicationGetTimerTaskMemory+0x30>)
 800faf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800fafe:	601a      	str	r2, [r3, #0]
}
 800fb00:	bf00      	nop
 800fb02:	3714      	adds	r7, #20
 800fb04:	46bd      	mov	sp, r7
 800fb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb0a:	4770      	bx	lr
 800fb0c:	20002588 	.word	0x20002588
 800fb10:	200025e4 	.word	0x200025e4

0800fb14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800fb14:	b480      	push	{r7}
 800fb16:	b083      	sub	sp, #12
 800fb18:	af00      	add	r7, sp, #0
 800fb1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f103 0208 	add.w	r2, r3, #8
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f04f 32ff 	mov.w	r2, #4294967295
 800fb2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f103 0208 	add.w	r2, r3, #8
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	f103 0208 	add.w	r2, r3, #8
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2200      	movs	r2, #0
 800fb46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800fb48:	bf00      	nop
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800fb62:	bf00      	nop
 800fb64:	370c      	adds	r7, #12
 800fb66:	46bd      	mov	sp, r7
 800fb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb6c:	4770      	bx	lr

0800fb6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fb6e:	b480      	push	{r7}
 800fb70:	b085      	sub	sp, #20
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	685b      	ldr	r3, [r3, #4]
 800fb7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	68fa      	ldr	r2, [r7, #12]
 800fb82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	689a      	ldr	r2, [r3, #8]
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	683a      	ldr	r2, [r7, #0]
 800fb92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800fb94:	68fb      	ldr	r3, [r7, #12]
 800fb96:	683a      	ldr	r2, [r7, #0]
 800fb98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800fb9a:	683b      	ldr	r3, [r7, #0]
 800fb9c:	687a      	ldr	r2, [r7, #4]
 800fb9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	1c5a      	adds	r2, r3, #1
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	601a      	str	r2, [r3, #0]
}
 800fbaa:	bf00      	nop
 800fbac:	3714      	adds	r7, #20
 800fbae:	46bd      	mov	sp, r7
 800fbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb4:	4770      	bx	lr

0800fbb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800fbb6:	b480      	push	{r7}
 800fbb8:	b085      	sub	sp, #20
 800fbba:	af00      	add	r7, sp, #0
 800fbbc:	6078      	str	r0, [r7, #4]
 800fbbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800fbc0:	683b      	ldr	r3, [r7, #0]
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbcc:	d103      	bne.n	800fbd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	691b      	ldr	r3, [r3, #16]
 800fbd2:	60fb      	str	r3, [r7, #12]
 800fbd4:	e00c      	b.n	800fbf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	3308      	adds	r3, #8
 800fbda:	60fb      	str	r3, [r7, #12]
 800fbdc:	e002      	b.n	800fbe4 <vListInsert+0x2e>
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	685b      	ldr	r3, [r3, #4]
 800fbe2:	60fb      	str	r3, [r7, #12]
 800fbe4:	68fb      	ldr	r3, [r7, #12]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	68ba      	ldr	r2, [r7, #8]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d2f6      	bcs.n	800fbde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	685a      	ldr	r2, [r3, #4]
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800fbf8:	683b      	ldr	r3, [r7, #0]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	683a      	ldr	r2, [r7, #0]
 800fbfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800fc00:	683b      	ldr	r3, [r7, #0]
 800fc02:	68fa      	ldr	r2, [r7, #12]
 800fc04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	683a      	ldr	r2, [r7, #0]
 800fc0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	687a      	ldr	r2, [r7, #4]
 800fc10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	1c5a      	adds	r2, r3, #1
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	601a      	str	r2, [r3, #0]
}
 800fc1c:	bf00      	nop
 800fc1e:	3714      	adds	r7, #20
 800fc20:	46bd      	mov	sp, r7
 800fc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc26:	4770      	bx	lr

0800fc28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800fc28:	b480      	push	{r7}
 800fc2a:	b085      	sub	sp, #20
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	691b      	ldr	r3, [r3, #16]
 800fc34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	685b      	ldr	r3, [r3, #4]
 800fc3a:	687a      	ldr	r2, [r7, #4]
 800fc3c:	6892      	ldr	r2, [r2, #8]
 800fc3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	689b      	ldr	r3, [r3, #8]
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	6852      	ldr	r2, [r2, #4]
 800fc48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	685b      	ldr	r3, [r3, #4]
 800fc4e:	687a      	ldr	r2, [r7, #4]
 800fc50:	429a      	cmp	r2, r3
 800fc52:	d103      	bne.n	800fc5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	689a      	ldr	r2, [r3, #8]
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	2200      	movs	r2, #0
 800fc60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	1e5a      	subs	r2, r3, #1
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	681b      	ldr	r3, [r3, #0]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3714      	adds	r7, #20
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b084      	sub	sp, #16
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800fc8a:	68fb      	ldr	r3, [r7, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d10b      	bne.n	800fca8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800fc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc94:	f383 8811 	msr	BASEPRI, r3
 800fc98:	f3bf 8f6f 	isb	sy
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800fca2:	bf00      	nop
 800fca4:	bf00      	nop
 800fca6:	e7fd      	b.n	800fca4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800fca8:	f002 fc76 	bl	8012598 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcb4:	68f9      	ldr	r1, [r7, #12]
 800fcb6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fcb8:	fb01 f303 	mul.w	r3, r1, r3
 800fcbc:	441a      	add	r2, r3
 800fcbe:	68fb      	ldr	r3, [r7, #12]
 800fcc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800fcc2:	68fb      	ldr	r3, [r7, #12]
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	681a      	ldr	r2, [r3, #0]
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fcd8:	3b01      	subs	r3, #1
 800fcda:	68f9      	ldr	r1, [r7, #12]
 800fcdc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800fcde:	fb01 f303 	mul.w	r3, r1, r3
 800fce2:	441a      	add	r2, r3
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	22ff      	movs	r2, #255	@ 0xff
 800fcec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	22ff      	movs	r2, #255	@ 0xff
 800fcf4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800fcf8:	683b      	ldr	r3, [r7, #0]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d114      	bne.n	800fd28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	691b      	ldr	r3, [r3, #16]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	d01a      	beq.n	800fd3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	3310      	adds	r3, #16
 800fd0a:	4618      	mov	r0, r3
 800fd0c:	f001 fc16 	bl	801153c <xTaskRemoveFromEventList>
 800fd10:	4603      	mov	r3, r0
 800fd12:	2b00      	cmp	r3, #0
 800fd14:	d012      	beq.n	800fd3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800fd16:	4b0d      	ldr	r3, [pc, #52]	@ (800fd4c <xQueueGenericReset+0xd0>)
 800fd18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800fd1c:	601a      	str	r2, [r3, #0]
 800fd1e:	f3bf 8f4f 	dsb	sy
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	e009      	b.n	800fd3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	3310      	adds	r3, #16
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff fef1 	bl	800fb14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800fd32:	68fb      	ldr	r3, [r7, #12]
 800fd34:	3324      	adds	r3, #36	@ 0x24
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7ff feec 	bl	800fb14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800fd3c:	f002 fc5e 	bl	80125fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800fd40:	2301      	movs	r3, #1
}
 800fd42:	4618      	mov	r0, r3
 800fd44:	3710      	adds	r7, #16
 800fd46:	46bd      	mov	sp, r7
 800fd48:	bd80      	pop	{r7, pc}
 800fd4a:	bf00      	nop
 800fd4c:	e000ed04 	.word	0xe000ed04

0800fd50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08e      	sub	sp, #56	@ 0x38
 800fd54:	af02      	add	r7, sp, #8
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
 800fd5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10b      	bne.n	800fd7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800fd64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd68:	f383 8811 	msr	BASEPRI, r3
 800fd6c:	f3bf 8f6f 	isb	sy
 800fd70:	f3bf 8f4f 	dsb	sy
 800fd74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800fd76:	bf00      	nop
 800fd78:	bf00      	nop
 800fd7a:	e7fd      	b.n	800fd78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800fd7c:	683b      	ldr	r3, [r7, #0]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d10b      	bne.n	800fd9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800fd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd86:	f383 8811 	msr	BASEPRI, r3
 800fd8a:	f3bf 8f6f 	isb	sy
 800fd8e:	f3bf 8f4f 	dsb	sy
 800fd92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800fd94:	bf00      	nop
 800fd96:	bf00      	nop
 800fd98:	e7fd      	b.n	800fd96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d002      	beq.n	800fda6 <xQueueGenericCreateStatic+0x56>
 800fda0:	68bb      	ldr	r3, [r7, #8]
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <xQueueGenericCreateStatic+0x5a>
 800fda6:	2301      	movs	r3, #1
 800fda8:	e000      	b.n	800fdac <xQueueGenericCreateStatic+0x5c>
 800fdaa:	2300      	movs	r3, #0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10b      	bne.n	800fdc8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fdb4:	f383 8811 	msr	BASEPRI, r3
 800fdb8:	f3bf 8f6f 	isb	sy
 800fdbc:	f3bf 8f4f 	dsb	sy
 800fdc0:	623b      	str	r3, [r7, #32]
}
 800fdc2:	bf00      	nop
 800fdc4:	bf00      	nop
 800fdc6:	e7fd      	b.n	800fdc4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d102      	bne.n	800fdd4 <xQueueGenericCreateStatic+0x84>
 800fdce:	68bb      	ldr	r3, [r7, #8]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d101      	bne.n	800fdd8 <xQueueGenericCreateStatic+0x88>
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	e000      	b.n	800fdda <xQueueGenericCreateStatic+0x8a>
 800fdd8:	2300      	movs	r3, #0
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d10b      	bne.n	800fdf6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fde2:	f383 8811 	msr	BASEPRI, r3
 800fde6:	f3bf 8f6f 	isb	sy
 800fdea:	f3bf 8f4f 	dsb	sy
 800fdee:	61fb      	str	r3, [r7, #28]
}
 800fdf0:	bf00      	nop
 800fdf2:	bf00      	nop
 800fdf4:	e7fd      	b.n	800fdf2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800fdf6:	2350      	movs	r3, #80	@ 0x50
 800fdf8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800fdfa:	697b      	ldr	r3, [r7, #20]
 800fdfc:	2b50      	cmp	r3, #80	@ 0x50
 800fdfe:	d00b      	beq.n	800fe18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800fe00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	61bb      	str	r3, [r7, #24]
}
 800fe12:	bf00      	nop
 800fe14:	bf00      	nop
 800fe16:	e7fd      	b.n	800fe14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800fe18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800fe1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d00d      	beq.n	800fe40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fe24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe26:	2201      	movs	r2, #1
 800fe28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fe2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800fe30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe32:	9300      	str	r3, [sp, #0]
 800fe34:	4613      	mov	r3, r2
 800fe36:	687a      	ldr	r2, [r7, #4]
 800fe38:	68b9      	ldr	r1, [r7, #8]
 800fe3a:	68f8      	ldr	r0, [r7, #12]
 800fe3c:	f000 f840 	bl	800fec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fe40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800fe42:	4618      	mov	r0, r3
 800fe44:	3730      	adds	r7, #48	@ 0x30
 800fe46:	46bd      	mov	sp, r7
 800fe48:	bd80      	pop	{r7, pc}

0800fe4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fe4a:	b580      	push	{r7, lr}
 800fe4c:	b08a      	sub	sp, #40	@ 0x28
 800fe4e:	af02      	add	r7, sp, #8
 800fe50:	60f8      	str	r0, [r7, #12]
 800fe52:	60b9      	str	r1, [r7, #8]
 800fe54:	4613      	mov	r3, r2
 800fe56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10b      	bne.n	800fe76 <xQueueGenericCreate+0x2c>
	__asm volatile
 800fe5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe62:	f383 8811 	msr	BASEPRI, r3
 800fe66:	f3bf 8f6f 	isb	sy
 800fe6a:	f3bf 8f4f 	dsb	sy
 800fe6e:	613b      	str	r3, [r7, #16]
}
 800fe70:	bf00      	nop
 800fe72:	bf00      	nop
 800fe74:	e7fd      	b.n	800fe72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	68ba      	ldr	r2, [r7, #8]
 800fe7a:	fb02 f303 	mul.w	r3, r2, r3
 800fe7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fe80:	69fb      	ldr	r3, [r7, #28]
 800fe82:	3350      	adds	r3, #80	@ 0x50
 800fe84:	4618      	mov	r0, r3
 800fe86:	f002 fca9 	bl	80127dc <pvPortMalloc>
 800fe8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fe8c:	69bb      	ldr	r3, [r7, #24]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d011      	beq.n	800feb6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fe92:	69bb      	ldr	r3, [r7, #24]
 800fe94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	3350      	adds	r3, #80	@ 0x50
 800fe9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fea4:	79fa      	ldrb	r2, [r7, #7]
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	9300      	str	r3, [sp, #0]
 800feaa:	4613      	mov	r3, r2
 800feac:	697a      	ldr	r2, [r7, #20]
 800feae:	68b9      	ldr	r1, [r7, #8]
 800feb0:	68f8      	ldr	r0, [r7, #12]
 800feb2:	f000 f805 	bl	800fec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800feb6:	69bb      	ldr	r3, [r7, #24]
	}
 800feb8:	4618      	mov	r0, r3
 800feba:	3720      	adds	r7, #32
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b084      	sub	sp, #16
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	60f8      	str	r0, [r7, #12]
 800fec8:	60b9      	str	r1, [r7, #8]
 800feca:	607a      	str	r2, [r7, #4]
 800fecc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d103      	bne.n	800fedc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	69ba      	ldr	r2, [r7, #24]
 800fed8:	601a      	str	r2, [r3, #0]
 800feda:	e002      	b.n	800fee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fedc:	69bb      	ldr	r3, [r7, #24]
 800fede:	687a      	ldr	r2, [r7, #4]
 800fee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fee2:	69bb      	ldr	r3, [r7, #24]
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	68ba      	ldr	r2, [r7, #8]
 800feec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800feee:	2101      	movs	r1, #1
 800fef0:	69b8      	ldr	r0, [r7, #24]
 800fef2:	f7ff fec3 	bl	800fc7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	78fa      	ldrb	r2, [r7, #3]
 800fefa:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800fefe:	bf00      	nop
 800ff00:	3710      	adds	r7, #16
 800ff02:	46bd      	mov	sp, r7
 800ff04:	bd80      	pop	{r7, pc}

0800ff06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800ff06:	b580      	push	{r7, lr}
 800ff08:	b08a      	sub	sp, #40	@ 0x28
 800ff0a:	af02      	add	r7, sp, #8
 800ff0c:	60f8      	str	r0, [r7, #12]
 800ff0e:	60b9      	str	r1, [r7, #8]
 800ff10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10b      	bne.n	800ff30 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800ff18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff1c:	f383 8811 	msr	BASEPRI, r3
 800ff20:	f3bf 8f6f 	isb	sy
 800ff24:	f3bf 8f4f 	dsb	sy
 800ff28:	61bb      	str	r3, [r7, #24]
}
 800ff2a:	bf00      	nop
 800ff2c:	bf00      	nop
 800ff2e:	e7fd      	b.n	800ff2c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ff30:	68ba      	ldr	r2, [r7, #8]
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d90b      	bls.n	800ff50 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800ff38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff3c:	f383 8811 	msr	BASEPRI, r3
 800ff40:	f3bf 8f6f 	isb	sy
 800ff44:	f3bf 8f4f 	dsb	sy
 800ff48:	617b      	str	r3, [r7, #20]
}
 800ff4a:	bf00      	nop
 800ff4c:	bf00      	nop
 800ff4e:	e7fd      	b.n	800ff4c <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ff50:	2302      	movs	r3, #2
 800ff52:	9300      	str	r3, [sp, #0]
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2200      	movs	r2, #0
 800ff58:	2100      	movs	r1, #0
 800ff5a:	68f8      	ldr	r0, [r7, #12]
 800ff5c:	f7ff fef8 	bl	800fd50 <xQueueGenericCreateStatic>
 800ff60:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d002      	beq.n	800ff6e <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ff68:	69fb      	ldr	r3, [r7, #28]
 800ff6a:	68ba      	ldr	r2, [r7, #8]
 800ff6c:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ff6e:	69fb      	ldr	r3, [r7, #28]
	}
 800ff70:	4618      	mov	r0, r3
 800ff72:	3720      	adds	r7, #32
 800ff74:	46bd      	mov	sp, r7
 800ff76:	bd80      	pop	{r7, pc}

0800ff78 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800ff78:	b580      	push	{r7, lr}
 800ff7a:	b086      	sub	sp, #24
 800ff7c:	af00      	add	r7, sp, #0
 800ff7e:	6078      	str	r0, [r7, #4]
 800ff80:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d10b      	bne.n	800ffa0 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800ff88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff8c:	f383 8811 	msr	BASEPRI, r3
 800ff90:	f3bf 8f6f 	isb	sy
 800ff94:	f3bf 8f4f 	dsb	sy
 800ff98:	613b      	str	r3, [r7, #16]
}
 800ff9a:	bf00      	nop
 800ff9c:	bf00      	nop
 800ff9e:	e7fd      	b.n	800ff9c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ffa0:	683a      	ldr	r2, [r7, #0]
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d90b      	bls.n	800ffc0 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800ffa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffac:	f383 8811 	msr	BASEPRI, r3
 800ffb0:	f3bf 8f6f 	isb	sy
 800ffb4:	f3bf 8f4f 	dsb	sy
 800ffb8:	60fb      	str	r3, [r7, #12]
}
 800ffba:	bf00      	nop
 800ffbc:	bf00      	nop
 800ffbe:	e7fd      	b.n	800ffbc <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ffc0:	2202      	movs	r2, #2
 800ffc2:	2100      	movs	r1, #0
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff ff40 	bl	800fe4a <xQueueGenericCreate>
 800ffca:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d002      	beq.n	800ffd8 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ffd2:	697b      	ldr	r3, [r7, #20]
 800ffd4:	683a      	ldr	r2, [r7, #0]
 800ffd6:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800ffd8:	697b      	ldr	r3, [r7, #20]
	}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3718      	adds	r7, #24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	bd80      	pop	{r7, pc}
	...

0800ffe4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ffe4:	b580      	push	{r7, lr}
 800ffe6:	b08e      	sub	sp, #56	@ 0x38
 800ffe8:	af00      	add	r7, sp, #0
 800ffea:	60f8      	str	r0, [r7, #12]
 800ffec:	60b9      	str	r1, [r7, #8]
 800ffee:	607a      	str	r2, [r7, #4]
 800fff0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fff2:	2300      	movs	r3, #0
 800fff4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800fffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fffc:	2b00      	cmp	r3, #0
 800fffe:	d10b      	bne.n	8010018 <xQueueGenericSend+0x34>
	__asm volatile
 8010000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010004:	f383 8811 	msr	BASEPRI, r3
 8010008:	f3bf 8f6f 	isb	sy
 801000c:	f3bf 8f4f 	dsb	sy
 8010010:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010012:	bf00      	nop
 8010014:	bf00      	nop
 8010016:	e7fd      	b.n	8010014 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010018:	68bb      	ldr	r3, [r7, #8]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d103      	bne.n	8010026 <xQueueGenericSend+0x42>
 801001e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010022:	2b00      	cmp	r3, #0
 8010024:	d101      	bne.n	801002a <xQueueGenericSend+0x46>
 8010026:	2301      	movs	r3, #1
 8010028:	e000      	b.n	801002c <xQueueGenericSend+0x48>
 801002a:	2300      	movs	r3, #0
 801002c:	2b00      	cmp	r3, #0
 801002e:	d10b      	bne.n	8010048 <xQueueGenericSend+0x64>
	__asm volatile
 8010030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010034:	f383 8811 	msr	BASEPRI, r3
 8010038:	f3bf 8f6f 	isb	sy
 801003c:	f3bf 8f4f 	dsb	sy
 8010040:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010042:	bf00      	nop
 8010044:	bf00      	nop
 8010046:	e7fd      	b.n	8010044 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	2b02      	cmp	r3, #2
 801004c:	d103      	bne.n	8010056 <xQueueGenericSend+0x72>
 801004e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010052:	2b01      	cmp	r3, #1
 8010054:	d101      	bne.n	801005a <xQueueGenericSend+0x76>
 8010056:	2301      	movs	r3, #1
 8010058:	e000      	b.n	801005c <xQueueGenericSend+0x78>
 801005a:	2300      	movs	r3, #0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10b      	bne.n	8010078 <xQueueGenericSend+0x94>
	__asm volatile
 8010060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010064:	f383 8811 	msr	BASEPRI, r3
 8010068:	f3bf 8f6f 	isb	sy
 801006c:	f3bf 8f4f 	dsb	sy
 8010070:	623b      	str	r3, [r7, #32]
}
 8010072:	bf00      	nop
 8010074:	bf00      	nop
 8010076:	e7fd      	b.n	8010074 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010078:	f001 fc20 	bl	80118bc <xTaskGetSchedulerState>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d102      	bne.n	8010088 <xQueueGenericSend+0xa4>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	2b00      	cmp	r3, #0
 8010086:	d101      	bne.n	801008c <xQueueGenericSend+0xa8>
 8010088:	2301      	movs	r3, #1
 801008a:	e000      	b.n	801008e <xQueueGenericSend+0xaa>
 801008c:	2300      	movs	r3, #0
 801008e:	2b00      	cmp	r3, #0
 8010090:	d10b      	bne.n	80100aa <xQueueGenericSend+0xc6>
	__asm volatile
 8010092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010096:	f383 8811 	msr	BASEPRI, r3
 801009a:	f3bf 8f6f 	isb	sy
 801009e:	f3bf 8f4f 	dsb	sy
 80100a2:	61fb      	str	r3, [r7, #28]
}
 80100a4:	bf00      	nop
 80100a6:	bf00      	nop
 80100a8:	e7fd      	b.n	80100a6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80100aa:	f002 fa75 	bl	8012598 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80100ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80100b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d302      	bcc.n	80100c0 <xQueueGenericSend+0xdc>
 80100ba:	683b      	ldr	r3, [r7, #0]
 80100bc:	2b02      	cmp	r3, #2
 80100be:	d129      	bne.n	8010114 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80100c0:	683a      	ldr	r2, [r7, #0]
 80100c2:	68b9      	ldr	r1, [r7, #8]
 80100c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80100c6:	f000 fc6d 	bl	80109a4 <prvCopyDataToQueue>
 80100ca:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80100cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d010      	beq.n	80100f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80100d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80100d6:	3324      	adds	r3, #36	@ 0x24
 80100d8:	4618      	mov	r0, r3
 80100da:	f001 fa2f 	bl	801153c <xTaskRemoveFromEventList>
 80100de:	4603      	mov	r3, r0
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d013      	beq.n	801010c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80100e4:	4b3f      	ldr	r3, [pc, #252]	@ (80101e4 <xQueueGenericSend+0x200>)
 80100e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80100ea:	601a      	str	r2, [r3, #0]
 80100ec:	f3bf 8f4f 	dsb	sy
 80100f0:	f3bf 8f6f 	isb	sy
 80100f4:	e00a      	b.n	801010c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80100f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d007      	beq.n	801010c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80100fc:	4b39      	ldr	r3, [pc, #228]	@ (80101e4 <xQueueGenericSend+0x200>)
 80100fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010102:	601a      	str	r2, [r3, #0]
 8010104:	f3bf 8f4f 	dsb	sy
 8010108:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801010c:	f002 fa76 	bl	80125fc <vPortExitCritical>
				return pdPASS;
 8010110:	2301      	movs	r3, #1
 8010112:	e063      	b.n	80101dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	2b00      	cmp	r3, #0
 8010118:	d103      	bne.n	8010122 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801011a:	f002 fa6f 	bl	80125fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801011e:	2300      	movs	r3, #0
 8010120:	e05c      	b.n	80101dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010122:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010124:	2b00      	cmp	r3, #0
 8010126:	d106      	bne.n	8010136 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010128:	f107 0314 	add.w	r3, r7, #20
 801012c:	4618      	mov	r0, r3
 801012e:	f001 fa69 	bl	8011604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010132:	2301      	movs	r3, #1
 8010134:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010136:	f002 fa61 	bl	80125fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801013a:	f000 ffd9 	bl	80110f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801013e:	f002 fa2b 	bl	8012598 <vPortEnterCritical>
 8010142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010144:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010148:	b25b      	sxtb	r3, r3
 801014a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801014e:	d103      	bne.n	8010158 <xQueueGenericSend+0x174>
 8010150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010152:	2200      	movs	r2, #0
 8010154:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801015a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801015e:	b25b      	sxtb	r3, r3
 8010160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010164:	d103      	bne.n	801016e <xQueueGenericSend+0x18a>
 8010166:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010168:	2200      	movs	r2, #0
 801016a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801016e:	f002 fa45 	bl	80125fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010172:	1d3a      	adds	r2, r7, #4
 8010174:	f107 0314 	add.w	r3, r7, #20
 8010178:	4611      	mov	r1, r2
 801017a:	4618      	mov	r0, r3
 801017c:	f001 fa58 	bl	8011630 <xTaskCheckForTimeOut>
 8010180:	4603      	mov	r3, r0
 8010182:	2b00      	cmp	r3, #0
 8010184:	d124      	bne.n	80101d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010186:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8010188:	f000 fd04 	bl	8010b94 <prvIsQueueFull>
 801018c:	4603      	mov	r3, r0
 801018e:	2b00      	cmp	r3, #0
 8010190:	d018      	beq.n	80101c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8010192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010194:	3310      	adds	r3, #16
 8010196:	687a      	ldr	r2, [r7, #4]
 8010198:	4611      	mov	r1, r2
 801019a:	4618      	mov	r0, r3
 801019c:	f001 f97c 	bl	8011498 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80101a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101a2:	f000 fc8f 	bl	8010ac4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80101a6:	f000 ffb1 	bl	801110c <xTaskResumeAll>
 80101aa:	4603      	mov	r3, r0
 80101ac:	2b00      	cmp	r3, #0
 80101ae:	f47f af7c 	bne.w	80100aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80101b2:	4b0c      	ldr	r3, [pc, #48]	@ (80101e4 <xQueueGenericSend+0x200>)
 80101b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	f3bf 8f4f 	dsb	sy
 80101be:	f3bf 8f6f 	isb	sy
 80101c2:	e772      	b.n	80100aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80101c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101c6:	f000 fc7d 	bl	8010ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101ca:	f000 ff9f 	bl	801110c <xTaskResumeAll>
 80101ce:	e76c      	b.n	80100aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80101d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80101d2:	f000 fc77 	bl	8010ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101d6:	f000 ff99 	bl	801110c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80101da:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80101dc:	4618      	mov	r0, r3
 80101de:	3738      	adds	r7, #56	@ 0x38
 80101e0:	46bd      	mov	sp, r7
 80101e2:	bd80      	pop	{r7, pc}
 80101e4:	e000ed04 	.word	0xe000ed04

080101e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b090      	sub	sp, #64	@ 0x40
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	60f8      	str	r0, [r7, #12]
 80101f0:	60b9      	str	r1, [r7, #8]
 80101f2:	607a      	str	r2, [r7, #4]
 80101f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80101fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d10b      	bne.n	8010218 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8010200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010204:	f383 8811 	msr	BASEPRI, r3
 8010208:	f3bf 8f6f 	isb	sy
 801020c:	f3bf 8f4f 	dsb	sy
 8010210:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8010212:	bf00      	nop
 8010214:	bf00      	nop
 8010216:	e7fd      	b.n	8010214 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d103      	bne.n	8010226 <xQueueGenericSendFromISR+0x3e>
 801021e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010222:	2b00      	cmp	r3, #0
 8010224:	d101      	bne.n	801022a <xQueueGenericSendFromISR+0x42>
 8010226:	2301      	movs	r3, #1
 8010228:	e000      	b.n	801022c <xQueueGenericSendFromISR+0x44>
 801022a:	2300      	movs	r3, #0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d10b      	bne.n	8010248 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8010230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010234:	f383 8811 	msr	BASEPRI, r3
 8010238:	f3bf 8f6f 	isb	sy
 801023c:	f3bf 8f4f 	dsb	sy
 8010240:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8010242:	bf00      	nop
 8010244:	bf00      	nop
 8010246:	e7fd      	b.n	8010244 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010248:	683b      	ldr	r3, [r7, #0]
 801024a:	2b02      	cmp	r3, #2
 801024c:	d103      	bne.n	8010256 <xQueueGenericSendFromISR+0x6e>
 801024e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010250:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010252:	2b01      	cmp	r3, #1
 8010254:	d101      	bne.n	801025a <xQueueGenericSendFromISR+0x72>
 8010256:	2301      	movs	r3, #1
 8010258:	e000      	b.n	801025c <xQueueGenericSendFromISR+0x74>
 801025a:	2300      	movs	r3, #0
 801025c:	2b00      	cmp	r3, #0
 801025e:	d10b      	bne.n	8010278 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	623b      	str	r3, [r7, #32]
}
 8010272:	bf00      	nop
 8010274:	bf00      	nop
 8010276:	e7fd      	b.n	8010274 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010278:	f002 fa6e 	bl	8012758 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801027c:	f3ef 8211 	mrs	r2, BASEPRI
 8010280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010284:	f383 8811 	msr	BASEPRI, r3
 8010288:	f3bf 8f6f 	isb	sy
 801028c:	f3bf 8f4f 	dsb	sy
 8010290:	61fa      	str	r2, [r7, #28]
 8010292:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8010294:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8010296:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801029c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801029e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80102a0:	429a      	cmp	r2, r3
 80102a2:	d302      	bcc.n	80102aa <xQueueGenericSendFromISR+0xc2>
 80102a4:	683b      	ldr	r3, [r7, #0]
 80102a6:	2b02      	cmp	r3, #2
 80102a8:	d12f      	bne.n	801030a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80102aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80102b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80102b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80102ba:	683a      	ldr	r2, [r7, #0]
 80102bc:	68b9      	ldr	r1, [r7, #8]
 80102be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80102c0:	f000 fb70 	bl	80109a4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80102c4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80102c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102cc:	d112      	bne.n	80102f4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80102ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d016      	beq.n	8010304 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80102d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80102d8:	3324      	adds	r3, #36	@ 0x24
 80102da:	4618      	mov	r0, r3
 80102dc:	f001 f92e 	bl	801153c <xTaskRemoveFromEventList>
 80102e0:	4603      	mov	r3, r0
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d00e      	beq.n	8010304 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d00b      	beq.n	8010304 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2201      	movs	r2, #1
 80102f0:	601a      	str	r2, [r3, #0]
 80102f2:	e007      	b.n	8010304 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80102f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80102f8:	3301      	adds	r3, #1
 80102fa:	b2db      	uxtb	r3, r3
 80102fc:	b25a      	sxtb	r2, r3
 80102fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010304:	2301      	movs	r3, #1
 8010306:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8010308:	e001      	b.n	801030e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801030a:	2300      	movs	r3, #0
 801030c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801030e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010310:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8010312:	697b      	ldr	r3, [r7, #20]
 8010314:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8010318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801031a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801031c:	4618      	mov	r0, r3
 801031e:	3740      	adds	r7, #64	@ 0x40
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}

08010324 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b08e      	sub	sp, #56	@ 0x38
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8010332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010334:	2b00      	cmp	r3, #0
 8010336:	d10b      	bne.n	8010350 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8010338:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801033c:	f383 8811 	msr	BASEPRI, r3
 8010340:	f3bf 8f6f 	isb	sy
 8010344:	f3bf 8f4f 	dsb	sy
 8010348:	623b      	str	r3, [r7, #32]
}
 801034a:	bf00      	nop
 801034c:	bf00      	nop
 801034e:	e7fd      	b.n	801034c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010354:	2b00      	cmp	r3, #0
 8010356:	d00b      	beq.n	8010370 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8010358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801035c:	f383 8811 	msr	BASEPRI, r3
 8010360:	f3bf 8f6f 	isb	sy
 8010364:	f3bf 8f4f 	dsb	sy
 8010368:	61fb      	str	r3, [r7, #28]
}
 801036a:	bf00      	nop
 801036c:	bf00      	nop
 801036e:	e7fd      	b.n	801036c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8010370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010372:	681b      	ldr	r3, [r3, #0]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d103      	bne.n	8010380 <xQueueGiveFromISR+0x5c>
 8010378:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801037a:	689b      	ldr	r3, [r3, #8]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d101      	bne.n	8010384 <xQueueGiveFromISR+0x60>
 8010380:	2301      	movs	r3, #1
 8010382:	e000      	b.n	8010386 <xQueueGiveFromISR+0x62>
 8010384:	2300      	movs	r3, #0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d10b      	bne.n	80103a2 <xQueueGiveFromISR+0x7e>
	__asm volatile
 801038a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801038e:	f383 8811 	msr	BASEPRI, r3
 8010392:	f3bf 8f6f 	isb	sy
 8010396:	f3bf 8f4f 	dsb	sy
 801039a:	61bb      	str	r3, [r7, #24]
}
 801039c:	bf00      	nop
 801039e:	bf00      	nop
 80103a0:	e7fd      	b.n	801039e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80103a2:	f002 f9d9 	bl	8012758 <vPortValidateInterruptPriority>
	__asm volatile
 80103a6:	f3ef 8211 	mrs	r2, BASEPRI
 80103aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80103ae:	f383 8811 	msr	BASEPRI, r3
 80103b2:	f3bf 8f6f 	isb	sy
 80103b6:	f3bf 8f4f 	dsb	sy
 80103ba:	617a      	str	r2, [r7, #20]
 80103bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80103be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80103c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80103c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80103c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80103cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80103ce:	429a      	cmp	r2, r3
 80103d0:	d22b      	bcs.n	801042a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80103d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80103d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80103dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80103de:	1c5a      	adds	r2, r3, #1
 80103e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103e2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80103e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80103e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80103ec:	d112      	bne.n	8010414 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80103ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d016      	beq.n	8010424 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80103f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80103f8:	3324      	adds	r3, #36	@ 0x24
 80103fa:	4618      	mov	r0, r3
 80103fc:	f001 f89e 	bl	801153c <xTaskRemoveFromEventList>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d00e      	beq.n	8010424 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8010406:	683b      	ldr	r3, [r7, #0]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d00b      	beq.n	8010424 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801040c:	683b      	ldr	r3, [r7, #0]
 801040e:	2201      	movs	r2, #1
 8010410:	601a      	str	r2, [r3, #0]
 8010412:	e007      	b.n	8010424 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8010414:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010418:	3301      	adds	r3, #1
 801041a:	b2db      	uxtb	r3, r3
 801041c:	b25a      	sxtb	r2, r3
 801041e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8010424:	2301      	movs	r3, #1
 8010426:	637b      	str	r3, [r7, #52]	@ 0x34
 8010428:	e001      	b.n	801042e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801042a:	2300      	movs	r3, #0
 801042c:	637b      	str	r3, [r7, #52]	@ 0x34
 801042e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010430:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f383 8811 	msr	BASEPRI, r3
}
 8010438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801043a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 801043c:	4618      	mov	r0, r3
 801043e:	3738      	adds	r7, #56	@ 0x38
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010444:	b580      	push	{r7, lr}
 8010446:	b08c      	sub	sp, #48	@ 0x30
 8010448:	af00      	add	r7, sp, #0
 801044a:	60f8      	str	r0, [r7, #12]
 801044c:	60b9      	str	r1, [r7, #8]
 801044e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010450:	2300      	movs	r3, #0
 8010452:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801045a:	2b00      	cmp	r3, #0
 801045c:	d10b      	bne.n	8010476 <xQueueReceive+0x32>
	__asm volatile
 801045e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010462:	f383 8811 	msr	BASEPRI, r3
 8010466:	f3bf 8f6f 	isb	sy
 801046a:	f3bf 8f4f 	dsb	sy
 801046e:	623b      	str	r3, [r7, #32]
}
 8010470:	bf00      	nop
 8010472:	bf00      	nop
 8010474:	e7fd      	b.n	8010472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010476:	68bb      	ldr	r3, [r7, #8]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d103      	bne.n	8010484 <xQueueReceive+0x40>
 801047c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801047e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010480:	2b00      	cmp	r3, #0
 8010482:	d101      	bne.n	8010488 <xQueueReceive+0x44>
 8010484:	2301      	movs	r3, #1
 8010486:	e000      	b.n	801048a <xQueueReceive+0x46>
 8010488:	2300      	movs	r3, #0
 801048a:	2b00      	cmp	r3, #0
 801048c:	d10b      	bne.n	80104a6 <xQueueReceive+0x62>
	__asm volatile
 801048e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010492:	f383 8811 	msr	BASEPRI, r3
 8010496:	f3bf 8f6f 	isb	sy
 801049a:	f3bf 8f4f 	dsb	sy
 801049e:	61fb      	str	r3, [r7, #28]
}
 80104a0:	bf00      	nop
 80104a2:	bf00      	nop
 80104a4:	e7fd      	b.n	80104a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80104a6:	f001 fa09 	bl	80118bc <xTaskGetSchedulerState>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d102      	bne.n	80104b6 <xQueueReceive+0x72>
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d101      	bne.n	80104ba <xQueueReceive+0x76>
 80104b6:	2301      	movs	r3, #1
 80104b8:	e000      	b.n	80104bc <xQueueReceive+0x78>
 80104ba:	2300      	movs	r3, #0
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d10b      	bne.n	80104d8 <xQueueReceive+0x94>
	__asm volatile
 80104c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80104c4:	f383 8811 	msr	BASEPRI, r3
 80104c8:	f3bf 8f6f 	isb	sy
 80104cc:	f3bf 8f4f 	dsb	sy
 80104d0:	61bb      	str	r3, [r7, #24]
}
 80104d2:	bf00      	nop
 80104d4:	bf00      	nop
 80104d6:	e7fd      	b.n	80104d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80104d8:	f002 f85e 	bl	8012598 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80104dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80104e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01f      	beq.n	8010528 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80104e8:	68b9      	ldr	r1, [r7, #8]
 80104ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80104ec:	f000 fac4 	bl	8010a78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80104f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80104f2:	1e5a      	subs	r2, r3, #1
 80104f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80104fa:	691b      	ldr	r3, [r3, #16]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d00f      	beq.n	8010520 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010502:	3310      	adds	r3, #16
 8010504:	4618      	mov	r0, r3
 8010506:	f001 f819 	bl	801153c <xTaskRemoveFromEventList>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d007      	beq.n	8010520 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8010510:	4b3c      	ldr	r3, [pc, #240]	@ (8010604 <xQueueReceive+0x1c0>)
 8010512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010516:	601a      	str	r2, [r3, #0]
 8010518:	f3bf 8f4f 	dsb	sy
 801051c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8010520:	f002 f86c 	bl	80125fc <vPortExitCritical>
				return pdPASS;
 8010524:	2301      	movs	r3, #1
 8010526:	e069      	b.n	80105fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d103      	bne.n	8010536 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801052e:	f002 f865 	bl	80125fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010532:	2300      	movs	r3, #0
 8010534:	e062      	b.n	80105fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010538:	2b00      	cmp	r3, #0
 801053a:	d106      	bne.n	801054a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801053c:	f107 0310 	add.w	r3, r7, #16
 8010540:	4618      	mov	r0, r3
 8010542:	f001 f85f 	bl	8011604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010546:	2301      	movs	r3, #1
 8010548:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801054a:	f002 f857 	bl	80125fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801054e:	f000 fdcf 	bl	80110f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010552:	f002 f821 	bl	8012598 <vPortEnterCritical>
 8010556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801055c:	b25b      	sxtb	r3, r3
 801055e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010562:	d103      	bne.n	801056c <xQueueReceive+0x128>
 8010564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801056c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801056e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010572:	b25b      	sxtb	r3, r3
 8010574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010578:	d103      	bne.n	8010582 <xQueueReceive+0x13e>
 801057a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801057c:	2200      	movs	r2, #0
 801057e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010582:	f002 f83b 	bl	80125fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010586:	1d3a      	adds	r2, r7, #4
 8010588:	f107 0310 	add.w	r3, r7, #16
 801058c:	4611      	mov	r1, r2
 801058e:	4618      	mov	r0, r3
 8010590:	f001 f84e 	bl	8011630 <xTaskCheckForTimeOut>
 8010594:	4603      	mov	r3, r0
 8010596:	2b00      	cmp	r3, #0
 8010598:	d123      	bne.n	80105e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801059a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801059c:	f000 fae4 	bl	8010b68 <prvIsQueueEmpty>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d017      	beq.n	80105d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80105a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105a8:	3324      	adds	r3, #36	@ 0x24
 80105aa:	687a      	ldr	r2, [r7, #4]
 80105ac:	4611      	mov	r1, r2
 80105ae:	4618      	mov	r0, r3
 80105b0:	f000 ff72 	bl	8011498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80105b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105b6:	f000 fa85 	bl	8010ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80105ba:	f000 fda7 	bl	801110c <xTaskResumeAll>
 80105be:	4603      	mov	r3, r0
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d189      	bne.n	80104d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80105c4:	4b0f      	ldr	r3, [pc, #60]	@ (8010604 <xQueueReceive+0x1c0>)
 80105c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80105ca:	601a      	str	r2, [r3, #0]
 80105cc:	f3bf 8f4f 	dsb	sy
 80105d0:	f3bf 8f6f 	isb	sy
 80105d4:	e780      	b.n	80104d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80105d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105d8:	f000 fa74 	bl	8010ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80105dc:	f000 fd96 	bl	801110c <xTaskResumeAll>
 80105e0:	e77a      	b.n	80104d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80105e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105e4:	f000 fa6e 	bl	8010ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80105e8:	f000 fd90 	bl	801110c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80105ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80105ee:	f000 fabb 	bl	8010b68 <prvIsQueueEmpty>
 80105f2:	4603      	mov	r3, r0
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	f43f af6f 	beq.w	80104d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80105fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80105fc:	4618      	mov	r0, r3
 80105fe:	3730      	adds	r7, #48	@ 0x30
 8010600:	46bd      	mov	sp, r7
 8010602:	bd80      	pop	{r7, pc}
 8010604:	e000ed04 	.word	0xe000ed04

08010608 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b08e      	sub	sp, #56	@ 0x38
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8010612:	2300      	movs	r3, #0
 8010614:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801061a:	2300      	movs	r3, #0
 801061c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801061e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010620:	2b00      	cmp	r3, #0
 8010622:	d10b      	bne.n	801063c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8010624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010628:	f383 8811 	msr	BASEPRI, r3
 801062c:	f3bf 8f6f 	isb	sy
 8010630:	f3bf 8f4f 	dsb	sy
 8010634:	623b      	str	r3, [r7, #32]
}
 8010636:	bf00      	nop
 8010638:	bf00      	nop
 801063a:	e7fd      	b.n	8010638 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801063c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801063e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010640:	2b00      	cmp	r3, #0
 8010642:	d00b      	beq.n	801065c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8010644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010648:	f383 8811 	msr	BASEPRI, r3
 801064c:	f3bf 8f6f 	isb	sy
 8010650:	f3bf 8f4f 	dsb	sy
 8010654:	61fb      	str	r3, [r7, #28]
}
 8010656:	bf00      	nop
 8010658:	bf00      	nop
 801065a:	e7fd      	b.n	8010658 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801065c:	f001 f92e 	bl	80118bc <xTaskGetSchedulerState>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d102      	bne.n	801066c <xQueueSemaphoreTake+0x64>
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d101      	bne.n	8010670 <xQueueSemaphoreTake+0x68>
 801066c:	2301      	movs	r3, #1
 801066e:	e000      	b.n	8010672 <xQueueSemaphoreTake+0x6a>
 8010670:	2300      	movs	r3, #0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d10b      	bne.n	801068e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8010676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801067a:	f383 8811 	msr	BASEPRI, r3
 801067e:	f3bf 8f6f 	isb	sy
 8010682:	f3bf 8f4f 	dsb	sy
 8010686:	61bb      	str	r3, [r7, #24]
}
 8010688:	bf00      	nop
 801068a:	bf00      	nop
 801068c:	e7fd      	b.n	801068a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801068e:	f001 ff83 	bl	8012598 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010696:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801069a:	2b00      	cmp	r3, #0
 801069c:	d024      	beq.n	80106e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80106a0:	1e5a      	subs	r2, r3, #1
 80106a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80106a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106a8:	681b      	ldr	r3, [r3, #0]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d104      	bne.n	80106b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80106ae:	f001 fa7f 	bl	8011bb0 <pvTaskIncrementMutexHeldCount>
 80106b2:	4602      	mov	r2, r0
 80106b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106ba:	691b      	ldr	r3, [r3, #16]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d00f      	beq.n	80106e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80106c2:	3310      	adds	r3, #16
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 ff39 	bl	801153c <xTaskRemoveFromEventList>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d007      	beq.n	80106e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80106d0:	4b54      	ldr	r3, [pc, #336]	@ (8010824 <xQueueSemaphoreTake+0x21c>)
 80106d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80106d6:	601a      	str	r2, [r3, #0]
 80106d8:	f3bf 8f4f 	dsb	sy
 80106dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80106e0:	f001 ff8c 	bl	80125fc <vPortExitCritical>
				return pdPASS;
 80106e4:	2301      	movs	r3, #1
 80106e6:	e098      	b.n	801081a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80106e8:	683b      	ldr	r3, [r7, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d112      	bne.n	8010714 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80106ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d00b      	beq.n	801070c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80106f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80106f8:	f383 8811 	msr	BASEPRI, r3
 80106fc:	f3bf 8f6f 	isb	sy
 8010700:	f3bf 8f4f 	dsb	sy
 8010704:	617b      	str	r3, [r7, #20]
}
 8010706:	bf00      	nop
 8010708:	bf00      	nop
 801070a:	e7fd      	b.n	8010708 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801070c:	f001 ff76 	bl	80125fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8010710:	2300      	movs	r3, #0
 8010712:	e082      	b.n	801081a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010716:	2b00      	cmp	r3, #0
 8010718:	d106      	bne.n	8010728 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801071a:	f107 030c 	add.w	r3, r7, #12
 801071e:	4618      	mov	r0, r3
 8010720:	f000 ff70 	bl	8011604 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010724:	2301      	movs	r3, #1
 8010726:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010728:	f001 ff68 	bl	80125fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801072c:	f000 fce0 	bl	80110f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010730:	f001 ff32 	bl	8012598 <vPortEnterCritical>
 8010734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801073a:	b25b      	sxtb	r3, r3
 801073c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010740:	d103      	bne.n	801074a <xQueueSemaphoreTake+0x142>
 8010742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010744:	2200      	movs	r2, #0
 8010746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801074a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801074c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010750:	b25b      	sxtb	r3, r3
 8010752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010756:	d103      	bne.n	8010760 <xQueueSemaphoreTake+0x158>
 8010758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801075a:	2200      	movs	r2, #0
 801075c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010760:	f001 ff4c 	bl	80125fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010764:	463a      	mov	r2, r7
 8010766:	f107 030c 	add.w	r3, r7, #12
 801076a:	4611      	mov	r1, r2
 801076c:	4618      	mov	r0, r3
 801076e:	f000 ff5f 	bl	8011630 <xTaskCheckForTimeOut>
 8010772:	4603      	mov	r3, r0
 8010774:	2b00      	cmp	r3, #0
 8010776:	d132      	bne.n	80107de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801077a:	f000 f9f5 	bl	8010b68 <prvIsQueueEmpty>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d026      	beq.n	80107d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d109      	bne.n	80107a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801078c:	f001 ff04 	bl	8012598 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010792:	689b      	ldr	r3, [r3, #8]
 8010794:	4618      	mov	r0, r3
 8010796:	f001 f8af 	bl	80118f8 <xTaskPriorityInherit>
 801079a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801079c:	f001 ff2e 	bl	80125fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80107a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80107a2:	3324      	adds	r3, #36	@ 0x24
 80107a4:	683a      	ldr	r2, [r7, #0]
 80107a6:	4611      	mov	r1, r2
 80107a8:	4618      	mov	r0, r3
 80107aa:	f000 fe75 	bl	8011498 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80107ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107b0:	f000 f988 	bl	8010ac4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80107b4:	f000 fcaa 	bl	801110c <xTaskResumeAll>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	f47f af67 	bne.w	801068e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80107c0:	4b18      	ldr	r3, [pc, #96]	@ (8010824 <xQueueSemaphoreTake+0x21c>)
 80107c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80107c6:	601a      	str	r2, [r3, #0]
 80107c8:	f3bf 8f4f 	dsb	sy
 80107cc:	f3bf 8f6f 	isb	sy
 80107d0:	e75d      	b.n	801068e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80107d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107d4:	f000 f976 	bl	8010ac4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80107d8:	f000 fc98 	bl	801110c <xTaskResumeAll>
 80107dc:	e757      	b.n	801068e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80107de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107e0:	f000 f970 	bl	8010ac4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80107e4:	f000 fc92 	bl	801110c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80107e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80107ea:	f000 f9bd 	bl	8010b68 <prvIsQueueEmpty>
 80107ee:	4603      	mov	r3, r0
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	f43f af4c 	beq.w	801068e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80107f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d00d      	beq.n	8010818 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80107fc:	f001 fecc 	bl	8012598 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8010800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010802:	f000 f8b7 	bl	8010974 <prvGetDisinheritPriorityAfterTimeout>
 8010806:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8010808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801080a:	689b      	ldr	r3, [r3, #8]
 801080c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801080e:	4618      	mov	r0, r3
 8010810:	f001 f94a 	bl	8011aa8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8010814:	f001 fef2 	bl	80125fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8010818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801081a:	4618      	mov	r0, r3
 801081c:	3738      	adds	r7, #56	@ 0x38
 801081e:	46bd      	mov	sp, r7
 8010820:	bd80      	pop	{r7, pc}
 8010822:	bf00      	nop
 8010824:	e000ed04 	.word	0xe000ed04

08010828 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b08e      	sub	sp, #56	@ 0x38
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8010838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801083a:	2b00      	cmp	r3, #0
 801083c:	d10b      	bne.n	8010856 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 801083e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010842:	f383 8811 	msr	BASEPRI, r3
 8010846:	f3bf 8f6f 	isb	sy
 801084a:	f3bf 8f4f 	dsb	sy
 801084e:	623b      	str	r3, [r7, #32]
}
 8010850:	bf00      	nop
 8010852:	bf00      	nop
 8010854:	e7fd      	b.n	8010852 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	2b00      	cmp	r3, #0
 801085a:	d103      	bne.n	8010864 <xQueueReceiveFromISR+0x3c>
 801085c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801085e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <xQueueReceiveFromISR+0x40>
 8010864:	2301      	movs	r3, #1
 8010866:	e000      	b.n	801086a <xQueueReceiveFromISR+0x42>
 8010868:	2300      	movs	r3, #0
 801086a:	2b00      	cmp	r3, #0
 801086c:	d10b      	bne.n	8010886 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 801086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010872:	f383 8811 	msr	BASEPRI, r3
 8010876:	f3bf 8f6f 	isb	sy
 801087a:	f3bf 8f4f 	dsb	sy
 801087e:	61fb      	str	r3, [r7, #28]
}
 8010880:	bf00      	nop
 8010882:	bf00      	nop
 8010884:	e7fd      	b.n	8010882 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010886:	f001 ff67 	bl	8012758 <vPortValidateInterruptPriority>
	__asm volatile
 801088a:	f3ef 8211 	mrs	r2, BASEPRI
 801088e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010892:	f383 8811 	msr	BASEPRI, r3
 8010896:	f3bf 8f6f 	isb	sy
 801089a:	f3bf 8f4f 	dsb	sy
 801089e:	61ba      	str	r2, [r7, #24]
 80108a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80108a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80108a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80108a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80108ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108ae:	2b00      	cmp	r3, #0
 80108b0:	d02f      	beq.n	8010912 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80108b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80108b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80108bc:	68b9      	ldr	r1, [r7, #8]
 80108be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80108c0:	f000 f8da 	bl	8010a78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80108c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80108c6:	1e5a      	subs	r2, r3, #1
 80108c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80108cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80108d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80108d4:	d112      	bne.n	80108fc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80108d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108d8:	691b      	ldr	r3, [r3, #16]
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d016      	beq.n	801090c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80108de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80108e0:	3310      	adds	r3, #16
 80108e2:	4618      	mov	r0, r3
 80108e4:	f000 fe2a 	bl	801153c <xTaskRemoveFromEventList>
 80108e8:	4603      	mov	r3, r0
 80108ea:	2b00      	cmp	r3, #0
 80108ec:	d00e      	beq.n	801090c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80108ee:	687b      	ldr	r3, [r7, #4]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d00b      	beq.n	801090c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	2201      	movs	r2, #1
 80108f8:	601a      	str	r2, [r3, #0]
 80108fa:	e007      	b.n	801090c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80108fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010900:	3301      	adds	r3, #1
 8010902:	b2db      	uxtb	r3, r3
 8010904:	b25a      	sxtb	r2, r3
 8010906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 801090c:	2301      	movs	r3, #1
 801090e:	637b      	str	r3, [r7, #52]	@ 0x34
 8010910:	e001      	b.n	8010916 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8010912:	2300      	movs	r3, #0
 8010914:	637b      	str	r3, [r7, #52]	@ 0x34
 8010916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010918:	613b      	str	r3, [r7, #16]
	__asm volatile
 801091a:	693b      	ldr	r3, [r7, #16]
 801091c:	f383 8811 	msr	BASEPRI, r3
}
 8010920:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8010924:	4618      	mov	r0, r3
 8010926:	3738      	adds	r7, #56	@ 0x38
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d10b      	bne.n	8010956 <vQueueDelete+0x2a>
	__asm volatile
 801093e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010942:	f383 8811 	msr	BASEPRI, r3
 8010946:	f3bf 8f6f 	isb	sy
 801094a:	f3bf 8f4f 	dsb	sy
 801094e:	60bb      	str	r3, [r7, #8]
}
 8010950:	bf00      	nop
 8010952:	bf00      	nop
 8010954:	e7fd      	b.n	8010952 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8010956:	68f8      	ldr	r0, [r7, #12]
 8010958:	f000 f95e 	bl	8010c18 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8010962:	2b00      	cmp	r3, #0
 8010964:	d102      	bne.n	801096c <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 8010966:	68f8      	ldr	r0, [r7, #12]
 8010968:	f002 f806 	bl	8012978 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801096c:	bf00      	nop
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}

08010974 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010974:	b480      	push	{r7}
 8010976:	b085      	sub	sp, #20
 8010978:	af00      	add	r7, sp, #0
 801097a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010980:	2b00      	cmp	r3, #0
 8010982:	d006      	beq.n	8010992 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010988:	681b      	ldr	r3, [r3, #0]
 801098a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 801098e:	60fb      	str	r3, [r7, #12]
 8010990:	e001      	b.n	8010996 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010992:	2300      	movs	r3, #0
 8010994:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010996:	68fb      	ldr	r3, [r7, #12]
	}
 8010998:	4618      	mov	r0, r3
 801099a:	3714      	adds	r7, #20
 801099c:	46bd      	mov	sp, r7
 801099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a2:	4770      	bx	lr

080109a4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b086      	sub	sp, #24
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	60f8      	str	r0, [r7, #12]
 80109ac:	60b9      	str	r1, [r7, #8]
 80109ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80109b0:	2300      	movs	r3, #0
 80109b2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80109b8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d10d      	bne.n	80109de <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d14d      	bne.n	8010a66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	689b      	ldr	r3, [r3, #8]
 80109ce:	4618      	mov	r0, r3
 80109d0:	f000 fffa 	bl	80119c8 <xTaskPriorityDisinherit>
 80109d4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	2200      	movs	r2, #0
 80109da:	609a      	str	r2, [r3, #8]
 80109dc:	e043      	b.n	8010a66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2b00      	cmp	r3, #0
 80109e2:	d119      	bne.n	8010a18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	6858      	ldr	r0, [r3, #4]
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109ec:	461a      	mov	r2, r3
 80109ee:	68b9      	ldr	r1, [r7, #8]
 80109f0:	f002 fd20 	bl	8013434 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80109f4:	68fb      	ldr	r3, [r7, #12]
 80109f6:	685a      	ldr	r2, [r3, #4]
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80109fc:	441a      	add	r2, r3
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	685a      	ldr	r2, [r3, #4]
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	689b      	ldr	r3, [r3, #8]
 8010a0a:	429a      	cmp	r2, r3
 8010a0c:	d32b      	bcc.n	8010a66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	68fb      	ldr	r3, [r7, #12]
 8010a14:	605a      	str	r2, [r3, #4]
 8010a16:	e026      	b.n	8010a66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8010a18:	68fb      	ldr	r3, [r7, #12]
 8010a1a:	68d8      	ldr	r0, [r3, #12]
 8010a1c:	68fb      	ldr	r3, [r7, #12]
 8010a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a20:	461a      	mov	r2, r3
 8010a22:	68b9      	ldr	r1, [r7, #8]
 8010a24:	f002 fd06 	bl	8013434 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	68da      	ldr	r2, [r3, #12]
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a30:	425b      	negs	r3, r3
 8010a32:	441a      	add	r2, r3
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	68da      	ldr	r2, [r3, #12]
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	429a      	cmp	r2, r3
 8010a42:	d207      	bcs.n	8010a54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8010a44:	68fb      	ldr	r3, [r7, #12]
 8010a46:	689a      	ldr	r2, [r3, #8]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a4c:	425b      	negs	r3, r3
 8010a4e:	441a      	add	r2, r3
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	2b02      	cmp	r3, #2
 8010a58:	d105      	bne.n	8010a66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010a5a:	693b      	ldr	r3, [r7, #16]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d002      	beq.n	8010a66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8010a60:	693b      	ldr	r3, [r7, #16]
 8010a62:	3b01      	subs	r3, #1
 8010a64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8010a66:	693b      	ldr	r3, [r7, #16]
 8010a68:	1c5a      	adds	r2, r3, #1
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8010a6e:	697b      	ldr	r3, [r7, #20]
}
 8010a70:	4618      	mov	r0, r3
 8010a72:	3718      	adds	r7, #24
 8010a74:	46bd      	mov	sp, r7
 8010a76:	bd80      	pop	{r7, pc}

08010a78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010a78:	b580      	push	{r7, lr}
 8010a7a:	b082      	sub	sp, #8
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	6078      	str	r0, [r7, #4]
 8010a80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d018      	beq.n	8010abc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	68da      	ldr	r2, [r3, #12]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010a92:	441a      	add	r2, r3
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	68da      	ldr	r2, [r3, #12]
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	689b      	ldr	r3, [r3, #8]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d303      	bcc.n	8010aac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	681a      	ldr	r2, [r3, #0]
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	68d9      	ldr	r1, [r3, #12]
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	6838      	ldr	r0, [r7, #0]
 8010ab8:	f002 fcbc 	bl	8013434 <memcpy>
	}
}
 8010abc:	bf00      	nop
 8010abe:	3708      	adds	r7, #8
 8010ac0:	46bd      	mov	sp, r7
 8010ac2:	bd80      	pop	{r7, pc}

08010ac4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010ac4:	b580      	push	{r7, lr}
 8010ac6:	b084      	sub	sp, #16
 8010ac8:	af00      	add	r7, sp, #0
 8010aca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8010acc:	f001 fd64 	bl	8012598 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010ad6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010ad8:	e011      	b.n	8010afe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	d012      	beq.n	8010b08 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	3324      	adds	r3, #36	@ 0x24
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	f000 fd28 	bl	801153c <xTaskRemoveFromEventList>
 8010aec:	4603      	mov	r3, r0
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d001      	beq.n	8010af6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010af2:	f000 fe01 	bl	80116f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010af6:	7bfb      	ldrb	r3, [r7, #15]
 8010af8:	3b01      	subs	r3, #1
 8010afa:	b2db      	uxtb	r3, r3
 8010afc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	dce9      	bgt.n	8010ada <prvUnlockQueue+0x16>
 8010b06:	e000      	b.n	8010b0a <prvUnlockQueue+0x46>
					break;
 8010b08:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	22ff      	movs	r2, #255	@ 0xff
 8010b0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8010b12:	f001 fd73 	bl	80125fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8010b16:	f001 fd3f 	bl	8012598 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010b20:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b22:	e011      	b.n	8010b48 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	691b      	ldr	r3, [r3, #16]
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d012      	beq.n	8010b52 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	3310      	adds	r3, #16
 8010b30:	4618      	mov	r0, r3
 8010b32:	f000 fd03 	bl	801153c <xTaskRemoveFromEventList>
 8010b36:	4603      	mov	r3, r0
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d001      	beq.n	8010b40 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8010b3c:	f000 fddc 	bl	80116f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8010b40:	7bbb      	ldrb	r3, [r7, #14]
 8010b42:	3b01      	subs	r3, #1
 8010b44:	b2db      	uxtb	r3, r3
 8010b46:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8010b48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	dce9      	bgt.n	8010b24 <prvUnlockQueue+0x60>
 8010b50:	e000      	b.n	8010b54 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8010b52:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	22ff      	movs	r2, #255	@ 0xff
 8010b58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8010b5c:	f001 fd4e 	bl	80125fc <vPortExitCritical>
}
 8010b60:	bf00      	nop
 8010b62:	3710      	adds	r7, #16
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b084      	sub	sp, #16
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b70:	f001 fd12 	bl	8012598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d102      	bne.n	8010b82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8010b7c:	2301      	movs	r3, #1
 8010b7e:	60fb      	str	r3, [r7, #12]
 8010b80:	e001      	b.n	8010b86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010b82:	2300      	movs	r3, #0
 8010b84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010b86:	f001 fd39 	bl	80125fc <vPortExitCritical>

	return xReturn;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3710      	adds	r7, #16
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd80      	pop	{r7, pc}

08010b94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010b94:	b580      	push	{r7, lr}
 8010b96:	b084      	sub	sp, #16
 8010b98:	af00      	add	r7, sp, #0
 8010b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010b9c:	f001 fcfc 	bl	8012598 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010ba8:	429a      	cmp	r2, r3
 8010baa:	d102      	bne.n	8010bb2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8010bac:	2301      	movs	r3, #1
 8010bae:	60fb      	str	r3, [r7, #12]
 8010bb0:	e001      	b.n	8010bb6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010bb2:	2300      	movs	r3, #0
 8010bb4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010bb6:	f001 fd21 	bl	80125fc <vPortExitCritical>

	return xReturn;
 8010bba:	68fb      	ldr	r3, [r7, #12]
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3710      	adds	r7, #16
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}

08010bc4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8010bc4:	b480      	push	{r7}
 8010bc6:	b085      	sub	sp, #20
 8010bc8:	af00      	add	r7, sp, #0
 8010bca:	6078      	str	r0, [r7, #4]
 8010bcc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bce:	2300      	movs	r3, #0
 8010bd0:	60fb      	str	r3, [r7, #12]
 8010bd2:	e014      	b.n	8010bfe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8010bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8010c14 <vQueueAddToRegistry+0x50>)
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d10b      	bne.n	8010bf8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8010be0:	490c      	ldr	r1, [pc, #48]	@ (8010c14 <vQueueAddToRegistry+0x50>)
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	683a      	ldr	r2, [r7, #0]
 8010be6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8010bea:	4a0a      	ldr	r2, [pc, #40]	@ (8010c14 <vQueueAddToRegistry+0x50>)
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	00db      	lsls	r3, r3, #3
 8010bf0:	4413      	add	r3, r2
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8010bf6:	e006      	b.n	8010c06 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	3301      	adds	r3, #1
 8010bfc:	60fb      	str	r3, [r7, #12]
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2b07      	cmp	r3, #7
 8010c02:	d9e7      	bls.n	8010bd4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010c04:	bf00      	nop
 8010c06:	bf00      	nop
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
 8010c12:	bf00      	nop
 8010c14:	200029e4 	.word	0x200029e4

08010c18 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8010c18:	b480      	push	{r7}
 8010c1a:	b085      	sub	sp, #20
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c20:	2300      	movs	r3, #0
 8010c22:	60fb      	str	r3, [r7, #12]
 8010c24:	e016      	b.n	8010c54 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8010c26:	4a10      	ldr	r2, [pc, #64]	@ (8010c68 <vQueueUnregisterQueue+0x50>)
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	00db      	lsls	r3, r3, #3
 8010c2c:	4413      	add	r3, r2
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	687a      	ldr	r2, [r7, #4]
 8010c32:	429a      	cmp	r2, r3
 8010c34:	d10b      	bne.n	8010c4e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8010c36:	4a0c      	ldr	r2, [pc, #48]	@ (8010c68 <vQueueUnregisterQueue+0x50>)
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	2100      	movs	r1, #0
 8010c3c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8010c40:	4a09      	ldr	r2, [pc, #36]	@ (8010c68 <vQueueUnregisterQueue+0x50>)
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	00db      	lsls	r3, r3, #3
 8010c46:	4413      	add	r3, r2
 8010c48:	2200      	movs	r2, #0
 8010c4a:	605a      	str	r2, [r3, #4]
				break;
 8010c4c:	e006      	b.n	8010c5c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8010c4e:	68fb      	ldr	r3, [r7, #12]
 8010c50:	3301      	adds	r3, #1
 8010c52:	60fb      	str	r3, [r7, #12]
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	2b07      	cmp	r3, #7
 8010c58:	d9e5      	bls.n	8010c26 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8010c5a:	bf00      	nop
 8010c5c:	bf00      	nop
 8010c5e:	3714      	adds	r7, #20
 8010c60:	46bd      	mov	sp, r7
 8010c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c66:	4770      	bx	lr
 8010c68:	200029e4 	.word	0x200029e4

08010c6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b086      	sub	sp, #24
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	60f8      	str	r0, [r7, #12]
 8010c74:	60b9      	str	r1, [r7, #8]
 8010c76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8010c7c:	f001 fc8c 	bl	8012598 <vPortEnterCritical>
 8010c80:	697b      	ldr	r3, [r7, #20]
 8010c82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8010c86:	b25b      	sxtb	r3, r3
 8010c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c8c:	d103      	bne.n	8010c96 <vQueueWaitForMessageRestricted+0x2a>
 8010c8e:	697b      	ldr	r3, [r7, #20]
 8010c90:	2200      	movs	r2, #0
 8010c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8010c9c:	b25b      	sxtb	r3, r3
 8010c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ca2:	d103      	bne.n	8010cac <vQueueWaitForMessageRestricted+0x40>
 8010ca4:	697b      	ldr	r3, [r7, #20]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8010cac:	f001 fca6 	bl	80125fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8010cb0:	697b      	ldr	r3, [r7, #20]
 8010cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d106      	bne.n	8010cc6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8010cb8:	697b      	ldr	r3, [r7, #20]
 8010cba:	3324      	adds	r3, #36	@ 0x24
 8010cbc:	687a      	ldr	r2, [r7, #4]
 8010cbe:	68b9      	ldr	r1, [r7, #8]
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f000 fc0f 	bl	80114e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8010cc6:	6978      	ldr	r0, [r7, #20]
 8010cc8:	f7ff fefc 	bl	8010ac4 <prvUnlockQueue>
	}
 8010ccc:	bf00      	nop
 8010cce:	3718      	adds	r7, #24
 8010cd0:	46bd      	mov	sp, r7
 8010cd2:	bd80      	pop	{r7, pc}

08010cd4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b08e      	sub	sp, #56	@ 0x38
 8010cd8:	af04      	add	r7, sp, #16
 8010cda:	60f8      	str	r0, [r7, #12]
 8010cdc:	60b9      	str	r1, [r7, #8]
 8010cde:	607a      	str	r2, [r7, #4]
 8010ce0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10b      	bne.n	8010d00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8010ce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010cec:	f383 8811 	msr	BASEPRI, r3
 8010cf0:	f3bf 8f6f 	isb	sy
 8010cf4:	f3bf 8f4f 	dsb	sy
 8010cf8:	623b      	str	r3, [r7, #32]
}
 8010cfa:	bf00      	nop
 8010cfc:	bf00      	nop
 8010cfe:	e7fd      	b.n	8010cfc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8010d00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d10b      	bne.n	8010d1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8010d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d0a:	f383 8811 	msr	BASEPRI, r3
 8010d0e:	f3bf 8f6f 	isb	sy
 8010d12:	f3bf 8f4f 	dsb	sy
 8010d16:	61fb      	str	r3, [r7, #28]
}
 8010d18:	bf00      	nop
 8010d1a:	bf00      	nop
 8010d1c:	e7fd      	b.n	8010d1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8010d1e:	235c      	movs	r3, #92	@ 0x5c
 8010d20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8010d22:	693b      	ldr	r3, [r7, #16]
 8010d24:	2b5c      	cmp	r3, #92	@ 0x5c
 8010d26:	d00b      	beq.n	8010d40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8010d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010d2c:	f383 8811 	msr	BASEPRI, r3
 8010d30:	f3bf 8f6f 	isb	sy
 8010d34:	f3bf 8f4f 	dsb	sy
 8010d38:	61bb      	str	r3, [r7, #24]
}
 8010d3a:	bf00      	nop
 8010d3c:	bf00      	nop
 8010d3e:	e7fd      	b.n	8010d3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8010d40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8010d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d01e      	beq.n	8010d86 <xTaskCreateStatic+0xb2>
 8010d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d01b      	beq.n	8010d86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8010d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010d56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8010d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d5a:	2202      	movs	r2, #2
 8010d5c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8010d60:	2300      	movs	r3, #0
 8010d62:	9303      	str	r3, [sp, #12]
 8010d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d66:	9302      	str	r3, [sp, #8]
 8010d68:	f107 0314 	add.w	r3, r7, #20
 8010d6c:	9301      	str	r3, [sp, #4]
 8010d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	683b      	ldr	r3, [r7, #0]
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	68b9      	ldr	r1, [r7, #8]
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f000 f850 	bl	8010e1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010d7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010d80:	f000 f8de 	bl	8010f40 <prvAddNewTaskToReadyList>
 8010d84:	e001      	b.n	8010d8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8010d86:	2300      	movs	r3, #0
 8010d88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010d8a:	697b      	ldr	r3, [r7, #20]
	}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	3728      	adds	r7, #40	@ 0x28
 8010d90:	46bd      	mov	sp, r7
 8010d92:	bd80      	pop	{r7, pc}

08010d94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b08c      	sub	sp, #48	@ 0x30
 8010d98:	af04      	add	r7, sp, #16
 8010d9a:	60f8      	str	r0, [r7, #12]
 8010d9c:	60b9      	str	r1, [r7, #8]
 8010d9e:	603b      	str	r3, [r7, #0]
 8010da0:	4613      	mov	r3, r2
 8010da2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8010da4:	88fb      	ldrh	r3, [r7, #6]
 8010da6:	009b      	lsls	r3, r3, #2
 8010da8:	4618      	mov	r0, r3
 8010daa:	f001 fd17 	bl	80127dc <pvPortMalloc>
 8010dae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010db0:	697b      	ldr	r3, [r7, #20]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d00e      	beq.n	8010dd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010db6:	205c      	movs	r0, #92	@ 0x5c
 8010db8:	f001 fd10 	bl	80127dc <pvPortMalloc>
 8010dbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010dbe:	69fb      	ldr	r3, [r7, #28]
 8010dc0:	2b00      	cmp	r3, #0
 8010dc2:	d003      	beq.n	8010dcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8010dc4:	69fb      	ldr	r3, [r7, #28]
 8010dc6:	697a      	ldr	r2, [r7, #20]
 8010dc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8010dca:	e005      	b.n	8010dd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010dcc:	6978      	ldr	r0, [r7, #20]
 8010dce:	f001 fdd3 	bl	8012978 <vPortFree>
 8010dd2:	e001      	b.n	8010dd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010dd8:	69fb      	ldr	r3, [r7, #28]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d017      	beq.n	8010e0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010dde:	69fb      	ldr	r3, [r7, #28]
 8010de0:	2200      	movs	r2, #0
 8010de2:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010de6:	88fa      	ldrh	r2, [r7, #6]
 8010de8:	2300      	movs	r3, #0
 8010dea:	9303      	str	r3, [sp, #12]
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	9302      	str	r3, [sp, #8]
 8010df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df2:	9301      	str	r3, [sp, #4]
 8010df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010df6:	9300      	str	r3, [sp, #0]
 8010df8:	683b      	ldr	r3, [r7, #0]
 8010dfa:	68b9      	ldr	r1, [r7, #8]
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f80e 	bl	8010e1e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010e02:	69f8      	ldr	r0, [r7, #28]
 8010e04:	f000 f89c 	bl	8010f40 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010e08:	2301      	movs	r3, #1
 8010e0a:	61bb      	str	r3, [r7, #24]
 8010e0c:	e002      	b.n	8010e14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8010e12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8010e14:	69bb      	ldr	r3, [r7, #24]
	}
 8010e16:	4618      	mov	r0, r3
 8010e18:	3720      	adds	r7, #32
 8010e1a:	46bd      	mov	sp, r7
 8010e1c:	bd80      	pop	{r7, pc}

08010e1e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010e1e:	b580      	push	{r7, lr}
 8010e20:	b088      	sub	sp, #32
 8010e22:	af00      	add	r7, sp, #0
 8010e24:	60f8      	str	r0, [r7, #12]
 8010e26:	60b9      	str	r1, [r7, #8]
 8010e28:	607a      	str	r2, [r7, #4]
 8010e2a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8010e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e2e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	009b      	lsls	r3, r3, #2
 8010e34:	461a      	mov	r2, r3
 8010e36:	21a5      	movs	r1, #165	@ 0xa5
 8010e38:	f002 fab8 	bl	80133ac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e3e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8010e46:	3b01      	subs	r3, #1
 8010e48:	009b      	lsls	r3, r3, #2
 8010e4a:	4413      	add	r3, r2
 8010e4c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	f023 0307 	bic.w	r3, r3, #7
 8010e54:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8010e56:	69bb      	ldr	r3, [r7, #24]
 8010e58:	f003 0307 	and.w	r3, r3, #7
 8010e5c:	2b00      	cmp	r3, #0
 8010e5e:	d00b      	beq.n	8010e78 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8010e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010e64:	f383 8811 	msr	BASEPRI, r3
 8010e68:	f3bf 8f6f 	isb	sy
 8010e6c:	f3bf 8f4f 	dsb	sy
 8010e70:	617b      	str	r3, [r7, #20]
}
 8010e72:	bf00      	nop
 8010e74:	bf00      	nop
 8010e76:	e7fd      	b.n	8010e74 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8010e78:	68bb      	ldr	r3, [r7, #8]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d01f      	beq.n	8010ebe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010e7e:	2300      	movs	r3, #0
 8010e80:	61fb      	str	r3, [r7, #28]
 8010e82:	e012      	b.n	8010eaa <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8010e84:	68ba      	ldr	r2, [r7, #8]
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	4413      	add	r3, r2
 8010e8a:	7819      	ldrb	r1, [r3, #0]
 8010e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010e8e:	69fb      	ldr	r3, [r7, #28]
 8010e90:	4413      	add	r3, r2
 8010e92:	3334      	adds	r3, #52	@ 0x34
 8010e94:	460a      	mov	r2, r1
 8010e96:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010e98:	68ba      	ldr	r2, [r7, #8]
 8010e9a:	69fb      	ldr	r3, [r7, #28]
 8010e9c:	4413      	add	r3, r2
 8010e9e:	781b      	ldrb	r3, [r3, #0]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d006      	beq.n	8010eb2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010ea4:	69fb      	ldr	r3, [r7, #28]
 8010ea6:	3301      	adds	r3, #1
 8010ea8:	61fb      	str	r3, [r7, #28]
 8010eaa:	69fb      	ldr	r3, [r7, #28]
 8010eac:	2b0f      	cmp	r3, #15
 8010eae:	d9e9      	bls.n	8010e84 <prvInitialiseNewTask+0x66>
 8010eb0:	e000      	b.n	8010eb4 <prvInitialiseNewTask+0x96>
			{
				break;
 8010eb2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eb6:	2200      	movs	r2, #0
 8010eb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8010ebc:	e003      	b.n	8010ec6 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ec8:	2b37      	cmp	r3, #55	@ 0x37
 8010eca:	d901      	bls.n	8010ed0 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010ecc:	2337      	movs	r3, #55	@ 0x37
 8010ece:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ed4:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ed8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010eda:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8010edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ede:	2200      	movs	r2, #0
 8010ee0:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8010ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ee4:	3304      	adds	r3, #4
 8010ee6:	4618      	mov	r0, r3
 8010ee8:	f7fe fe34 	bl	800fb54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010eec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010eee:	3318      	adds	r3, #24
 8010ef0:	4618      	mov	r0, r3
 8010ef2:	f7fe fe2f 	bl	800fb54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ef8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010efa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010efc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010efe:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8010f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f04:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f0a:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f0e:	2200      	movs	r2, #0
 8010f10:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f14:	2200      	movs	r2, #0
 8010f16:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	68f9      	ldr	r1, [r7, #12]
 8010f1e:	69b8      	ldr	r0, [r7, #24]
 8010f20:	f001 fa08 	bl	8012334 <pxPortInitialiseStack>
 8010f24:	4602      	mov	r2, r0
 8010f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8010f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d002      	beq.n	8010f36 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8010f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010f36:	bf00      	nop
 8010f38:	3720      	adds	r7, #32
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	bd80      	pop	{r7, pc}
	...

08010f40 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8010f48:	f001 fb26 	bl	8012598 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8010f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8011004 <prvAddNewTaskToReadyList+0xc4>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	3301      	adds	r3, #1
 8010f52:	4a2c      	ldr	r2, [pc, #176]	@ (8011004 <prvAddNewTaskToReadyList+0xc4>)
 8010f54:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8010f56:	4b2c      	ldr	r3, [pc, #176]	@ (8011008 <prvAddNewTaskToReadyList+0xc8>)
 8010f58:	681b      	ldr	r3, [r3, #0]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d109      	bne.n	8010f72 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8011008 <prvAddNewTaskToReadyList+0xc8>)
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010f64:	4b27      	ldr	r3, [pc, #156]	@ (8011004 <prvAddNewTaskToReadyList+0xc4>)
 8010f66:	681b      	ldr	r3, [r3, #0]
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d110      	bne.n	8010f8e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010f6c:	f000 fbe8 	bl	8011740 <prvInitialiseTaskLists>
 8010f70:	e00d      	b.n	8010f8e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010f72:	4b26      	ldr	r3, [pc, #152]	@ (801100c <prvAddNewTaskToReadyList+0xcc>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d109      	bne.n	8010f8e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010f7a:	4b23      	ldr	r3, [pc, #140]	@ (8011008 <prvAddNewTaskToReadyList+0xc8>)
 8010f7c:	681b      	ldr	r3, [r3, #0]
 8010f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d802      	bhi.n	8010f8e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010f88:	4a1f      	ldr	r2, [pc, #124]	@ (8011008 <prvAddNewTaskToReadyList+0xc8>)
 8010f8a:	687b      	ldr	r3, [r7, #4]
 8010f8c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010f8e:	4b20      	ldr	r3, [pc, #128]	@ (8011010 <prvAddNewTaskToReadyList+0xd0>)
 8010f90:	681b      	ldr	r3, [r3, #0]
 8010f92:	3301      	adds	r3, #1
 8010f94:	4a1e      	ldr	r2, [pc, #120]	@ (8011010 <prvAddNewTaskToReadyList+0xd0>)
 8010f96:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8010f98:	4b1d      	ldr	r3, [pc, #116]	@ (8011010 <prvAddNewTaskToReadyList+0xd0>)
 8010f9a:	681a      	ldr	r2, [r3, #0]
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8011014 <prvAddNewTaskToReadyList+0xd4>)
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d903      	bls.n	8010fb4 <prvAddNewTaskToReadyList+0x74>
 8010fac:	687b      	ldr	r3, [r7, #4]
 8010fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fb0:	4a18      	ldr	r2, [pc, #96]	@ (8011014 <prvAddNewTaskToReadyList+0xd4>)
 8010fb2:	6013      	str	r3, [r2, #0]
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fb8:	4613      	mov	r3, r2
 8010fba:	009b      	lsls	r3, r3, #2
 8010fbc:	4413      	add	r3, r2
 8010fbe:	009b      	lsls	r3, r3, #2
 8010fc0:	4a15      	ldr	r2, [pc, #84]	@ (8011018 <prvAddNewTaskToReadyList+0xd8>)
 8010fc2:	441a      	add	r2, r3
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	3304      	adds	r3, #4
 8010fc8:	4619      	mov	r1, r3
 8010fca:	4610      	mov	r0, r2
 8010fcc:	f7fe fdcf 	bl	800fb6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010fd0:	f001 fb14 	bl	80125fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010fd4:	4b0d      	ldr	r3, [pc, #52]	@ (801100c <prvAddNewTaskToReadyList+0xcc>)
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d00e      	beq.n	8010ffa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8011008 <prvAddNewTaskToReadyList+0xc8>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d207      	bcs.n	8010ffa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010fea:	4b0c      	ldr	r3, [pc, #48]	@ (801101c <prvAddNewTaskToReadyList+0xdc>)
 8010fec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010ff0:	601a      	str	r2, [r3, #0]
 8010ff2:	f3bf 8f4f 	dsb	sy
 8010ff6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010ffa:	bf00      	nop
 8010ffc:	3708      	adds	r7, #8
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
 8011002:	bf00      	nop
 8011004:	20002ef8 	.word	0x20002ef8
 8011008:	20002a24 	.word	0x20002a24
 801100c:	20002f04 	.word	0x20002f04
 8011010:	20002f14 	.word	0x20002f14
 8011014:	20002f00 	.word	0x20002f00
 8011018:	20002a28 	.word	0x20002a28
 801101c:	e000ed04 	.word	0xe000ed04

08011020 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b08a      	sub	sp, #40	@ 0x28
 8011024:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801102a:	2300      	movs	r3, #0
 801102c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801102e:	463a      	mov	r2, r7
 8011030:	1d39      	adds	r1, r7, #4
 8011032:	f107 0308 	add.w	r3, r7, #8
 8011036:	4618      	mov	r0, r3
 8011038:	f7fe fd38 	bl	800faac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801103c:	6839      	ldr	r1, [r7, #0]
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	68ba      	ldr	r2, [r7, #8]
 8011042:	9202      	str	r2, [sp, #8]
 8011044:	9301      	str	r3, [sp, #4]
 8011046:	2300      	movs	r3, #0
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	2300      	movs	r3, #0
 801104c:	460a      	mov	r2, r1
 801104e:	4922      	ldr	r1, [pc, #136]	@ (80110d8 <vTaskStartScheduler+0xb8>)
 8011050:	4822      	ldr	r0, [pc, #136]	@ (80110dc <vTaskStartScheduler+0xbc>)
 8011052:	f7ff fe3f 	bl	8010cd4 <xTaskCreateStatic>
 8011056:	4603      	mov	r3, r0
 8011058:	4a21      	ldr	r2, [pc, #132]	@ (80110e0 <vTaskStartScheduler+0xc0>)
 801105a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801105c:	4b20      	ldr	r3, [pc, #128]	@ (80110e0 <vTaskStartScheduler+0xc0>)
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d002      	beq.n	801106a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011064:	2301      	movs	r3, #1
 8011066:	617b      	str	r3, [r7, #20]
 8011068:	e001      	b.n	801106e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801106a:	2300      	movs	r3, #0
 801106c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801106e:	697b      	ldr	r3, [r7, #20]
 8011070:	2b01      	cmp	r3, #1
 8011072:	d102      	bne.n	801107a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8011074:	f000 fe04 	bl	8011c80 <xTimerCreateTimerTask>
 8011078:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	2b01      	cmp	r3, #1
 801107e:	d116      	bne.n	80110ae <vTaskStartScheduler+0x8e>
	__asm volatile
 8011080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011084:	f383 8811 	msr	BASEPRI, r3
 8011088:	f3bf 8f6f 	isb	sy
 801108c:	f3bf 8f4f 	dsb	sy
 8011090:	613b      	str	r3, [r7, #16]
}
 8011092:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011094:	4b13      	ldr	r3, [pc, #76]	@ (80110e4 <vTaskStartScheduler+0xc4>)
 8011096:	f04f 32ff 	mov.w	r2, #4294967295
 801109a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801109c:	4b12      	ldr	r3, [pc, #72]	@ (80110e8 <vTaskStartScheduler+0xc8>)
 801109e:	2201      	movs	r2, #1
 80110a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80110a2:	4b12      	ldr	r3, [pc, #72]	@ (80110ec <vTaskStartScheduler+0xcc>)
 80110a4:	2200      	movs	r2, #0
 80110a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80110a8:	f001 f9d2 	bl	8012450 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80110ac:	e00f      	b.n	80110ce <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80110ae:	697b      	ldr	r3, [r7, #20]
 80110b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b4:	d10b      	bne.n	80110ce <vTaskStartScheduler+0xae>
	__asm volatile
 80110b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80110ba:	f383 8811 	msr	BASEPRI, r3
 80110be:	f3bf 8f6f 	isb	sy
 80110c2:	f3bf 8f4f 	dsb	sy
 80110c6:	60fb      	str	r3, [r7, #12]
}
 80110c8:	bf00      	nop
 80110ca:	bf00      	nop
 80110cc:	e7fd      	b.n	80110ca <vTaskStartScheduler+0xaa>
}
 80110ce:	bf00      	nop
 80110d0:	3718      	adds	r7, #24
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bd80      	pop	{r7, pc}
 80110d6:	bf00      	nop
 80110d8:	080141d0 	.word	0x080141d0
 80110dc:	08011711 	.word	0x08011711
 80110e0:	20002f1c 	.word	0x20002f1c
 80110e4:	20002f18 	.word	0x20002f18
 80110e8:	20002f04 	.word	0x20002f04
 80110ec:	20002efc 	.word	0x20002efc

080110f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80110f0:	b480      	push	{r7}
 80110f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80110f4:	4b04      	ldr	r3, [pc, #16]	@ (8011108 <vTaskSuspendAll+0x18>)
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	3301      	adds	r3, #1
 80110fa:	4a03      	ldr	r2, [pc, #12]	@ (8011108 <vTaskSuspendAll+0x18>)
 80110fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80110fe:	bf00      	nop
 8011100:	46bd      	mov	sp, r7
 8011102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011106:	4770      	bx	lr
 8011108:	20002f20 	.word	0x20002f20

0801110c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b084      	sub	sp, #16
 8011110:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011112:	2300      	movs	r3, #0
 8011114:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011116:	2300      	movs	r3, #0
 8011118:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801111a:	4b42      	ldr	r3, [pc, #264]	@ (8011224 <xTaskResumeAll+0x118>)
 801111c:	681b      	ldr	r3, [r3, #0]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d10b      	bne.n	801113a <xTaskResumeAll+0x2e>
	__asm volatile
 8011122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011126:	f383 8811 	msr	BASEPRI, r3
 801112a:	f3bf 8f6f 	isb	sy
 801112e:	f3bf 8f4f 	dsb	sy
 8011132:	603b      	str	r3, [r7, #0]
}
 8011134:	bf00      	nop
 8011136:	bf00      	nop
 8011138:	e7fd      	b.n	8011136 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801113a:	f001 fa2d 	bl	8012598 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801113e:	4b39      	ldr	r3, [pc, #228]	@ (8011224 <xTaskResumeAll+0x118>)
 8011140:	681b      	ldr	r3, [r3, #0]
 8011142:	3b01      	subs	r3, #1
 8011144:	4a37      	ldr	r2, [pc, #220]	@ (8011224 <xTaskResumeAll+0x118>)
 8011146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011148:	4b36      	ldr	r3, [pc, #216]	@ (8011224 <xTaskResumeAll+0x118>)
 801114a:	681b      	ldr	r3, [r3, #0]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d162      	bne.n	8011216 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011150:	4b35      	ldr	r3, [pc, #212]	@ (8011228 <xTaskResumeAll+0x11c>)
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	2b00      	cmp	r3, #0
 8011156:	d05e      	beq.n	8011216 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011158:	e02f      	b.n	80111ba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801115a:	4b34      	ldr	r3, [pc, #208]	@ (801122c <xTaskResumeAll+0x120>)
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	68db      	ldr	r3, [r3, #12]
 8011160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	3318      	adds	r3, #24
 8011166:	4618      	mov	r0, r3
 8011168:	f7fe fd5e 	bl	800fc28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801116c:	68fb      	ldr	r3, [r7, #12]
 801116e:	3304      	adds	r3, #4
 8011170:	4618      	mov	r0, r3
 8011172:	f7fe fd59 	bl	800fc28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801117a:	4b2d      	ldr	r3, [pc, #180]	@ (8011230 <xTaskResumeAll+0x124>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	429a      	cmp	r2, r3
 8011180:	d903      	bls.n	801118a <xTaskResumeAll+0x7e>
 8011182:	68fb      	ldr	r3, [r7, #12]
 8011184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011186:	4a2a      	ldr	r2, [pc, #168]	@ (8011230 <xTaskResumeAll+0x124>)
 8011188:	6013      	str	r3, [r2, #0]
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801118e:	4613      	mov	r3, r2
 8011190:	009b      	lsls	r3, r3, #2
 8011192:	4413      	add	r3, r2
 8011194:	009b      	lsls	r3, r3, #2
 8011196:	4a27      	ldr	r2, [pc, #156]	@ (8011234 <xTaskResumeAll+0x128>)
 8011198:	441a      	add	r2, r3
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	3304      	adds	r3, #4
 801119e:	4619      	mov	r1, r3
 80111a0:	4610      	mov	r0, r2
 80111a2:	f7fe fce4 	bl	800fb6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80111aa:	4b23      	ldr	r3, [pc, #140]	@ (8011238 <xTaskResumeAll+0x12c>)
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111b0:	429a      	cmp	r2, r3
 80111b2:	d302      	bcc.n	80111ba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80111b4:	4b21      	ldr	r3, [pc, #132]	@ (801123c <xTaskResumeAll+0x130>)
 80111b6:	2201      	movs	r2, #1
 80111b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80111ba:	4b1c      	ldr	r3, [pc, #112]	@ (801122c <xTaskResumeAll+0x120>)
 80111bc:	681b      	ldr	r3, [r3, #0]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d1cb      	bne.n	801115a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	2b00      	cmp	r3, #0
 80111c6:	d001      	beq.n	80111cc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80111c8:	f000 fb58 	bl	801187c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80111cc:	4b1c      	ldr	r3, [pc, #112]	@ (8011240 <xTaskResumeAll+0x134>)
 80111ce:	681b      	ldr	r3, [r3, #0]
 80111d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d010      	beq.n	80111fa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80111d8:	f000 f846 	bl	8011268 <xTaskIncrementTick>
 80111dc:	4603      	mov	r3, r0
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d002      	beq.n	80111e8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80111e2:	4b16      	ldr	r3, [pc, #88]	@ (801123c <xTaskResumeAll+0x130>)
 80111e4:	2201      	movs	r2, #1
 80111e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	3b01      	subs	r3, #1
 80111ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d1f1      	bne.n	80111d8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80111f4:	4b12      	ldr	r3, [pc, #72]	@ (8011240 <xTaskResumeAll+0x134>)
 80111f6:	2200      	movs	r2, #0
 80111f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80111fa:	4b10      	ldr	r3, [pc, #64]	@ (801123c <xTaskResumeAll+0x130>)
 80111fc:	681b      	ldr	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d009      	beq.n	8011216 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8011202:	2301      	movs	r3, #1
 8011204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8011206:	4b0f      	ldr	r3, [pc, #60]	@ (8011244 <xTaskResumeAll+0x138>)
 8011208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801120c:	601a      	str	r2, [r3, #0]
 801120e:	f3bf 8f4f 	dsb	sy
 8011212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8011216:	f001 f9f1 	bl	80125fc <vPortExitCritical>

	return xAlreadyYielded;
 801121a:	68bb      	ldr	r3, [r7, #8]
}
 801121c:	4618      	mov	r0, r3
 801121e:	3710      	adds	r7, #16
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}
 8011224:	20002f20 	.word	0x20002f20
 8011228:	20002ef8 	.word	0x20002ef8
 801122c:	20002eb8 	.word	0x20002eb8
 8011230:	20002f00 	.word	0x20002f00
 8011234:	20002a28 	.word	0x20002a28
 8011238:	20002a24 	.word	0x20002a24
 801123c:	20002f0c 	.word	0x20002f0c
 8011240:	20002f08 	.word	0x20002f08
 8011244:	e000ed04 	.word	0xe000ed04

08011248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801124e:	4b05      	ldr	r3, [pc, #20]	@ (8011264 <xTaskGetTickCount+0x1c>)
 8011250:	681b      	ldr	r3, [r3, #0]
 8011252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8011254:	687b      	ldr	r3, [r7, #4]
}
 8011256:	4618      	mov	r0, r3
 8011258:	370c      	adds	r7, #12
 801125a:	46bd      	mov	sp, r7
 801125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011260:	4770      	bx	lr
 8011262:	bf00      	nop
 8011264:	20002efc 	.word	0x20002efc

08011268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b086      	sub	sp, #24
 801126c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801126e:	2300      	movs	r3, #0
 8011270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011272:	4b4f      	ldr	r3, [pc, #316]	@ (80113b0 <xTaskIncrementTick+0x148>)
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	f040 8090 	bne.w	801139c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801127c:	4b4d      	ldr	r3, [pc, #308]	@ (80113b4 <xTaskIncrementTick+0x14c>)
 801127e:	681b      	ldr	r3, [r3, #0]
 8011280:	3301      	adds	r3, #1
 8011282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8011284:	4a4b      	ldr	r2, [pc, #300]	@ (80113b4 <xTaskIncrementTick+0x14c>)
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801128a:	693b      	ldr	r3, [r7, #16]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d121      	bne.n	80112d4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8011290:	4b49      	ldr	r3, [pc, #292]	@ (80113b8 <xTaskIncrementTick+0x150>)
 8011292:	681b      	ldr	r3, [r3, #0]
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00b      	beq.n	80112b2 <xTaskIncrementTick+0x4a>
	__asm volatile
 801129a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801129e:	f383 8811 	msr	BASEPRI, r3
 80112a2:	f3bf 8f6f 	isb	sy
 80112a6:	f3bf 8f4f 	dsb	sy
 80112aa:	603b      	str	r3, [r7, #0]
}
 80112ac:	bf00      	nop
 80112ae:	bf00      	nop
 80112b0:	e7fd      	b.n	80112ae <xTaskIncrementTick+0x46>
 80112b2:	4b41      	ldr	r3, [pc, #260]	@ (80113b8 <xTaskIncrementTick+0x150>)
 80112b4:	681b      	ldr	r3, [r3, #0]
 80112b6:	60fb      	str	r3, [r7, #12]
 80112b8:	4b40      	ldr	r3, [pc, #256]	@ (80113bc <xTaskIncrementTick+0x154>)
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	4a3e      	ldr	r2, [pc, #248]	@ (80113b8 <xTaskIncrementTick+0x150>)
 80112be:	6013      	str	r3, [r2, #0]
 80112c0:	4a3e      	ldr	r2, [pc, #248]	@ (80113bc <xTaskIncrementTick+0x154>)
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	6013      	str	r3, [r2, #0]
 80112c6:	4b3e      	ldr	r3, [pc, #248]	@ (80113c0 <xTaskIncrementTick+0x158>)
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	3301      	adds	r3, #1
 80112cc:	4a3c      	ldr	r2, [pc, #240]	@ (80113c0 <xTaskIncrementTick+0x158>)
 80112ce:	6013      	str	r3, [r2, #0]
 80112d0:	f000 fad4 	bl	801187c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80112d4:	4b3b      	ldr	r3, [pc, #236]	@ (80113c4 <xTaskIncrementTick+0x15c>)
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	693a      	ldr	r2, [r7, #16]
 80112da:	429a      	cmp	r2, r3
 80112dc:	d349      	bcc.n	8011372 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80112de:	4b36      	ldr	r3, [pc, #216]	@ (80113b8 <xTaskIncrementTick+0x150>)
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d104      	bne.n	80112f2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80112e8:	4b36      	ldr	r3, [pc, #216]	@ (80113c4 <xTaskIncrementTick+0x15c>)
 80112ea:	f04f 32ff 	mov.w	r2, #4294967295
 80112ee:	601a      	str	r2, [r3, #0]
					break;
 80112f0:	e03f      	b.n	8011372 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80112f2:	4b31      	ldr	r3, [pc, #196]	@ (80113b8 <xTaskIncrementTick+0x150>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	68db      	ldr	r3, [r3, #12]
 80112fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80112fc:	68bb      	ldr	r3, [r7, #8]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8011302:	693a      	ldr	r2, [r7, #16]
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	429a      	cmp	r2, r3
 8011308:	d203      	bcs.n	8011312 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801130a:	4a2e      	ldr	r2, [pc, #184]	@ (80113c4 <xTaskIncrementTick+0x15c>)
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8011310:	e02f      	b.n	8011372 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	3304      	adds	r3, #4
 8011316:	4618      	mov	r0, r3
 8011318:	f7fe fc86 	bl	800fc28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801131c:	68bb      	ldr	r3, [r7, #8]
 801131e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011320:	2b00      	cmp	r3, #0
 8011322:	d004      	beq.n	801132e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	3318      	adds	r3, #24
 8011328:	4618      	mov	r0, r3
 801132a:	f7fe fc7d 	bl	800fc28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801132e:	68bb      	ldr	r3, [r7, #8]
 8011330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011332:	4b25      	ldr	r3, [pc, #148]	@ (80113c8 <xTaskIncrementTick+0x160>)
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	429a      	cmp	r2, r3
 8011338:	d903      	bls.n	8011342 <xTaskIncrementTick+0xda>
 801133a:	68bb      	ldr	r3, [r7, #8]
 801133c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801133e:	4a22      	ldr	r2, [pc, #136]	@ (80113c8 <xTaskIncrementTick+0x160>)
 8011340:	6013      	str	r3, [r2, #0]
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011346:	4613      	mov	r3, r2
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4a1f      	ldr	r2, [pc, #124]	@ (80113cc <xTaskIncrementTick+0x164>)
 8011350:	441a      	add	r2, r3
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	3304      	adds	r3, #4
 8011356:	4619      	mov	r1, r3
 8011358:	4610      	mov	r0, r2
 801135a:	f7fe fc08 	bl	800fb6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801135e:	68bb      	ldr	r3, [r7, #8]
 8011360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011362:	4b1b      	ldr	r3, [pc, #108]	@ (80113d0 <xTaskIncrementTick+0x168>)
 8011364:	681b      	ldr	r3, [r3, #0]
 8011366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011368:	429a      	cmp	r2, r3
 801136a:	d3b8      	bcc.n	80112de <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801136c:	2301      	movs	r3, #1
 801136e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011370:	e7b5      	b.n	80112de <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8011372:	4b17      	ldr	r3, [pc, #92]	@ (80113d0 <xTaskIncrementTick+0x168>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011378:	4914      	ldr	r1, [pc, #80]	@ (80113cc <xTaskIncrementTick+0x164>)
 801137a:	4613      	mov	r3, r2
 801137c:	009b      	lsls	r3, r3, #2
 801137e:	4413      	add	r3, r2
 8011380:	009b      	lsls	r3, r3, #2
 8011382:	440b      	add	r3, r1
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	2b01      	cmp	r3, #1
 8011388:	d901      	bls.n	801138e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 801138a:	2301      	movs	r3, #1
 801138c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801138e:	4b11      	ldr	r3, [pc, #68]	@ (80113d4 <xTaskIncrementTick+0x16c>)
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d007      	beq.n	80113a6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8011396:	2301      	movs	r3, #1
 8011398:	617b      	str	r3, [r7, #20]
 801139a:	e004      	b.n	80113a6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801139c:	4b0e      	ldr	r3, [pc, #56]	@ (80113d8 <xTaskIncrementTick+0x170>)
 801139e:	681b      	ldr	r3, [r3, #0]
 80113a0:	3301      	adds	r3, #1
 80113a2:	4a0d      	ldr	r2, [pc, #52]	@ (80113d8 <xTaskIncrementTick+0x170>)
 80113a4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80113a6:	697b      	ldr	r3, [r7, #20]
}
 80113a8:	4618      	mov	r0, r3
 80113aa:	3718      	adds	r7, #24
 80113ac:	46bd      	mov	sp, r7
 80113ae:	bd80      	pop	{r7, pc}
 80113b0:	20002f20 	.word	0x20002f20
 80113b4:	20002efc 	.word	0x20002efc
 80113b8:	20002eb0 	.word	0x20002eb0
 80113bc:	20002eb4 	.word	0x20002eb4
 80113c0:	20002f10 	.word	0x20002f10
 80113c4:	20002f18 	.word	0x20002f18
 80113c8:	20002f00 	.word	0x20002f00
 80113cc:	20002a28 	.word	0x20002a28
 80113d0:	20002a24 	.word	0x20002a24
 80113d4:	20002f0c 	.word	0x20002f0c
 80113d8:	20002f08 	.word	0x20002f08

080113dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80113dc:	b480      	push	{r7}
 80113de:	b085      	sub	sp, #20
 80113e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80113e2:	4b28      	ldr	r3, [pc, #160]	@ (8011484 <vTaskSwitchContext+0xa8>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d003      	beq.n	80113f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80113ea:	4b27      	ldr	r3, [pc, #156]	@ (8011488 <vTaskSwitchContext+0xac>)
 80113ec:	2201      	movs	r2, #1
 80113ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80113f0:	e042      	b.n	8011478 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80113f2:	4b25      	ldr	r3, [pc, #148]	@ (8011488 <vTaskSwitchContext+0xac>)
 80113f4:	2200      	movs	r2, #0
 80113f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113f8:	4b24      	ldr	r3, [pc, #144]	@ (801148c <vTaskSwitchContext+0xb0>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	60fb      	str	r3, [r7, #12]
 80113fe:	e011      	b.n	8011424 <vTaskSwitchContext+0x48>
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d10b      	bne.n	801141e <vTaskSwitchContext+0x42>
	__asm volatile
 8011406:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801140a:	f383 8811 	msr	BASEPRI, r3
 801140e:	f3bf 8f6f 	isb	sy
 8011412:	f3bf 8f4f 	dsb	sy
 8011416:	607b      	str	r3, [r7, #4]
}
 8011418:	bf00      	nop
 801141a:	bf00      	nop
 801141c:	e7fd      	b.n	801141a <vTaskSwitchContext+0x3e>
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	3b01      	subs	r3, #1
 8011422:	60fb      	str	r3, [r7, #12]
 8011424:	491a      	ldr	r1, [pc, #104]	@ (8011490 <vTaskSwitchContext+0xb4>)
 8011426:	68fa      	ldr	r2, [r7, #12]
 8011428:	4613      	mov	r3, r2
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	4413      	add	r3, r2
 801142e:	009b      	lsls	r3, r3, #2
 8011430:	440b      	add	r3, r1
 8011432:	681b      	ldr	r3, [r3, #0]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d0e3      	beq.n	8011400 <vTaskSwitchContext+0x24>
 8011438:	68fa      	ldr	r2, [r7, #12]
 801143a:	4613      	mov	r3, r2
 801143c:	009b      	lsls	r3, r3, #2
 801143e:	4413      	add	r3, r2
 8011440:	009b      	lsls	r3, r3, #2
 8011442:	4a13      	ldr	r2, [pc, #76]	@ (8011490 <vTaskSwitchContext+0xb4>)
 8011444:	4413      	add	r3, r2
 8011446:	60bb      	str	r3, [r7, #8]
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	685b      	ldr	r3, [r3, #4]
 801144c:	685a      	ldr	r2, [r3, #4]
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	605a      	str	r2, [r3, #4]
 8011452:	68bb      	ldr	r3, [r7, #8]
 8011454:	685a      	ldr	r2, [r3, #4]
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	3308      	adds	r3, #8
 801145a:	429a      	cmp	r2, r3
 801145c:	d104      	bne.n	8011468 <vTaskSwitchContext+0x8c>
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	685b      	ldr	r3, [r3, #4]
 8011462:	685a      	ldr	r2, [r3, #4]
 8011464:	68bb      	ldr	r3, [r7, #8]
 8011466:	605a      	str	r2, [r3, #4]
 8011468:	68bb      	ldr	r3, [r7, #8]
 801146a:	685b      	ldr	r3, [r3, #4]
 801146c:	68db      	ldr	r3, [r3, #12]
 801146e:	4a09      	ldr	r2, [pc, #36]	@ (8011494 <vTaskSwitchContext+0xb8>)
 8011470:	6013      	str	r3, [r2, #0]
 8011472:	4a06      	ldr	r2, [pc, #24]	@ (801148c <vTaskSwitchContext+0xb0>)
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	6013      	str	r3, [r2, #0]
}
 8011478:	bf00      	nop
 801147a:	3714      	adds	r7, #20
 801147c:	46bd      	mov	sp, r7
 801147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011482:	4770      	bx	lr
 8011484:	20002f20 	.word	0x20002f20
 8011488:	20002f0c 	.word	0x20002f0c
 801148c:	20002f00 	.word	0x20002f00
 8011490:	20002a28 	.word	0x20002a28
 8011494:	20002a24 	.word	0x20002a24

08011498 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8011498:	b580      	push	{r7, lr}
 801149a:	b084      	sub	sp, #16
 801149c:	af00      	add	r7, sp, #0
 801149e:	6078      	str	r0, [r7, #4]
 80114a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d10b      	bne.n	80114c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80114a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114ac:	f383 8811 	msr	BASEPRI, r3
 80114b0:	f3bf 8f6f 	isb	sy
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	60fb      	str	r3, [r7, #12]
}
 80114ba:	bf00      	nop
 80114bc:	bf00      	nop
 80114be:	e7fd      	b.n	80114bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80114c0:	4b07      	ldr	r3, [pc, #28]	@ (80114e0 <vTaskPlaceOnEventList+0x48>)
 80114c2:	681b      	ldr	r3, [r3, #0]
 80114c4:	3318      	adds	r3, #24
 80114c6:	4619      	mov	r1, r3
 80114c8:	6878      	ldr	r0, [r7, #4]
 80114ca:	f7fe fb74 	bl	800fbb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80114ce:	2101      	movs	r1, #1
 80114d0:	6838      	ldr	r0, [r7, #0]
 80114d2:	f000 fb81 	bl	8011bd8 <prvAddCurrentTaskToDelayedList>
}
 80114d6:	bf00      	nop
 80114d8:	3710      	adds	r7, #16
 80114da:	46bd      	mov	sp, r7
 80114dc:	bd80      	pop	{r7, pc}
 80114de:	bf00      	nop
 80114e0:	20002a24 	.word	0x20002a24

080114e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80114e4:	b580      	push	{r7, lr}
 80114e6:	b086      	sub	sp, #24
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d10b      	bne.n	801150e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80114f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80114fa:	f383 8811 	msr	BASEPRI, r3
 80114fe:	f3bf 8f6f 	isb	sy
 8011502:	f3bf 8f4f 	dsb	sy
 8011506:	617b      	str	r3, [r7, #20]
}
 8011508:	bf00      	nop
 801150a:	bf00      	nop
 801150c:	e7fd      	b.n	801150a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801150e:	4b0a      	ldr	r3, [pc, #40]	@ (8011538 <vTaskPlaceOnEventListRestricted+0x54>)
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	3318      	adds	r3, #24
 8011514:	4619      	mov	r1, r3
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f7fe fb29 	bl	800fb6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	2b00      	cmp	r3, #0
 8011520:	d002      	beq.n	8011528 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8011522:	f04f 33ff 	mov.w	r3, #4294967295
 8011526:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	68b8      	ldr	r0, [r7, #8]
 801152c:	f000 fb54 	bl	8011bd8 <prvAddCurrentTaskToDelayedList>
	}
 8011530:	bf00      	nop
 8011532:	3718      	adds	r7, #24
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}
 8011538:	20002a24 	.word	0x20002a24

0801153c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b086      	sub	sp, #24
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	68db      	ldr	r3, [r3, #12]
 8011548:	68db      	ldr	r3, [r3, #12]
 801154a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	2b00      	cmp	r3, #0
 8011550:	d10b      	bne.n	801156a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8011552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011556:	f383 8811 	msr	BASEPRI, r3
 801155a:	f3bf 8f6f 	isb	sy
 801155e:	f3bf 8f4f 	dsb	sy
 8011562:	60fb      	str	r3, [r7, #12]
}
 8011564:	bf00      	nop
 8011566:	bf00      	nop
 8011568:	e7fd      	b.n	8011566 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	3318      	adds	r3, #24
 801156e:	4618      	mov	r0, r3
 8011570:	f7fe fb5a 	bl	800fc28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011574:	4b1d      	ldr	r3, [pc, #116]	@ (80115ec <xTaskRemoveFromEventList+0xb0>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d11d      	bne.n	80115b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801157c:	693b      	ldr	r3, [r7, #16]
 801157e:	3304      	adds	r3, #4
 8011580:	4618      	mov	r0, r3
 8011582:	f7fe fb51 	bl	800fc28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801158a:	4b19      	ldr	r3, [pc, #100]	@ (80115f0 <xTaskRemoveFromEventList+0xb4>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	429a      	cmp	r2, r3
 8011590:	d903      	bls.n	801159a <xTaskRemoveFromEventList+0x5e>
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011596:	4a16      	ldr	r2, [pc, #88]	@ (80115f0 <xTaskRemoveFromEventList+0xb4>)
 8011598:	6013      	str	r3, [r2, #0]
 801159a:	693b      	ldr	r3, [r7, #16]
 801159c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801159e:	4613      	mov	r3, r2
 80115a0:	009b      	lsls	r3, r3, #2
 80115a2:	4413      	add	r3, r2
 80115a4:	009b      	lsls	r3, r3, #2
 80115a6:	4a13      	ldr	r2, [pc, #76]	@ (80115f4 <xTaskRemoveFromEventList+0xb8>)
 80115a8:	441a      	add	r2, r3
 80115aa:	693b      	ldr	r3, [r7, #16]
 80115ac:	3304      	adds	r3, #4
 80115ae:	4619      	mov	r1, r3
 80115b0:	4610      	mov	r0, r2
 80115b2:	f7fe fadc 	bl	800fb6e <vListInsertEnd>
 80115b6:	e005      	b.n	80115c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80115b8:	693b      	ldr	r3, [r7, #16]
 80115ba:	3318      	adds	r3, #24
 80115bc:	4619      	mov	r1, r3
 80115be:	480e      	ldr	r0, [pc, #56]	@ (80115f8 <xTaskRemoveFromEventList+0xbc>)
 80115c0:	f7fe fad5 	bl	800fb6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80115c4:	693b      	ldr	r3, [r7, #16]
 80115c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80115c8:	4b0c      	ldr	r3, [pc, #48]	@ (80115fc <xTaskRemoveFromEventList+0xc0>)
 80115ca:	681b      	ldr	r3, [r3, #0]
 80115cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d905      	bls.n	80115de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80115d2:	2301      	movs	r3, #1
 80115d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80115d6:	4b0a      	ldr	r3, [pc, #40]	@ (8011600 <xTaskRemoveFromEventList+0xc4>)
 80115d8:	2201      	movs	r2, #1
 80115da:	601a      	str	r2, [r3, #0]
 80115dc:	e001      	b.n	80115e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80115de:	2300      	movs	r3, #0
 80115e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80115e2:	697b      	ldr	r3, [r7, #20]
}
 80115e4:	4618      	mov	r0, r3
 80115e6:	3718      	adds	r7, #24
 80115e8:	46bd      	mov	sp, r7
 80115ea:	bd80      	pop	{r7, pc}
 80115ec:	20002f20 	.word	0x20002f20
 80115f0:	20002f00 	.word	0x20002f00
 80115f4:	20002a28 	.word	0x20002a28
 80115f8:	20002eb8 	.word	0x20002eb8
 80115fc:	20002a24 	.word	0x20002a24
 8011600:	20002f0c 	.word	0x20002f0c

08011604 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011604:	b480      	push	{r7}
 8011606:	b083      	sub	sp, #12
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801160c:	4b06      	ldr	r3, [pc, #24]	@ (8011628 <vTaskInternalSetTimeOutState+0x24>)
 801160e:	681a      	ldr	r2, [r3, #0]
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011614:	4b05      	ldr	r3, [pc, #20]	@ (801162c <vTaskInternalSetTimeOutState+0x28>)
 8011616:	681a      	ldr	r2, [r3, #0]
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	605a      	str	r2, [r3, #4]
}
 801161c:	bf00      	nop
 801161e:	370c      	adds	r7, #12
 8011620:	46bd      	mov	sp, r7
 8011622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011626:	4770      	bx	lr
 8011628:	20002f10 	.word	0x20002f10
 801162c:	20002efc 	.word	0x20002efc

08011630 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b088      	sub	sp, #32
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d10b      	bne.n	8011658 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8011640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011644:	f383 8811 	msr	BASEPRI, r3
 8011648:	f3bf 8f6f 	isb	sy
 801164c:	f3bf 8f4f 	dsb	sy
 8011650:	613b      	str	r3, [r7, #16]
}
 8011652:	bf00      	nop
 8011654:	bf00      	nop
 8011656:	e7fd      	b.n	8011654 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d10b      	bne.n	8011676 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801165e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011662:	f383 8811 	msr	BASEPRI, r3
 8011666:	f3bf 8f6f 	isb	sy
 801166a:	f3bf 8f4f 	dsb	sy
 801166e:	60fb      	str	r3, [r7, #12]
}
 8011670:	bf00      	nop
 8011672:	bf00      	nop
 8011674:	e7fd      	b.n	8011672 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8011676:	f000 ff8f 	bl	8012598 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801167a:	4b1d      	ldr	r3, [pc, #116]	@ (80116f0 <xTaskCheckForTimeOut+0xc0>)
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011680:	687b      	ldr	r3, [r7, #4]
 8011682:	685b      	ldr	r3, [r3, #4]
 8011684:	69ba      	ldr	r2, [r7, #24]
 8011686:	1ad3      	subs	r3, r2, r3
 8011688:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011692:	d102      	bne.n	801169a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8011694:	2300      	movs	r3, #0
 8011696:	61fb      	str	r3, [r7, #28]
 8011698:	e023      	b.n	80116e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	681a      	ldr	r2, [r3, #0]
 801169e:	4b15      	ldr	r3, [pc, #84]	@ (80116f4 <xTaskCheckForTimeOut+0xc4>)
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d007      	beq.n	80116b6 <xTaskCheckForTimeOut+0x86>
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	685b      	ldr	r3, [r3, #4]
 80116aa:	69ba      	ldr	r2, [r7, #24]
 80116ac:	429a      	cmp	r2, r3
 80116ae:	d302      	bcc.n	80116b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80116b0:	2301      	movs	r3, #1
 80116b2:	61fb      	str	r3, [r7, #28]
 80116b4:	e015      	b.n	80116e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80116b6:	683b      	ldr	r3, [r7, #0]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	697a      	ldr	r2, [r7, #20]
 80116bc:	429a      	cmp	r2, r3
 80116be:	d20b      	bcs.n	80116d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80116c0:	683b      	ldr	r3, [r7, #0]
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	697b      	ldr	r3, [r7, #20]
 80116c6:	1ad2      	subs	r2, r2, r3
 80116c8:	683b      	ldr	r3, [r7, #0]
 80116ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f7ff ff99 	bl	8011604 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80116d2:	2300      	movs	r3, #0
 80116d4:	61fb      	str	r3, [r7, #28]
 80116d6:	e004      	b.n	80116e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	2200      	movs	r2, #0
 80116dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80116de:	2301      	movs	r3, #1
 80116e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80116e2:	f000 ff8b 	bl	80125fc <vPortExitCritical>

	return xReturn;
 80116e6:	69fb      	ldr	r3, [r7, #28]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3720      	adds	r7, #32
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	20002efc 	.word	0x20002efc
 80116f4:	20002f10 	.word	0x20002f10

080116f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80116f8:	b480      	push	{r7}
 80116fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80116fc:	4b03      	ldr	r3, [pc, #12]	@ (801170c <vTaskMissedYield+0x14>)
 80116fe:	2201      	movs	r2, #1
 8011700:	601a      	str	r2, [r3, #0]
}
 8011702:	bf00      	nop
 8011704:	46bd      	mov	sp, r7
 8011706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801170a:	4770      	bx	lr
 801170c:	20002f0c 	.word	0x20002f0c

08011710 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011710:	b580      	push	{r7, lr}
 8011712:	b082      	sub	sp, #8
 8011714:	af00      	add	r7, sp, #0
 8011716:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011718:	f000 f852 	bl	80117c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801171c:	4b06      	ldr	r3, [pc, #24]	@ (8011738 <prvIdleTask+0x28>)
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	2b01      	cmp	r3, #1
 8011722:	d9f9      	bls.n	8011718 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011724:	4b05      	ldr	r3, [pc, #20]	@ (801173c <prvIdleTask+0x2c>)
 8011726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801172a:	601a      	str	r2, [r3, #0]
 801172c:	f3bf 8f4f 	dsb	sy
 8011730:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011734:	e7f0      	b.n	8011718 <prvIdleTask+0x8>
 8011736:	bf00      	nop
 8011738:	20002a28 	.word	0x20002a28
 801173c:	e000ed04 	.word	0xe000ed04

08011740 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b082      	sub	sp, #8
 8011744:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011746:	2300      	movs	r3, #0
 8011748:	607b      	str	r3, [r7, #4]
 801174a:	e00c      	b.n	8011766 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801174c:	687a      	ldr	r2, [r7, #4]
 801174e:	4613      	mov	r3, r2
 8011750:	009b      	lsls	r3, r3, #2
 8011752:	4413      	add	r3, r2
 8011754:	009b      	lsls	r3, r3, #2
 8011756:	4a12      	ldr	r2, [pc, #72]	@ (80117a0 <prvInitialiseTaskLists+0x60>)
 8011758:	4413      	add	r3, r2
 801175a:	4618      	mov	r0, r3
 801175c:	f7fe f9da 	bl	800fb14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	3301      	adds	r3, #1
 8011764:	607b      	str	r3, [r7, #4]
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	2b37      	cmp	r3, #55	@ 0x37
 801176a:	d9ef      	bls.n	801174c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801176c:	480d      	ldr	r0, [pc, #52]	@ (80117a4 <prvInitialiseTaskLists+0x64>)
 801176e:	f7fe f9d1 	bl	800fb14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011772:	480d      	ldr	r0, [pc, #52]	@ (80117a8 <prvInitialiseTaskLists+0x68>)
 8011774:	f7fe f9ce 	bl	800fb14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011778:	480c      	ldr	r0, [pc, #48]	@ (80117ac <prvInitialiseTaskLists+0x6c>)
 801177a:	f7fe f9cb 	bl	800fb14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801177e:	480c      	ldr	r0, [pc, #48]	@ (80117b0 <prvInitialiseTaskLists+0x70>)
 8011780:	f7fe f9c8 	bl	800fb14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011784:	480b      	ldr	r0, [pc, #44]	@ (80117b4 <prvInitialiseTaskLists+0x74>)
 8011786:	f7fe f9c5 	bl	800fb14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801178a:	4b0b      	ldr	r3, [pc, #44]	@ (80117b8 <prvInitialiseTaskLists+0x78>)
 801178c:	4a05      	ldr	r2, [pc, #20]	@ (80117a4 <prvInitialiseTaskLists+0x64>)
 801178e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8011790:	4b0a      	ldr	r3, [pc, #40]	@ (80117bc <prvInitialiseTaskLists+0x7c>)
 8011792:	4a05      	ldr	r2, [pc, #20]	@ (80117a8 <prvInitialiseTaskLists+0x68>)
 8011794:	601a      	str	r2, [r3, #0]
}
 8011796:	bf00      	nop
 8011798:	3708      	adds	r7, #8
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	20002a28 	.word	0x20002a28
 80117a4:	20002e88 	.word	0x20002e88
 80117a8:	20002e9c 	.word	0x20002e9c
 80117ac:	20002eb8 	.word	0x20002eb8
 80117b0:	20002ecc 	.word	0x20002ecc
 80117b4:	20002ee4 	.word	0x20002ee4
 80117b8:	20002eb0 	.word	0x20002eb0
 80117bc:	20002eb4 	.word	0x20002eb4

080117c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80117c0:	b580      	push	{r7, lr}
 80117c2:	b082      	sub	sp, #8
 80117c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117c6:	e019      	b.n	80117fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80117c8:	f000 fee6 	bl	8012598 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80117cc:	4b10      	ldr	r3, [pc, #64]	@ (8011810 <prvCheckTasksWaitingTermination+0x50>)
 80117ce:	68db      	ldr	r3, [r3, #12]
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80117d4:	687b      	ldr	r3, [r7, #4]
 80117d6:	3304      	adds	r3, #4
 80117d8:	4618      	mov	r0, r3
 80117da:	f7fe fa25 	bl	800fc28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80117de:	4b0d      	ldr	r3, [pc, #52]	@ (8011814 <prvCheckTasksWaitingTermination+0x54>)
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	3b01      	subs	r3, #1
 80117e4:	4a0b      	ldr	r2, [pc, #44]	@ (8011814 <prvCheckTasksWaitingTermination+0x54>)
 80117e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80117e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011818 <prvCheckTasksWaitingTermination+0x58>)
 80117ea:	681b      	ldr	r3, [r3, #0]
 80117ec:	3b01      	subs	r3, #1
 80117ee:	4a0a      	ldr	r2, [pc, #40]	@ (8011818 <prvCheckTasksWaitingTermination+0x58>)
 80117f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80117f2:	f000 ff03 	bl	80125fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80117f6:	6878      	ldr	r0, [r7, #4]
 80117f8:	f000 f810 	bl	801181c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80117fc:	4b06      	ldr	r3, [pc, #24]	@ (8011818 <prvCheckTasksWaitingTermination+0x58>)
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d1e1      	bne.n	80117c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011804:	bf00      	nop
 8011806:	bf00      	nop
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}
 801180e:	bf00      	nop
 8011810:	20002ecc 	.word	0x20002ecc
 8011814:	20002ef8 	.word	0x20002ef8
 8011818:	20002ee0 	.word	0x20002ee0

0801181c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 801182a:	2b00      	cmp	r3, #0
 801182c:	d108      	bne.n	8011840 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011832:	4618      	mov	r0, r3
 8011834:	f001 f8a0 	bl	8012978 <vPortFree>
				vPortFree( pxTCB );
 8011838:	6878      	ldr	r0, [r7, #4]
 801183a:	f001 f89d 	bl	8012978 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801183e:	e019      	b.n	8011874 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011846:	2b01      	cmp	r3, #1
 8011848:	d103      	bne.n	8011852 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801184a:	6878      	ldr	r0, [r7, #4]
 801184c:	f001 f894 	bl	8012978 <vPortFree>
	}
 8011850:	e010      	b.n	8011874 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8011858:	2b02      	cmp	r3, #2
 801185a:	d00b      	beq.n	8011874 <prvDeleteTCB+0x58>
	__asm volatile
 801185c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011860:	f383 8811 	msr	BASEPRI, r3
 8011864:	f3bf 8f6f 	isb	sy
 8011868:	f3bf 8f4f 	dsb	sy
 801186c:	60fb      	str	r3, [r7, #12]
}
 801186e:	bf00      	nop
 8011870:	bf00      	nop
 8011872:	e7fd      	b.n	8011870 <prvDeleteTCB+0x54>
	}
 8011874:	bf00      	nop
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801187c:	b480      	push	{r7}
 801187e:	b083      	sub	sp, #12
 8011880:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8011882:	4b0c      	ldr	r3, [pc, #48]	@ (80118b4 <prvResetNextTaskUnblockTime+0x38>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	2b00      	cmp	r3, #0
 801188a:	d104      	bne.n	8011896 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801188c:	4b0a      	ldr	r3, [pc, #40]	@ (80118b8 <prvResetNextTaskUnblockTime+0x3c>)
 801188e:	f04f 32ff 	mov.w	r2, #4294967295
 8011892:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8011894:	e008      	b.n	80118a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011896:	4b07      	ldr	r3, [pc, #28]	@ (80118b4 <prvResetNextTaskUnblockTime+0x38>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68db      	ldr	r3, [r3, #12]
 801189c:	68db      	ldr	r3, [r3, #12]
 801189e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	685b      	ldr	r3, [r3, #4]
 80118a4:	4a04      	ldr	r2, [pc, #16]	@ (80118b8 <prvResetNextTaskUnblockTime+0x3c>)
 80118a6:	6013      	str	r3, [r2, #0]
}
 80118a8:	bf00      	nop
 80118aa:	370c      	adds	r7, #12
 80118ac:	46bd      	mov	sp, r7
 80118ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118b2:	4770      	bx	lr
 80118b4:	20002eb0 	.word	0x20002eb0
 80118b8:	20002f18 	.word	0x20002f18

080118bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80118bc:	b480      	push	{r7}
 80118be:	b083      	sub	sp, #12
 80118c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80118c2:	4b0b      	ldr	r3, [pc, #44]	@ (80118f0 <xTaskGetSchedulerState+0x34>)
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d102      	bne.n	80118d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80118ca:	2301      	movs	r3, #1
 80118cc:	607b      	str	r3, [r7, #4]
 80118ce:	e008      	b.n	80118e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80118d0:	4b08      	ldr	r3, [pc, #32]	@ (80118f4 <xTaskGetSchedulerState+0x38>)
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d102      	bne.n	80118de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80118d8:	2302      	movs	r3, #2
 80118da:	607b      	str	r3, [r7, #4]
 80118dc:	e001      	b.n	80118e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80118de:	2300      	movs	r3, #0
 80118e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80118e2:	687b      	ldr	r3, [r7, #4]
	}
 80118e4:	4618      	mov	r0, r3
 80118e6:	370c      	adds	r7, #12
 80118e8:	46bd      	mov	sp, r7
 80118ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ee:	4770      	bx	lr
 80118f0:	20002f04 	.word	0x20002f04
 80118f4:	20002f20 	.word	0x20002f20

080118f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b084      	sub	sp, #16
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011904:	2300      	movs	r3, #0
 8011906:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d051      	beq.n	80119b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801190e:	68bb      	ldr	r3, [r7, #8]
 8011910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011912:	4b2a      	ldr	r3, [pc, #168]	@ (80119bc <xTaskPriorityInherit+0xc4>)
 8011914:	681b      	ldr	r3, [r3, #0]
 8011916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011918:	429a      	cmp	r2, r3
 801191a:	d241      	bcs.n	80119a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801191c:	68bb      	ldr	r3, [r7, #8]
 801191e:	699b      	ldr	r3, [r3, #24]
 8011920:	2b00      	cmp	r3, #0
 8011922:	db06      	blt.n	8011932 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011924:	4b25      	ldr	r3, [pc, #148]	@ (80119bc <xTaskPriorityInherit+0xc4>)
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801192a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8011932:	68bb      	ldr	r3, [r7, #8]
 8011934:	6959      	ldr	r1, [r3, #20]
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801193a:	4613      	mov	r3, r2
 801193c:	009b      	lsls	r3, r3, #2
 801193e:	4413      	add	r3, r2
 8011940:	009b      	lsls	r3, r3, #2
 8011942:	4a1f      	ldr	r2, [pc, #124]	@ (80119c0 <xTaskPriorityInherit+0xc8>)
 8011944:	4413      	add	r3, r2
 8011946:	4299      	cmp	r1, r3
 8011948:	d122      	bne.n	8011990 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801194a:	68bb      	ldr	r3, [r7, #8]
 801194c:	3304      	adds	r3, #4
 801194e:	4618      	mov	r0, r3
 8011950:	f7fe f96a 	bl	800fc28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011954:	4b19      	ldr	r3, [pc, #100]	@ (80119bc <xTaskPriorityInherit+0xc4>)
 8011956:	681b      	ldr	r3, [r3, #0]
 8011958:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801195a:	68bb      	ldr	r3, [r7, #8]
 801195c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801195e:	68bb      	ldr	r3, [r7, #8]
 8011960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011962:	4b18      	ldr	r3, [pc, #96]	@ (80119c4 <xTaskPriorityInherit+0xcc>)
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	429a      	cmp	r2, r3
 8011968:	d903      	bls.n	8011972 <xTaskPriorityInherit+0x7a>
 801196a:	68bb      	ldr	r3, [r7, #8]
 801196c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801196e:	4a15      	ldr	r2, [pc, #84]	@ (80119c4 <xTaskPriorityInherit+0xcc>)
 8011970:	6013      	str	r3, [r2, #0]
 8011972:	68bb      	ldr	r3, [r7, #8]
 8011974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011976:	4613      	mov	r3, r2
 8011978:	009b      	lsls	r3, r3, #2
 801197a:	4413      	add	r3, r2
 801197c:	009b      	lsls	r3, r3, #2
 801197e:	4a10      	ldr	r2, [pc, #64]	@ (80119c0 <xTaskPriorityInherit+0xc8>)
 8011980:	441a      	add	r2, r3
 8011982:	68bb      	ldr	r3, [r7, #8]
 8011984:	3304      	adds	r3, #4
 8011986:	4619      	mov	r1, r3
 8011988:	4610      	mov	r0, r2
 801198a:	f7fe f8f0 	bl	800fb6e <vListInsertEnd>
 801198e:	e004      	b.n	801199a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8011990:	4b0a      	ldr	r3, [pc, #40]	@ (80119bc <xTaskPriorityInherit+0xc4>)
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801199a:	2301      	movs	r3, #1
 801199c:	60fb      	str	r3, [r7, #12]
 801199e:	e008      	b.n	80119b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80119a0:	68bb      	ldr	r3, [r7, #8]
 80119a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80119a4:	4b05      	ldr	r3, [pc, #20]	@ (80119bc <xTaskPriorityInherit+0xc4>)
 80119a6:	681b      	ldr	r3, [r3, #0]
 80119a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80119aa:	429a      	cmp	r2, r3
 80119ac:	d201      	bcs.n	80119b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80119ae:	2301      	movs	r3, #1
 80119b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80119b2:	68fb      	ldr	r3, [r7, #12]
	}
 80119b4:	4618      	mov	r0, r3
 80119b6:	3710      	adds	r7, #16
 80119b8:	46bd      	mov	sp, r7
 80119ba:	bd80      	pop	{r7, pc}
 80119bc:	20002a24 	.word	0x20002a24
 80119c0:	20002a28 	.word	0x20002a28
 80119c4:	20002f00 	.word	0x20002f00

080119c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b086      	sub	sp, #24
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80119d4:	2300      	movs	r3, #0
 80119d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d058      	beq.n	8011a90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80119de:	4b2f      	ldr	r3, [pc, #188]	@ (8011a9c <xTaskPriorityDisinherit+0xd4>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	693a      	ldr	r2, [r7, #16]
 80119e4:	429a      	cmp	r2, r3
 80119e6:	d00b      	beq.n	8011a00 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80119e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80119ec:	f383 8811 	msr	BASEPRI, r3
 80119f0:	f3bf 8f6f 	isb	sy
 80119f4:	f3bf 8f4f 	dsb	sy
 80119f8:	60fb      	str	r3, [r7, #12]
}
 80119fa:	bf00      	nop
 80119fc:	bf00      	nop
 80119fe:	e7fd      	b.n	80119fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8011a00:	693b      	ldr	r3, [r7, #16]
 8011a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d10b      	bne.n	8011a20 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8011a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011a0c:	f383 8811 	msr	BASEPRI, r3
 8011a10:	f3bf 8f6f 	isb	sy
 8011a14:	f3bf 8f4f 	dsb	sy
 8011a18:	60bb      	str	r3, [r7, #8]
}
 8011a1a:	bf00      	nop
 8011a1c:	bf00      	nop
 8011a1e:	e7fd      	b.n	8011a1c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a24:	1e5a      	subs	r2, r3, #1
 8011a26:	693b      	ldr	r3, [r7, #16]
 8011a28:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8011a2a:	693b      	ldr	r3, [r7, #16]
 8011a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a2e:	693b      	ldr	r3, [r7, #16]
 8011a30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011a32:	429a      	cmp	r2, r3
 8011a34:	d02c      	beq.n	8011a90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011a36:	693b      	ldr	r3, [r7, #16]
 8011a38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d128      	bne.n	8011a90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011a3e:	693b      	ldr	r3, [r7, #16]
 8011a40:	3304      	adds	r3, #4
 8011a42:	4618      	mov	r0, r3
 8011a44:	f7fe f8f0 	bl	800fc28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8011a4c:	693b      	ldr	r3, [r7, #16]
 8011a4e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a50:	693b      	ldr	r3, [r7, #16]
 8011a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a54:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011a58:	693b      	ldr	r3, [r7, #16]
 8011a5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8011a5c:	693b      	ldr	r3, [r7, #16]
 8011a5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a60:	4b0f      	ldr	r3, [pc, #60]	@ (8011aa0 <xTaskPriorityDisinherit+0xd8>)
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	429a      	cmp	r2, r3
 8011a66:	d903      	bls.n	8011a70 <xTaskPriorityDisinherit+0xa8>
 8011a68:	693b      	ldr	r3, [r7, #16]
 8011a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a6c:	4a0c      	ldr	r2, [pc, #48]	@ (8011aa0 <xTaskPriorityDisinherit+0xd8>)
 8011a6e:	6013      	str	r3, [r2, #0]
 8011a70:	693b      	ldr	r3, [r7, #16]
 8011a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011a74:	4613      	mov	r3, r2
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	4413      	add	r3, r2
 8011a7a:	009b      	lsls	r3, r3, #2
 8011a7c:	4a09      	ldr	r2, [pc, #36]	@ (8011aa4 <xTaskPriorityDisinherit+0xdc>)
 8011a7e:	441a      	add	r2, r3
 8011a80:	693b      	ldr	r3, [r7, #16]
 8011a82:	3304      	adds	r3, #4
 8011a84:	4619      	mov	r1, r3
 8011a86:	4610      	mov	r0, r2
 8011a88:	f7fe f871 	bl	800fb6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8011a8c:	2301      	movs	r3, #1
 8011a8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011a90:	697b      	ldr	r3, [r7, #20]
	}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3718      	adds	r7, #24
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}
 8011a9a:	bf00      	nop
 8011a9c:	20002a24 	.word	0x20002a24
 8011aa0:	20002f00 	.word	0x20002f00
 8011aa4:	20002a28 	.word	0x20002a28

08011aa8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b088      	sub	sp, #32
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d06c      	beq.n	8011b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011ac0:	69bb      	ldr	r3, [r7, #24]
 8011ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10b      	bne.n	8011ae0 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8011ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011acc:	f383 8811 	msr	BASEPRI, r3
 8011ad0:	f3bf 8f6f 	isb	sy
 8011ad4:	f3bf 8f4f 	dsb	sy
 8011ad8:	60fb      	str	r3, [r7, #12]
}
 8011ada:	bf00      	nop
 8011adc:	bf00      	nop
 8011ade:	e7fd      	b.n	8011adc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011ae0:	69bb      	ldr	r3, [r7, #24]
 8011ae2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ae4:	683a      	ldr	r2, [r7, #0]
 8011ae6:	429a      	cmp	r2, r3
 8011ae8:	d902      	bls.n	8011af0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	61fb      	str	r3, [r7, #28]
 8011aee:	e002      	b.n	8011af6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011af0:	69bb      	ldr	r3, [r7, #24]
 8011af2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011af4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8011af6:	69bb      	ldr	r3, [r7, #24]
 8011af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011afa:	69fa      	ldr	r2, [r7, #28]
 8011afc:	429a      	cmp	r2, r3
 8011afe:	d04c      	beq.n	8011b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b04:	697a      	ldr	r2, [r7, #20]
 8011b06:	429a      	cmp	r2, r3
 8011b08:	d147      	bne.n	8011b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8011b0a:	4b26      	ldr	r3, [pc, #152]	@ (8011ba4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	69ba      	ldr	r2, [r7, #24]
 8011b10:	429a      	cmp	r2, r3
 8011b12:	d10b      	bne.n	8011b2c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8011b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011b18:	f383 8811 	msr	BASEPRI, r3
 8011b1c:	f3bf 8f6f 	isb	sy
 8011b20:	f3bf 8f4f 	dsb	sy
 8011b24:	60bb      	str	r3, [r7, #8]
}
 8011b26:	bf00      	nop
 8011b28:	bf00      	nop
 8011b2a:	e7fd      	b.n	8011b28 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8011b2c:	69bb      	ldr	r3, [r7, #24]
 8011b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8011b32:	69bb      	ldr	r3, [r7, #24]
 8011b34:	69fa      	ldr	r2, [r7, #28]
 8011b36:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011b38:	69bb      	ldr	r3, [r7, #24]
 8011b3a:	699b      	ldr	r3, [r3, #24]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	db04      	blt.n	8011b4a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011b40:	69fb      	ldr	r3, [r7, #28]
 8011b42:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8011b46:	69bb      	ldr	r3, [r7, #24]
 8011b48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8011b4a:	69bb      	ldr	r3, [r7, #24]
 8011b4c:	6959      	ldr	r1, [r3, #20]
 8011b4e:	693a      	ldr	r2, [r7, #16]
 8011b50:	4613      	mov	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	4a13      	ldr	r2, [pc, #76]	@ (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b5a:	4413      	add	r3, r2
 8011b5c:	4299      	cmp	r1, r3
 8011b5e:	d11c      	bne.n	8011b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	3304      	adds	r3, #4
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7fe f85f 	bl	800fc28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011b6a:	69bb      	ldr	r3, [r7, #24]
 8011b6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b6e:	4b0f      	ldr	r3, [pc, #60]	@ (8011bac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	429a      	cmp	r2, r3
 8011b74:	d903      	bls.n	8011b7e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8011b76:	69bb      	ldr	r3, [r7, #24]
 8011b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b7a:	4a0c      	ldr	r2, [pc, #48]	@ (8011bac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8011b7c:	6013      	str	r3, [r2, #0]
 8011b7e:	69bb      	ldr	r3, [r7, #24]
 8011b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011b82:	4613      	mov	r3, r2
 8011b84:	009b      	lsls	r3, r3, #2
 8011b86:	4413      	add	r3, r2
 8011b88:	009b      	lsls	r3, r3, #2
 8011b8a:	4a07      	ldr	r2, [pc, #28]	@ (8011ba8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8011b8c:	441a      	add	r2, r3
 8011b8e:	69bb      	ldr	r3, [r7, #24]
 8011b90:	3304      	adds	r3, #4
 8011b92:	4619      	mov	r1, r3
 8011b94:	4610      	mov	r0, r2
 8011b96:	f7fd ffea 	bl	800fb6e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011b9a:	bf00      	nop
 8011b9c:	3720      	adds	r7, #32
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}
 8011ba2:	bf00      	nop
 8011ba4:	20002a24 	.word	0x20002a24
 8011ba8:	20002a28 	.word	0x20002a28
 8011bac:	20002f00 	.word	0x20002f00

08011bb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011bb0:	b480      	push	{r7}
 8011bb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011bb4:	4b07      	ldr	r3, [pc, #28]	@ (8011bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d004      	beq.n	8011bc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011bbc:	4b05      	ldr	r3, [pc, #20]	@ (8011bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bc2:	3201      	adds	r2, #1
 8011bc4:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8011bc6:	4b03      	ldr	r3, [pc, #12]	@ (8011bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8011bc8:	681b      	ldr	r3, [r3, #0]
	}
 8011bca:	4618      	mov	r0, r3
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bd2:	4770      	bx	lr
 8011bd4:	20002a24 	.word	0x20002a24

08011bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b084      	sub	sp, #16
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011be2:	4b21      	ldr	r3, [pc, #132]	@ (8011c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8011be4:	681b      	ldr	r3, [r3, #0]
 8011be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011be8:	4b20      	ldr	r3, [pc, #128]	@ (8011c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	3304      	adds	r3, #4
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fe f81a 	bl	800fc28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011bfa:	d10a      	bne.n	8011c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8011bfc:	683b      	ldr	r3, [r7, #0]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d007      	beq.n	8011c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c02:	4b1a      	ldr	r3, [pc, #104]	@ (8011c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	3304      	adds	r3, #4
 8011c08:	4619      	mov	r1, r3
 8011c0a:	4819      	ldr	r0, [pc, #100]	@ (8011c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8011c0c:	f7fd ffaf 	bl	800fb6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8011c10:	e026      	b.n	8011c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8011c12:	68fa      	ldr	r2, [r7, #12]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	4413      	add	r3, r2
 8011c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8011c1a:	4b14      	ldr	r3, [pc, #80]	@ (8011c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	68ba      	ldr	r2, [r7, #8]
 8011c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8011c22:	68ba      	ldr	r2, [r7, #8]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d209      	bcs.n	8011c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c2a:	4b12      	ldr	r3, [pc, #72]	@ (8011c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8011c2c:	681a      	ldr	r2, [r3, #0]
 8011c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8011c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	3304      	adds	r3, #4
 8011c34:	4619      	mov	r1, r3
 8011c36:	4610      	mov	r0, r2
 8011c38:	f7fd ffbd 	bl	800fbb6 <vListInsert>
}
 8011c3c:	e010      	b.n	8011c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8011c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8011c40:	681a      	ldr	r2, [r3, #0]
 8011c42:	4b0a      	ldr	r3, [pc, #40]	@ (8011c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	3304      	adds	r3, #4
 8011c48:	4619      	mov	r1, r3
 8011c4a:	4610      	mov	r0, r2
 8011c4c:	f7fd ffb3 	bl	800fbb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011c50:	4b0a      	ldr	r3, [pc, #40]	@ (8011c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d202      	bcs.n	8011c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8011c5a:	4a08      	ldr	r2, [pc, #32]	@ (8011c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	6013      	str	r3, [r2, #0]
}
 8011c60:	bf00      	nop
 8011c62:	3710      	adds	r7, #16
 8011c64:	46bd      	mov	sp, r7
 8011c66:	bd80      	pop	{r7, pc}
 8011c68:	20002efc 	.word	0x20002efc
 8011c6c:	20002a24 	.word	0x20002a24
 8011c70:	20002ee4 	.word	0x20002ee4
 8011c74:	20002eb4 	.word	0x20002eb4
 8011c78:	20002eb0 	.word	0x20002eb0
 8011c7c:	20002f18 	.word	0x20002f18

08011c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8011c80:	b580      	push	{r7, lr}
 8011c82:	b08a      	sub	sp, #40	@ 0x28
 8011c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8011c86:	2300      	movs	r3, #0
 8011c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8011c8a:	f000 fb13 	bl	80122b4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8011c8e:	4b1d      	ldr	r3, [pc, #116]	@ (8011d04 <xTimerCreateTimerTask+0x84>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d021      	beq.n	8011cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8011c96:	2300      	movs	r3, #0
 8011c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8011c9e:	1d3a      	adds	r2, r7, #4
 8011ca0:	f107 0108 	add.w	r1, r7, #8
 8011ca4:	f107 030c 	add.w	r3, r7, #12
 8011ca8:	4618      	mov	r0, r3
 8011caa:	f7fd ff19 	bl	800fae0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8011cae:	6879      	ldr	r1, [r7, #4]
 8011cb0:	68bb      	ldr	r3, [r7, #8]
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	9202      	str	r2, [sp, #8]
 8011cb6:	9301      	str	r3, [sp, #4]
 8011cb8:	2302      	movs	r3, #2
 8011cba:	9300      	str	r3, [sp, #0]
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	460a      	mov	r2, r1
 8011cc0:	4911      	ldr	r1, [pc, #68]	@ (8011d08 <xTimerCreateTimerTask+0x88>)
 8011cc2:	4812      	ldr	r0, [pc, #72]	@ (8011d0c <xTimerCreateTimerTask+0x8c>)
 8011cc4:	f7ff f806 	bl	8010cd4 <xTaskCreateStatic>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	4a11      	ldr	r2, [pc, #68]	@ (8011d10 <xTimerCreateTimerTask+0x90>)
 8011ccc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8011cce:	4b10      	ldr	r3, [pc, #64]	@ (8011d10 <xTimerCreateTimerTask+0x90>)
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d001      	beq.n	8011cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8011cd6:	2301      	movs	r3, #1
 8011cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8011cda:	697b      	ldr	r3, [r7, #20]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d10b      	bne.n	8011cf8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8011ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011ce4:	f383 8811 	msr	BASEPRI, r3
 8011ce8:	f3bf 8f6f 	isb	sy
 8011cec:	f3bf 8f4f 	dsb	sy
 8011cf0:	613b      	str	r3, [r7, #16]
}
 8011cf2:	bf00      	nop
 8011cf4:	bf00      	nop
 8011cf6:	e7fd      	b.n	8011cf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8011cf8:	697b      	ldr	r3, [r7, #20]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}
 8011d02:	bf00      	nop
 8011d04:	20002f54 	.word	0x20002f54
 8011d08:	080141d8 	.word	0x080141d8
 8011d0c:	08011e4d 	.word	0x08011e4d
 8011d10:	20002f58 	.word	0x20002f58

08011d14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8011d14:	b580      	push	{r7, lr}
 8011d16:	b08a      	sub	sp, #40	@ 0x28
 8011d18:	af00      	add	r7, sp, #0
 8011d1a:	60f8      	str	r0, [r7, #12]
 8011d1c:	60b9      	str	r1, [r7, #8]
 8011d1e:	607a      	str	r2, [r7, #4]
 8011d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8011d22:	2300      	movs	r3, #0
 8011d24:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8011d26:	68fb      	ldr	r3, [r7, #12]
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d10b      	bne.n	8011d44 <xTimerGenericCommand+0x30>
	__asm volatile
 8011d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011d30:	f383 8811 	msr	BASEPRI, r3
 8011d34:	f3bf 8f6f 	isb	sy
 8011d38:	f3bf 8f4f 	dsb	sy
 8011d3c:	623b      	str	r3, [r7, #32]
}
 8011d3e:	bf00      	nop
 8011d40:	bf00      	nop
 8011d42:	e7fd      	b.n	8011d40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8011d44:	4b19      	ldr	r3, [pc, #100]	@ (8011dac <xTimerGenericCommand+0x98>)
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d02a      	beq.n	8011da2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8011d4c:	68bb      	ldr	r3, [r7, #8]
 8011d4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8011d58:	68bb      	ldr	r3, [r7, #8]
 8011d5a:	2b05      	cmp	r3, #5
 8011d5c:	dc18      	bgt.n	8011d90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8011d5e:	f7ff fdad 	bl	80118bc <xTaskGetSchedulerState>
 8011d62:	4603      	mov	r3, r0
 8011d64:	2b02      	cmp	r3, #2
 8011d66:	d109      	bne.n	8011d7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8011d68:	4b10      	ldr	r3, [pc, #64]	@ (8011dac <xTimerGenericCommand+0x98>)
 8011d6a:	6818      	ldr	r0, [r3, #0]
 8011d6c:	f107 0110 	add.w	r1, r7, #16
 8011d70:	2300      	movs	r3, #0
 8011d72:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011d74:	f7fe f936 	bl	800ffe4 <xQueueGenericSend>
 8011d78:	6278      	str	r0, [r7, #36]	@ 0x24
 8011d7a:	e012      	b.n	8011da2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8011d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8011dac <xTimerGenericCommand+0x98>)
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	f107 0110 	add.w	r1, r7, #16
 8011d84:	2300      	movs	r3, #0
 8011d86:	2200      	movs	r2, #0
 8011d88:	f7fe f92c 	bl	800ffe4 <xQueueGenericSend>
 8011d8c:	6278      	str	r0, [r7, #36]	@ 0x24
 8011d8e:	e008      	b.n	8011da2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8011d90:	4b06      	ldr	r3, [pc, #24]	@ (8011dac <xTimerGenericCommand+0x98>)
 8011d92:	6818      	ldr	r0, [r3, #0]
 8011d94:	f107 0110 	add.w	r1, r7, #16
 8011d98:	2300      	movs	r3, #0
 8011d9a:	683a      	ldr	r2, [r7, #0]
 8011d9c:	f7fe fa24 	bl	80101e8 <xQueueGenericSendFromISR>
 8011da0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8011da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3728      	adds	r7, #40	@ 0x28
 8011da8:	46bd      	mov	sp, r7
 8011daa:	bd80      	pop	{r7, pc}
 8011dac:	20002f54 	.word	0x20002f54

08011db0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b088      	sub	sp, #32
 8011db4:	af02      	add	r7, sp, #8
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011dba:	4b23      	ldr	r3, [pc, #140]	@ (8011e48 <prvProcessExpiredTimer+0x98>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	68db      	ldr	r3, [r3, #12]
 8011dc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	3304      	adds	r3, #4
 8011dc8:	4618      	mov	r0, r3
 8011dca:	f7fd ff2d 	bl	800fc28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011dd4:	f003 0304 	and.w	r3, r3, #4
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d023      	beq.n	8011e24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8011ddc:	697b      	ldr	r3, [r7, #20]
 8011dde:	699a      	ldr	r2, [r3, #24]
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	18d1      	adds	r1, r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	683a      	ldr	r2, [r7, #0]
 8011de8:	6978      	ldr	r0, [r7, #20]
 8011dea:	f000 f8d5 	bl	8011f98 <prvInsertTimerInActiveList>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d020      	beq.n	8011e36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8011df4:	2300      	movs	r3, #0
 8011df6:	9300      	str	r3, [sp, #0]
 8011df8:	2300      	movs	r3, #0
 8011dfa:	687a      	ldr	r2, [r7, #4]
 8011dfc:	2100      	movs	r1, #0
 8011dfe:	6978      	ldr	r0, [r7, #20]
 8011e00:	f7ff ff88 	bl	8011d14 <xTimerGenericCommand>
 8011e04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8011e06:	693b      	ldr	r3, [r7, #16]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d114      	bne.n	8011e36 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8011e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8011e10:	f383 8811 	msr	BASEPRI, r3
 8011e14:	f3bf 8f6f 	isb	sy
 8011e18:	f3bf 8f4f 	dsb	sy
 8011e1c:	60fb      	str	r3, [r7, #12]
}
 8011e1e:	bf00      	nop
 8011e20:	bf00      	nop
 8011e22:	e7fd      	b.n	8011e20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8011e24:	697b      	ldr	r3, [r7, #20]
 8011e26:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8011e2a:	f023 0301 	bic.w	r3, r3, #1
 8011e2e:	b2da      	uxtb	r2, r3
 8011e30:	697b      	ldr	r3, [r7, #20]
 8011e32:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8011e36:	697b      	ldr	r3, [r7, #20]
 8011e38:	6a1b      	ldr	r3, [r3, #32]
 8011e3a:	6978      	ldr	r0, [r7, #20]
 8011e3c:	4798      	blx	r3
}
 8011e3e:	bf00      	nop
 8011e40:	3718      	adds	r7, #24
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	20002f4c 	.word	0x20002f4c

08011e4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8011e4c:	b580      	push	{r7, lr}
 8011e4e:	b084      	sub	sp, #16
 8011e50:	af00      	add	r7, sp, #0
 8011e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e54:	f107 0308 	add.w	r3, r7, #8
 8011e58:	4618      	mov	r0, r3
 8011e5a:	f000 f859 	bl	8011f10 <prvGetNextExpireTime>
 8011e5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	4619      	mov	r1, r3
 8011e64:	68f8      	ldr	r0, [r7, #12]
 8011e66:	f000 f805 	bl	8011e74 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8011e6a:	f000 f8d7 	bl	801201c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8011e6e:	bf00      	nop
 8011e70:	e7f0      	b.n	8011e54 <prvTimerTask+0x8>
	...

08011e74 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	b084      	sub	sp, #16
 8011e78:	af00      	add	r7, sp, #0
 8011e7a:	6078      	str	r0, [r7, #4]
 8011e7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8011e7e:	f7ff f937 	bl	80110f0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8011e82:	f107 0308 	add.w	r3, r7, #8
 8011e86:	4618      	mov	r0, r3
 8011e88:	f000 f866 	bl	8011f58 <prvSampleTimeNow>
 8011e8c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d130      	bne.n	8011ef6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8011e94:	683b      	ldr	r3, [r7, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d10a      	bne.n	8011eb0 <prvProcessTimerOrBlockTask+0x3c>
 8011e9a:	687a      	ldr	r2, [r7, #4]
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	429a      	cmp	r2, r3
 8011ea0:	d806      	bhi.n	8011eb0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8011ea2:	f7ff f933 	bl	801110c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8011ea6:	68f9      	ldr	r1, [r7, #12]
 8011ea8:	6878      	ldr	r0, [r7, #4]
 8011eaa:	f7ff ff81 	bl	8011db0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8011eae:	e024      	b.n	8011efa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d008      	beq.n	8011ec8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8011eb6:	4b13      	ldr	r3, [pc, #76]	@ (8011f04 <prvProcessTimerOrBlockTask+0x90>)
 8011eb8:	681b      	ldr	r3, [r3, #0]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d101      	bne.n	8011ec4 <prvProcessTimerOrBlockTask+0x50>
 8011ec0:	2301      	movs	r3, #1
 8011ec2:	e000      	b.n	8011ec6 <prvProcessTimerOrBlockTask+0x52>
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8011ec8:	4b0f      	ldr	r3, [pc, #60]	@ (8011f08 <prvProcessTimerOrBlockTask+0x94>)
 8011eca:	6818      	ldr	r0, [r3, #0]
 8011ecc:	687a      	ldr	r2, [r7, #4]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	1ad3      	subs	r3, r2, r3
 8011ed2:	683a      	ldr	r2, [r7, #0]
 8011ed4:	4619      	mov	r1, r3
 8011ed6:	f7fe fec9 	bl	8010c6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8011eda:	f7ff f917 	bl	801110c <xTaskResumeAll>
 8011ede:	4603      	mov	r3, r0
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d10a      	bne.n	8011efa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8011ee4:	4b09      	ldr	r3, [pc, #36]	@ (8011f0c <prvProcessTimerOrBlockTask+0x98>)
 8011ee6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011eea:	601a      	str	r2, [r3, #0]
 8011eec:	f3bf 8f4f 	dsb	sy
 8011ef0:	f3bf 8f6f 	isb	sy
}
 8011ef4:	e001      	b.n	8011efa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8011ef6:	f7ff f909 	bl	801110c <xTaskResumeAll>
}
 8011efa:	bf00      	nop
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	20002f50 	.word	0x20002f50
 8011f08:	20002f54 	.word	0x20002f54
 8011f0c:	e000ed04 	.word	0xe000ed04

08011f10 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8011f10:	b480      	push	{r7}
 8011f12:	b085      	sub	sp, #20
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8011f18:	4b0e      	ldr	r3, [pc, #56]	@ (8011f54 <prvGetNextExpireTime+0x44>)
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	681b      	ldr	r3, [r3, #0]
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d101      	bne.n	8011f26 <prvGetNextExpireTime+0x16>
 8011f22:	2201      	movs	r2, #1
 8011f24:	e000      	b.n	8011f28 <prvGetNextExpireTime+0x18>
 8011f26:	2200      	movs	r2, #0
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8011f2c:	687b      	ldr	r3, [r7, #4]
 8011f2e:	681b      	ldr	r3, [r3, #0]
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d105      	bne.n	8011f40 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8011f34:	4b07      	ldr	r3, [pc, #28]	@ (8011f54 <prvGetNextExpireTime+0x44>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	60fb      	str	r3, [r7, #12]
 8011f3e:	e001      	b.n	8011f44 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8011f40:	2300      	movs	r3, #0
 8011f42:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8011f44:	68fb      	ldr	r3, [r7, #12]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3714      	adds	r7, #20
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	20002f4c 	.word	0x20002f4c

08011f58 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8011f60:	f7ff f972 	bl	8011248 <xTaskGetTickCount>
 8011f64:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8011f66:	4b0b      	ldr	r3, [pc, #44]	@ (8011f94 <prvSampleTimeNow+0x3c>)
 8011f68:	681b      	ldr	r3, [r3, #0]
 8011f6a:	68fa      	ldr	r2, [r7, #12]
 8011f6c:	429a      	cmp	r2, r3
 8011f6e:	d205      	bcs.n	8011f7c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8011f70:	f000 f93a 	bl	80121e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	2201      	movs	r2, #1
 8011f78:	601a      	str	r2, [r3, #0]
 8011f7a:	e002      	b.n	8011f82 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	2200      	movs	r2, #0
 8011f80:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8011f82:	4a04      	ldr	r2, [pc, #16]	@ (8011f94 <prvSampleTimeNow+0x3c>)
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8011f88:	68fb      	ldr	r3, [r7, #12]
}
 8011f8a:	4618      	mov	r0, r3
 8011f8c:	3710      	adds	r7, #16
 8011f8e:	46bd      	mov	sp, r7
 8011f90:	bd80      	pop	{r7, pc}
 8011f92:	bf00      	nop
 8011f94:	20002f5c 	.word	0x20002f5c

08011f98 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8011f98:	b580      	push	{r7, lr}
 8011f9a:	b086      	sub	sp, #24
 8011f9c:	af00      	add	r7, sp, #0
 8011f9e:	60f8      	str	r0, [r7, #12]
 8011fa0:	60b9      	str	r1, [r7, #8]
 8011fa2:	607a      	str	r2, [r7, #4]
 8011fa4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8011fa6:	2300      	movs	r3, #0
 8011fa8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	68ba      	ldr	r2, [r7, #8]
 8011fae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8011fb0:	68fb      	ldr	r3, [r7, #12]
 8011fb2:	68fa      	ldr	r2, [r7, #12]
 8011fb4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8011fb6:	68ba      	ldr	r2, [r7, #8]
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	429a      	cmp	r2, r3
 8011fbc:	d812      	bhi.n	8011fe4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011fbe:	687a      	ldr	r2, [r7, #4]
 8011fc0:	683b      	ldr	r3, [r7, #0]
 8011fc2:	1ad2      	subs	r2, r2, r3
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	699b      	ldr	r3, [r3, #24]
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	d302      	bcc.n	8011fd2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	617b      	str	r3, [r7, #20]
 8011fd0:	e01b      	b.n	801200a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8011fd2:	4b10      	ldr	r3, [pc, #64]	@ (8012014 <prvInsertTimerInActiveList+0x7c>)
 8011fd4:	681a      	ldr	r2, [r3, #0]
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	3304      	adds	r3, #4
 8011fda:	4619      	mov	r1, r3
 8011fdc:	4610      	mov	r0, r2
 8011fde:	f7fd fdea 	bl	800fbb6 <vListInsert>
 8011fe2:	e012      	b.n	801200a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8011fe4:	687a      	ldr	r2, [r7, #4]
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	429a      	cmp	r2, r3
 8011fea:	d206      	bcs.n	8011ffa <prvInsertTimerInActiveList+0x62>
 8011fec:	68ba      	ldr	r2, [r7, #8]
 8011fee:	683b      	ldr	r3, [r7, #0]
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d302      	bcc.n	8011ffa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8011ff4:	2301      	movs	r3, #1
 8011ff6:	617b      	str	r3, [r7, #20]
 8011ff8:	e007      	b.n	801200a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8011ffa:	4b07      	ldr	r3, [pc, #28]	@ (8012018 <prvInsertTimerInActiveList+0x80>)
 8011ffc:	681a      	ldr	r2, [r3, #0]
 8011ffe:	68fb      	ldr	r3, [r7, #12]
 8012000:	3304      	adds	r3, #4
 8012002:	4619      	mov	r1, r3
 8012004:	4610      	mov	r0, r2
 8012006:	f7fd fdd6 	bl	800fbb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801200a:	697b      	ldr	r3, [r7, #20]
}
 801200c:	4618      	mov	r0, r3
 801200e:	3718      	adds	r7, #24
 8012010:	46bd      	mov	sp, r7
 8012012:	bd80      	pop	{r7, pc}
 8012014:	20002f50 	.word	0x20002f50
 8012018:	20002f4c 	.word	0x20002f4c

0801201c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801201c:	b580      	push	{r7, lr}
 801201e:	b08e      	sub	sp, #56	@ 0x38
 8012020:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8012022:	e0ce      	b.n	80121c2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	2b00      	cmp	r3, #0
 8012028:	da19      	bge.n	801205e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801202a:	1d3b      	adds	r3, r7, #4
 801202c:	3304      	adds	r3, #4
 801202e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8012030:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012032:	2b00      	cmp	r3, #0
 8012034:	d10b      	bne.n	801204e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8012036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801203a:	f383 8811 	msr	BASEPRI, r3
 801203e:	f3bf 8f6f 	isb	sy
 8012042:	f3bf 8f4f 	dsb	sy
 8012046:	61fb      	str	r3, [r7, #28]
}
 8012048:	bf00      	nop
 801204a:	bf00      	nop
 801204c:	e7fd      	b.n	801204a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801204e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012054:	6850      	ldr	r0, [r2, #4]
 8012056:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012058:	6892      	ldr	r2, [r2, #8]
 801205a:	4611      	mov	r1, r2
 801205c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	2b00      	cmp	r3, #0
 8012062:	f2c0 80ae 	blt.w	80121c2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801206a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801206c:	695b      	ldr	r3, [r3, #20]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d004      	beq.n	801207c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012074:	3304      	adds	r3, #4
 8012076:	4618      	mov	r0, r3
 8012078:	f7fd fdd6 	bl	800fc28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801207c:	463b      	mov	r3, r7
 801207e:	4618      	mov	r0, r3
 8012080:	f7ff ff6a 	bl	8011f58 <prvSampleTimeNow>
 8012084:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	2b09      	cmp	r3, #9
 801208a:	f200 8097 	bhi.w	80121bc <prvProcessReceivedCommands+0x1a0>
 801208e:	a201      	add	r2, pc, #4	@ (adr r2, 8012094 <prvProcessReceivedCommands+0x78>)
 8012090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012094:	080120bd 	.word	0x080120bd
 8012098:	080120bd 	.word	0x080120bd
 801209c:	080120bd 	.word	0x080120bd
 80120a0:	08012133 	.word	0x08012133
 80120a4:	08012147 	.word	0x08012147
 80120a8:	08012193 	.word	0x08012193
 80120ac:	080120bd 	.word	0x080120bd
 80120b0:	080120bd 	.word	0x080120bd
 80120b4:	08012133 	.word	0x08012133
 80120b8:	08012147 	.word	0x08012147
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80120bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120c2:	f043 0301 	orr.w	r3, r3, #1
 80120c6:	b2da      	uxtb	r2, r3
 80120c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80120ce:	68ba      	ldr	r2, [r7, #8]
 80120d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120d2:	699b      	ldr	r3, [r3, #24]
 80120d4:	18d1      	adds	r1, r2, r3
 80120d6:	68bb      	ldr	r3, [r7, #8]
 80120d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80120da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120dc:	f7ff ff5c 	bl	8011f98 <prvInsertTimerInActiveList>
 80120e0:	4603      	mov	r3, r0
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d06c      	beq.n	80121c0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80120e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e8:	6a1b      	ldr	r3, [r3, #32]
 80120ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80120ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80120ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80120f4:	f003 0304 	and.w	r3, r3, #4
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d061      	beq.n	80121c0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80120fc:	68ba      	ldr	r2, [r7, #8]
 80120fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012100:	699b      	ldr	r3, [r3, #24]
 8012102:	441a      	add	r2, r3
 8012104:	2300      	movs	r3, #0
 8012106:	9300      	str	r3, [sp, #0]
 8012108:	2300      	movs	r3, #0
 801210a:	2100      	movs	r1, #0
 801210c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801210e:	f7ff fe01 	bl	8011d14 <xTimerGenericCommand>
 8012112:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8012114:	6a3b      	ldr	r3, [r7, #32]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d152      	bne.n	80121c0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 801211a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801211e:	f383 8811 	msr	BASEPRI, r3
 8012122:	f3bf 8f6f 	isb	sy
 8012126:	f3bf 8f4f 	dsb	sy
 801212a:	61bb      	str	r3, [r7, #24]
}
 801212c:	bf00      	nop
 801212e:	bf00      	nop
 8012130:	e7fd      	b.n	801212e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8012132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012138:	f023 0301 	bic.w	r3, r3, #1
 801213c:	b2da      	uxtb	r2, r3
 801213e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012140:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8012144:	e03d      	b.n	80121c2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8012146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801214c:	f043 0301 	orr.w	r3, r3, #1
 8012150:	b2da      	uxtb	r2, r3
 8012152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012154:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8012158:	68ba      	ldr	r2, [r7, #8]
 801215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801215c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801215e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012160:	699b      	ldr	r3, [r3, #24]
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10b      	bne.n	801217e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8012166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801216a:	f383 8811 	msr	BASEPRI, r3
 801216e:	f3bf 8f6f 	isb	sy
 8012172:	f3bf 8f4f 	dsb	sy
 8012176:	617b      	str	r3, [r7, #20]
}
 8012178:	bf00      	nop
 801217a:	bf00      	nop
 801217c:	e7fd      	b.n	801217a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801217e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012180:	699a      	ldr	r2, [r3, #24]
 8012182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012184:	18d1      	adds	r1, r2, r3
 8012186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801218a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801218c:	f7ff ff04 	bl	8011f98 <prvInsertTimerInActiveList>
					break;
 8012190:	e017      	b.n	80121c2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8012192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012194:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8012198:	f003 0302 	and.w	r3, r3, #2
 801219c:	2b00      	cmp	r3, #0
 801219e:	d103      	bne.n	80121a8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80121a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80121a2:	f000 fbe9 	bl	8012978 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80121a6:	e00c      	b.n	80121c2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80121a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80121ae:	f023 0301 	bic.w	r3, r3, #1
 80121b2:	b2da      	uxtb	r2, r3
 80121b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80121ba:	e002      	b.n	80121c2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80121bc:	bf00      	nop
 80121be:	e000      	b.n	80121c2 <prvProcessReceivedCommands+0x1a6>
					break;
 80121c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80121c2:	4b08      	ldr	r3, [pc, #32]	@ (80121e4 <prvProcessReceivedCommands+0x1c8>)
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	1d39      	adds	r1, r7, #4
 80121c8:	2200      	movs	r2, #0
 80121ca:	4618      	mov	r0, r3
 80121cc:	f7fe f93a 	bl	8010444 <xQueueReceive>
 80121d0:	4603      	mov	r3, r0
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	f47f af26 	bne.w	8012024 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80121d8:	bf00      	nop
 80121da:	bf00      	nop
 80121dc:	3730      	adds	r7, #48	@ 0x30
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	bf00      	nop
 80121e4:	20002f54 	.word	0x20002f54

080121e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	b088      	sub	sp, #32
 80121ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80121ee:	e049      	b.n	8012284 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80121f0:	4b2e      	ldr	r3, [pc, #184]	@ (80122ac <prvSwitchTimerLists+0xc4>)
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121fa:	4b2c      	ldr	r3, [pc, #176]	@ (80122ac <prvSwitchTimerLists+0xc4>)
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	68db      	ldr	r3, [r3, #12]
 8012200:	68db      	ldr	r3, [r3, #12]
 8012202:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	3304      	adds	r3, #4
 8012208:	4618      	mov	r0, r3
 801220a:	f7fd fd0d 	bl	800fc28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	6a1b      	ldr	r3, [r3, #32]
 8012212:	68f8      	ldr	r0, [r7, #12]
 8012214:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801221c:	f003 0304 	and.w	r3, r3, #4
 8012220:	2b00      	cmp	r3, #0
 8012222:	d02f      	beq.n	8012284 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	699b      	ldr	r3, [r3, #24]
 8012228:	693a      	ldr	r2, [r7, #16]
 801222a:	4413      	add	r3, r2
 801222c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801222e:	68ba      	ldr	r2, [r7, #8]
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	429a      	cmp	r2, r3
 8012234:	d90e      	bls.n	8012254 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8012236:	68fb      	ldr	r3, [r7, #12]
 8012238:	68ba      	ldr	r2, [r7, #8]
 801223a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	68fa      	ldr	r2, [r7, #12]
 8012240:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8012242:	4b1a      	ldr	r3, [pc, #104]	@ (80122ac <prvSwitchTimerLists+0xc4>)
 8012244:	681a      	ldr	r2, [r3, #0]
 8012246:	68fb      	ldr	r3, [r7, #12]
 8012248:	3304      	adds	r3, #4
 801224a:	4619      	mov	r1, r3
 801224c:	4610      	mov	r0, r2
 801224e:	f7fd fcb2 	bl	800fbb6 <vListInsert>
 8012252:	e017      	b.n	8012284 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8012254:	2300      	movs	r3, #0
 8012256:	9300      	str	r3, [sp, #0]
 8012258:	2300      	movs	r3, #0
 801225a:	693a      	ldr	r2, [r7, #16]
 801225c:	2100      	movs	r1, #0
 801225e:	68f8      	ldr	r0, [r7, #12]
 8012260:	f7ff fd58 	bl	8011d14 <xTimerGenericCommand>
 8012264:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	2b00      	cmp	r3, #0
 801226a:	d10b      	bne.n	8012284 <prvSwitchTimerLists+0x9c>
	__asm volatile
 801226c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012270:	f383 8811 	msr	BASEPRI, r3
 8012274:	f3bf 8f6f 	isb	sy
 8012278:	f3bf 8f4f 	dsb	sy
 801227c:	603b      	str	r3, [r7, #0]
}
 801227e:	bf00      	nop
 8012280:	bf00      	nop
 8012282:	e7fd      	b.n	8012280 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8012284:	4b09      	ldr	r3, [pc, #36]	@ (80122ac <prvSwitchTimerLists+0xc4>)
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d1b0      	bne.n	80121f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801228e:	4b07      	ldr	r3, [pc, #28]	@ (80122ac <prvSwitchTimerLists+0xc4>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8012294:	4b06      	ldr	r3, [pc, #24]	@ (80122b0 <prvSwitchTimerLists+0xc8>)
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	4a04      	ldr	r2, [pc, #16]	@ (80122ac <prvSwitchTimerLists+0xc4>)
 801229a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801229c:	4a04      	ldr	r2, [pc, #16]	@ (80122b0 <prvSwitchTimerLists+0xc8>)
 801229e:	697b      	ldr	r3, [r7, #20]
 80122a0:	6013      	str	r3, [r2, #0]
}
 80122a2:	bf00      	nop
 80122a4:	3718      	adds	r7, #24
 80122a6:	46bd      	mov	sp, r7
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	20002f4c 	.word	0x20002f4c
 80122b0:	20002f50 	.word	0x20002f50

080122b4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b082      	sub	sp, #8
 80122b8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80122ba:	f000 f96d 	bl	8012598 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80122be:	4b15      	ldr	r3, [pc, #84]	@ (8012314 <prvCheckForValidListAndQueue+0x60>)
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d120      	bne.n	8012308 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80122c6:	4814      	ldr	r0, [pc, #80]	@ (8012318 <prvCheckForValidListAndQueue+0x64>)
 80122c8:	f7fd fc24 	bl	800fb14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80122cc:	4813      	ldr	r0, [pc, #76]	@ (801231c <prvCheckForValidListAndQueue+0x68>)
 80122ce:	f7fd fc21 	bl	800fb14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80122d2:	4b13      	ldr	r3, [pc, #76]	@ (8012320 <prvCheckForValidListAndQueue+0x6c>)
 80122d4:	4a10      	ldr	r2, [pc, #64]	@ (8012318 <prvCheckForValidListAndQueue+0x64>)
 80122d6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80122d8:	4b12      	ldr	r3, [pc, #72]	@ (8012324 <prvCheckForValidListAndQueue+0x70>)
 80122da:	4a10      	ldr	r2, [pc, #64]	@ (801231c <prvCheckForValidListAndQueue+0x68>)
 80122dc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80122de:	2300      	movs	r3, #0
 80122e0:	9300      	str	r3, [sp, #0]
 80122e2:	4b11      	ldr	r3, [pc, #68]	@ (8012328 <prvCheckForValidListAndQueue+0x74>)
 80122e4:	4a11      	ldr	r2, [pc, #68]	@ (801232c <prvCheckForValidListAndQueue+0x78>)
 80122e6:	2110      	movs	r1, #16
 80122e8:	200a      	movs	r0, #10
 80122ea:	f7fd fd31 	bl	800fd50 <xQueueGenericCreateStatic>
 80122ee:	4603      	mov	r3, r0
 80122f0:	4a08      	ldr	r2, [pc, #32]	@ (8012314 <prvCheckForValidListAndQueue+0x60>)
 80122f2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80122f4:	4b07      	ldr	r3, [pc, #28]	@ (8012314 <prvCheckForValidListAndQueue+0x60>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d005      	beq.n	8012308 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80122fc:	4b05      	ldr	r3, [pc, #20]	@ (8012314 <prvCheckForValidListAndQueue+0x60>)
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	490b      	ldr	r1, [pc, #44]	@ (8012330 <prvCheckForValidListAndQueue+0x7c>)
 8012302:	4618      	mov	r0, r3
 8012304:	f7fe fc5e 	bl	8010bc4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012308:	f000 f978 	bl	80125fc <vPortExitCritical>
}
 801230c:	bf00      	nop
 801230e:	46bd      	mov	sp, r7
 8012310:	bd80      	pop	{r7, pc}
 8012312:	bf00      	nop
 8012314:	20002f54 	.word	0x20002f54
 8012318:	20002f24 	.word	0x20002f24
 801231c:	20002f38 	.word	0x20002f38
 8012320:	20002f4c 	.word	0x20002f4c
 8012324:	20002f50 	.word	0x20002f50
 8012328:	20003000 	.word	0x20003000
 801232c:	20002f60 	.word	0x20002f60
 8012330:	080141e0 	.word	0x080141e0

08012334 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012334:	b480      	push	{r7}
 8012336:	b085      	sub	sp, #20
 8012338:	af00      	add	r7, sp, #0
 801233a:	60f8      	str	r0, [r7, #12]
 801233c:	60b9      	str	r1, [r7, #8]
 801233e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	3b04      	subs	r3, #4
 8012344:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801234c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	3b04      	subs	r3, #4
 8012352:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	f023 0201 	bic.w	r2, r3, #1
 801235a:	68fb      	ldr	r3, [r7, #12]
 801235c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	3b04      	subs	r3, #4
 8012362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012364:	4a0c      	ldr	r2, [pc, #48]	@ (8012398 <pxPortInitialiseStack+0x64>)
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	3b14      	subs	r3, #20
 801236e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	3b04      	subs	r3, #4
 801237a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	f06f 0202 	mvn.w	r2, #2
 8012382:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	3b20      	subs	r3, #32
 8012388:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801238a:	68fb      	ldr	r3, [r7, #12]
}
 801238c:	4618      	mov	r0, r3
 801238e:	3714      	adds	r7, #20
 8012390:	46bd      	mov	sp, r7
 8012392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012396:	4770      	bx	lr
 8012398:	0801239d 	.word	0x0801239d

0801239c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801239c:	b480      	push	{r7}
 801239e:	b085      	sub	sp, #20
 80123a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80123a2:	2300      	movs	r3, #0
 80123a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80123a6:	4b13      	ldr	r3, [pc, #76]	@ (80123f4 <prvTaskExitError+0x58>)
 80123a8:	681b      	ldr	r3, [r3, #0]
 80123aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80123ae:	d00b      	beq.n	80123c8 <prvTaskExitError+0x2c>
	__asm volatile
 80123b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123b4:	f383 8811 	msr	BASEPRI, r3
 80123b8:	f3bf 8f6f 	isb	sy
 80123bc:	f3bf 8f4f 	dsb	sy
 80123c0:	60fb      	str	r3, [r7, #12]
}
 80123c2:	bf00      	nop
 80123c4:	bf00      	nop
 80123c6:	e7fd      	b.n	80123c4 <prvTaskExitError+0x28>
	__asm volatile
 80123c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80123cc:	f383 8811 	msr	BASEPRI, r3
 80123d0:	f3bf 8f6f 	isb	sy
 80123d4:	f3bf 8f4f 	dsb	sy
 80123d8:	60bb      	str	r3, [r7, #8]
}
 80123da:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80123dc:	bf00      	nop
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d0fc      	beq.n	80123de <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80123e4:	bf00      	nop
 80123e6:	bf00      	nop
 80123e8:	3714      	adds	r7, #20
 80123ea:	46bd      	mov	sp, r7
 80123ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f0:	4770      	bx	lr
 80123f2:	bf00      	nop
 80123f4:	2000002c 	.word	0x2000002c
	...

08012400 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012400:	4b07      	ldr	r3, [pc, #28]	@ (8012420 <pxCurrentTCBConst2>)
 8012402:	6819      	ldr	r1, [r3, #0]
 8012404:	6808      	ldr	r0, [r1, #0]
 8012406:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801240a:	f380 8809 	msr	PSP, r0
 801240e:	f3bf 8f6f 	isb	sy
 8012412:	f04f 0000 	mov.w	r0, #0
 8012416:	f380 8811 	msr	BASEPRI, r0
 801241a:	4770      	bx	lr
 801241c:	f3af 8000 	nop.w

08012420 <pxCurrentTCBConst2>:
 8012420:	20002a24 	.word	0x20002a24
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012424:	bf00      	nop
 8012426:	bf00      	nop

08012428 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012428:	4808      	ldr	r0, [pc, #32]	@ (801244c <prvPortStartFirstTask+0x24>)
 801242a:	6800      	ldr	r0, [r0, #0]
 801242c:	6800      	ldr	r0, [r0, #0]
 801242e:	f380 8808 	msr	MSP, r0
 8012432:	f04f 0000 	mov.w	r0, #0
 8012436:	f380 8814 	msr	CONTROL, r0
 801243a:	b662      	cpsie	i
 801243c:	b661      	cpsie	f
 801243e:	f3bf 8f4f 	dsb	sy
 8012442:	f3bf 8f6f 	isb	sy
 8012446:	df00      	svc	0
 8012448:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801244a:	bf00      	nop
 801244c:	e000ed08 	.word	0xe000ed08

08012450 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012450:	b580      	push	{r7, lr}
 8012452:	b086      	sub	sp, #24
 8012454:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8012456:	4b47      	ldr	r3, [pc, #284]	@ (8012574 <xPortStartScheduler+0x124>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	4a47      	ldr	r2, [pc, #284]	@ (8012578 <xPortStartScheduler+0x128>)
 801245c:	4293      	cmp	r3, r2
 801245e:	d10b      	bne.n	8012478 <xPortStartScheduler+0x28>
	__asm volatile
 8012460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012464:	f383 8811 	msr	BASEPRI, r3
 8012468:	f3bf 8f6f 	isb	sy
 801246c:	f3bf 8f4f 	dsb	sy
 8012470:	613b      	str	r3, [r7, #16]
}
 8012472:	bf00      	nop
 8012474:	bf00      	nop
 8012476:	e7fd      	b.n	8012474 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8012478:	4b3e      	ldr	r3, [pc, #248]	@ (8012574 <xPortStartScheduler+0x124>)
 801247a:	681b      	ldr	r3, [r3, #0]
 801247c:	4a3f      	ldr	r2, [pc, #252]	@ (801257c <xPortStartScheduler+0x12c>)
 801247e:	4293      	cmp	r3, r2
 8012480:	d10b      	bne.n	801249a <xPortStartScheduler+0x4a>
	__asm volatile
 8012482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012486:	f383 8811 	msr	BASEPRI, r3
 801248a:	f3bf 8f6f 	isb	sy
 801248e:	f3bf 8f4f 	dsb	sy
 8012492:	60fb      	str	r3, [r7, #12]
}
 8012494:	bf00      	nop
 8012496:	bf00      	nop
 8012498:	e7fd      	b.n	8012496 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801249a:	4b39      	ldr	r3, [pc, #228]	@ (8012580 <xPortStartScheduler+0x130>)
 801249c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801249e:	697b      	ldr	r3, [r7, #20]
 80124a0:	781b      	ldrb	r3, [r3, #0]
 80124a2:	b2db      	uxtb	r3, r3
 80124a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80124a6:	697b      	ldr	r3, [r7, #20]
 80124a8:	22ff      	movs	r2, #255	@ 0xff
 80124aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80124ac:	697b      	ldr	r3, [r7, #20]
 80124ae:	781b      	ldrb	r3, [r3, #0]
 80124b0:	b2db      	uxtb	r3, r3
 80124b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80124b4:	78fb      	ldrb	r3, [r7, #3]
 80124b6:	b2db      	uxtb	r3, r3
 80124b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80124bc:	b2da      	uxtb	r2, r3
 80124be:	4b31      	ldr	r3, [pc, #196]	@ (8012584 <xPortStartScheduler+0x134>)
 80124c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80124c2:	4b31      	ldr	r3, [pc, #196]	@ (8012588 <xPortStartScheduler+0x138>)
 80124c4:	2207      	movs	r2, #7
 80124c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124c8:	e009      	b.n	80124de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80124ca:	4b2f      	ldr	r3, [pc, #188]	@ (8012588 <xPortStartScheduler+0x138>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	3b01      	subs	r3, #1
 80124d0:	4a2d      	ldr	r2, [pc, #180]	@ (8012588 <xPortStartScheduler+0x138>)
 80124d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80124d4:	78fb      	ldrb	r3, [r7, #3]
 80124d6:	b2db      	uxtb	r3, r3
 80124d8:	005b      	lsls	r3, r3, #1
 80124da:	b2db      	uxtb	r3, r3
 80124dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80124de:	78fb      	ldrb	r3, [r7, #3]
 80124e0:	b2db      	uxtb	r3, r3
 80124e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80124e6:	2b80      	cmp	r3, #128	@ 0x80
 80124e8:	d0ef      	beq.n	80124ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80124ea:	4b27      	ldr	r3, [pc, #156]	@ (8012588 <xPortStartScheduler+0x138>)
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	f1c3 0307 	rsb	r3, r3, #7
 80124f2:	2b04      	cmp	r3, #4
 80124f4:	d00b      	beq.n	801250e <xPortStartScheduler+0xbe>
	__asm volatile
 80124f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80124fa:	f383 8811 	msr	BASEPRI, r3
 80124fe:	f3bf 8f6f 	isb	sy
 8012502:	f3bf 8f4f 	dsb	sy
 8012506:	60bb      	str	r3, [r7, #8]
}
 8012508:	bf00      	nop
 801250a:	bf00      	nop
 801250c:	e7fd      	b.n	801250a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801250e:	4b1e      	ldr	r3, [pc, #120]	@ (8012588 <xPortStartScheduler+0x138>)
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	021b      	lsls	r3, r3, #8
 8012514:	4a1c      	ldr	r2, [pc, #112]	@ (8012588 <xPortStartScheduler+0x138>)
 8012516:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012518:	4b1b      	ldr	r3, [pc, #108]	@ (8012588 <xPortStartScheduler+0x138>)
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8012520:	4a19      	ldr	r2, [pc, #100]	@ (8012588 <xPortStartScheduler+0x138>)
 8012522:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012524:	687b      	ldr	r3, [r7, #4]
 8012526:	b2da      	uxtb	r2, r3
 8012528:	697b      	ldr	r3, [r7, #20]
 801252a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801252c:	4b17      	ldr	r3, [pc, #92]	@ (801258c <xPortStartScheduler+0x13c>)
 801252e:	681b      	ldr	r3, [r3, #0]
 8012530:	4a16      	ldr	r2, [pc, #88]	@ (801258c <xPortStartScheduler+0x13c>)
 8012532:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012536:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012538:	4b14      	ldr	r3, [pc, #80]	@ (801258c <xPortStartScheduler+0x13c>)
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	4a13      	ldr	r2, [pc, #76]	@ (801258c <xPortStartScheduler+0x13c>)
 801253e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8012542:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012544:	f000 f8da 	bl	80126fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012548:	4b11      	ldr	r3, [pc, #68]	@ (8012590 <xPortStartScheduler+0x140>)
 801254a:	2200      	movs	r2, #0
 801254c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801254e:	f000 f8f9 	bl	8012744 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012552:	4b10      	ldr	r3, [pc, #64]	@ (8012594 <xPortStartScheduler+0x144>)
 8012554:	681b      	ldr	r3, [r3, #0]
 8012556:	4a0f      	ldr	r2, [pc, #60]	@ (8012594 <xPortStartScheduler+0x144>)
 8012558:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801255c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801255e:	f7ff ff63 	bl	8012428 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012562:	f7fe ff3b 	bl	80113dc <vTaskSwitchContext>
	prvTaskExitError();
 8012566:	f7ff ff19 	bl	801239c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801256a:	2300      	movs	r3, #0
}
 801256c:	4618      	mov	r0, r3
 801256e:	3718      	adds	r7, #24
 8012570:	46bd      	mov	sp, r7
 8012572:	bd80      	pop	{r7, pc}
 8012574:	e000ed00 	.word	0xe000ed00
 8012578:	410fc271 	.word	0x410fc271
 801257c:	410fc270 	.word	0x410fc270
 8012580:	e000e400 	.word	0xe000e400
 8012584:	20003050 	.word	0x20003050
 8012588:	20003054 	.word	0x20003054
 801258c:	e000ed20 	.word	0xe000ed20
 8012590:	2000002c 	.word	0x2000002c
 8012594:	e000ef34 	.word	0xe000ef34

08012598 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012598:	b480      	push	{r7}
 801259a:	b083      	sub	sp, #12
 801259c:	af00      	add	r7, sp, #0
	__asm volatile
 801259e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125a2:	f383 8811 	msr	BASEPRI, r3
 80125a6:	f3bf 8f6f 	isb	sy
 80125aa:	f3bf 8f4f 	dsb	sy
 80125ae:	607b      	str	r3, [r7, #4]
}
 80125b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80125b2:	4b10      	ldr	r3, [pc, #64]	@ (80125f4 <vPortEnterCritical+0x5c>)
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	3301      	adds	r3, #1
 80125b8:	4a0e      	ldr	r2, [pc, #56]	@ (80125f4 <vPortEnterCritical+0x5c>)
 80125ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80125bc:	4b0d      	ldr	r3, [pc, #52]	@ (80125f4 <vPortEnterCritical+0x5c>)
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	2b01      	cmp	r3, #1
 80125c2:	d110      	bne.n	80125e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80125c4:	4b0c      	ldr	r3, [pc, #48]	@ (80125f8 <vPortEnterCritical+0x60>)
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	b2db      	uxtb	r3, r3
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	d00b      	beq.n	80125e6 <vPortEnterCritical+0x4e>
	__asm volatile
 80125ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80125d2:	f383 8811 	msr	BASEPRI, r3
 80125d6:	f3bf 8f6f 	isb	sy
 80125da:	f3bf 8f4f 	dsb	sy
 80125de:	603b      	str	r3, [r7, #0]
}
 80125e0:	bf00      	nop
 80125e2:	bf00      	nop
 80125e4:	e7fd      	b.n	80125e2 <vPortEnterCritical+0x4a>
	}
}
 80125e6:	bf00      	nop
 80125e8:	370c      	adds	r7, #12
 80125ea:	46bd      	mov	sp, r7
 80125ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125f0:	4770      	bx	lr
 80125f2:	bf00      	nop
 80125f4:	2000002c 	.word	0x2000002c
 80125f8:	e000ed04 	.word	0xe000ed04

080125fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80125fc:	b480      	push	{r7}
 80125fe:	b083      	sub	sp, #12
 8012600:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012602:	4b12      	ldr	r3, [pc, #72]	@ (801264c <vPortExitCritical+0x50>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d10b      	bne.n	8012622 <vPortExitCritical+0x26>
	__asm volatile
 801260a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801260e:	f383 8811 	msr	BASEPRI, r3
 8012612:	f3bf 8f6f 	isb	sy
 8012616:	f3bf 8f4f 	dsb	sy
 801261a:	607b      	str	r3, [r7, #4]
}
 801261c:	bf00      	nop
 801261e:	bf00      	nop
 8012620:	e7fd      	b.n	801261e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8012622:	4b0a      	ldr	r3, [pc, #40]	@ (801264c <vPortExitCritical+0x50>)
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	3b01      	subs	r3, #1
 8012628:	4a08      	ldr	r2, [pc, #32]	@ (801264c <vPortExitCritical+0x50>)
 801262a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801262c:	4b07      	ldr	r3, [pc, #28]	@ (801264c <vPortExitCritical+0x50>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d105      	bne.n	8012640 <vPortExitCritical+0x44>
 8012634:	2300      	movs	r3, #0
 8012636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	f383 8811 	msr	BASEPRI, r3
}
 801263e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012640:	bf00      	nop
 8012642:	370c      	adds	r7, #12
 8012644:	46bd      	mov	sp, r7
 8012646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801264a:	4770      	bx	lr
 801264c:	2000002c 	.word	0x2000002c

08012650 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012650:	f3ef 8009 	mrs	r0, PSP
 8012654:	f3bf 8f6f 	isb	sy
 8012658:	4b15      	ldr	r3, [pc, #84]	@ (80126b0 <pxCurrentTCBConst>)
 801265a:	681a      	ldr	r2, [r3, #0]
 801265c:	f01e 0f10 	tst.w	lr, #16
 8012660:	bf08      	it	eq
 8012662:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012666:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801266a:	6010      	str	r0, [r2, #0]
 801266c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012670:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8012674:	f380 8811 	msr	BASEPRI, r0
 8012678:	f3bf 8f4f 	dsb	sy
 801267c:	f3bf 8f6f 	isb	sy
 8012680:	f7fe feac 	bl	80113dc <vTaskSwitchContext>
 8012684:	f04f 0000 	mov.w	r0, #0
 8012688:	f380 8811 	msr	BASEPRI, r0
 801268c:	bc09      	pop	{r0, r3}
 801268e:	6819      	ldr	r1, [r3, #0]
 8012690:	6808      	ldr	r0, [r1, #0]
 8012692:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012696:	f01e 0f10 	tst.w	lr, #16
 801269a:	bf08      	it	eq
 801269c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80126a0:	f380 8809 	msr	PSP, r0
 80126a4:	f3bf 8f6f 	isb	sy
 80126a8:	4770      	bx	lr
 80126aa:	bf00      	nop
 80126ac:	f3af 8000 	nop.w

080126b0 <pxCurrentTCBConst>:
 80126b0:	20002a24 	.word	0x20002a24
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80126b4:	bf00      	nop
 80126b6:	bf00      	nop

080126b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80126b8:	b580      	push	{r7, lr}
 80126ba:	b082      	sub	sp, #8
 80126bc:	af00      	add	r7, sp, #0
	__asm volatile
 80126be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80126c2:	f383 8811 	msr	BASEPRI, r3
 80126c6:	f3bf 8f6f 	isb	sy
 80126ca:	f3bf 8f4f 	dsb	sy
 80126ce:	607b      	str	r3, [r7, #4]
}
 80126d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80126d2:	f7fe fdc9 	bl	8011268 <xTaskIncrementTick>
 80126d6:	4603      	mov	r3, r0
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d003      	beq.n	80126e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80126dc:	4b06      	ldr	r3, [pc, #24]	@ (80126f8 <xPortSysTickHandler+0x40>)
 80126de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126e2:	601a      	str	r2, [r3, #0]
 80126e4:	2300      	movs	r3, #0
 80126e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	f383 8811 	msr	BASEPRI, r3
}
 80126ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80126f0:	bf00      	nop
 80126f2:	3708      	adds	r7, #8
 80126f4:	46bd      	mov	sp, r7
 80126f6:	bd80      	pop	{r7, pc}
 80126f8:	e000ed04 	.word	0xe000ed04

080126fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80126fc:	b480      	push	{r7}
 80126fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012700:	4b0b      	ldr	r3, [pc, #44]	@ (8012730 <vPortSetupTimerInterrupt+0x34>)
 8012702:	2200      	movs	r2, #0
 8012704:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012706:	4b0b      	ldr	r3, [pc, #44]	@ (8012734 <vPortSetupTimerInterrupt+0x38>)
 8012708:	2200      	movs	r2, #0
 801270a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801270c:	4b0a      	ldr	r3, [pc, #40]	@ (8012738 <vPortSetupTimerInterrupt+0x3c>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	4a0a      	ldr	r2, [pc, #40]	@ (801273c <vPortSetupTimerInterrupt+0x40>)
 8012712:	fba2 2303 	umull	r2, r3, r2, r3
 8012716:	099b      	lsrs	r3, r3, #6
 8012718:	4a09      	ldr	r2, [pc, #36]	@ (8012740 <vPortSetupTimerInterrupt+0x44>)
 801271a:	3b01      	subs	r3, #1
 801271c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801271e:	4b04      	ldr	r3, [pc, #16]	@ (8012730 <vPortSetupTimerInterrupt+0x34>)
 8012720:	2207      	movs	r2, #7
 8012722:	601a      	str	r2, [r3, #0]
}
 8012724:	bf00      	nop
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
 801272e:	bf00      	nop
 8012730:	e000e010 	.word	0xe000e010
 8012734:	e000e018 	.word	0xe000e018
 8012738:	20000000 	.word	0x20000000
 801273c:	10624dd3 	.word	0x10624dd3
 8012740:	e000e014 	.word	0xe000e014

08012744 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012744:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8012754 <vPortEnableVFP+0x10>
 8012748:	6801      	ldr	r1, [r0, #0]
 801274a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801274e:	6001      	str	r1, [r0, #0]
 8012750:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012752:	bf00      	nop
 8012754:	e000ed88 	.word	0xe000ed88

08012758 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012758:	b480      	push	{r7}
 801275a:	b085      	sub	sp, #20
 801275c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801275e:	f3ef 8305 	mrs	r3, IPSR
 8012762:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	2b0f      	cmp	r3, #15
 8012768:	d915      	bls.n	8012796 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801276a:	4a18      	ldr	r2, [pc, #96]	@ (80127cc <vPortValidateInterruptPriority+0x74>)
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	4413      	add	r3, r2
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012774:	4b16      	ldr	r3, [pc, #88]	@ (80127d0 <vPortValidateInterruptPriority+0x78>)
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	7afa      	ldrb	r2, [r7, #11]
 801277a:	429a      	cmp	r2, r3
 801277c:	d20b      	bcs.n	8012796 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801277e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012782:	f383 8811 	msr	BASEPRI, r3
 8012786:	f3bf 8f6f 	isb	sy
 801278a:	f3bf 8f4f 	dsb	sy
 801278e:	607b      	str	r3, [r7, #4]
}
 8012790:	bf00      	nop
 8012792:	bf00      	nop
 8012794:	e7fd      	b.n	8012792 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012796:	4b0f      	ldr	r3, [pc, #60]	@ (80127d4 <vPortValidateInterruptPriority+0x7c>)
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801279e:	4b0e      	ldr	r3, [pc, #56]	@ (80127d8 <vPortValidateInterruptPriority+0x80>)
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d90b      	bls.n	80127be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80127a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80127aa:	f383 8811 	msr	BASEPRI, r3
 80127ae:	f3bf 8f6f 	isb	sy
 80127b2:	f3bf 8f4f 	dsb	sy
 80127b6:	603b      	str	r3, [r7, #0]
}
 80127b8:	bf00      	nop
 80127ba:	bf00      	nop
 80127bc:	e7fd      	b.n	80127ba <vPortValidateInterruptPriority+0x62>
	}
 80127be:	bf00      	nop
 80127c0:	3714      	adds	r7, #20
 80127c2:	46bd      	mov	sp, r7
 80127c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c8:	4770      	bx	lr
 80127ca:	bf00      	nop
 80127cc:	e000e3f0 	.word	0xe000e3f0
 80127d0:	20003050 	.word	0x20003050
 80127d4:	e000ed0c 	.word	0xe000ed0c
 80127d8:	20003054 	.word	0x20003054

080127dc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b08a      	sub	sp, #40	@ 0x28
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80127e4:	2300      	movs	r3, #0
 80127e6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80127e8:	f7fe fc82 	bl	80110f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80127ec:	4b5c      	ldr	r3, [pc, #368]	@ (8012960 <pvPortMalloc+0x184>)
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d101      	bne.n	80127f8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80127f4:	f000 f924 	bl	8012a40 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80127f8:	4b5a      	ldr	r3, [pc, #360]	@ (8012964 <pvPortMalloc+0x188>)
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	4013      	ands	r3, r2
 8012800:	2b00      	cmp	r3, #0
 8012802:	f040 8095 	bne.w	8012930 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d01e      	beq.n	801284a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801280c:	2208      	movs	r2, #8
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	4413      	add	r3, r2
 8012812:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	f003 0307 	and.w	r3, r3, #7
 801281a:	2b00      	cmp	r3, #0
 801281c:	d015      	beq.n	801284a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	f023 0307 	bic.w	r3, r3, #7
 8012824:	3308      	adds	r3, #8
 8012826:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f003 0307 	and.w	r3, r3, #7
 801282e:	2b00      	cmp	r3, #0
 8012830:	d00b      	beq.n	801284a <pvPortMalloc+0x6e>
	__asm volatile
 8012832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012836:	f383 8811 	msr	BASEPRI, r3
 801283a:	f3bf 8f6f 	isb	sy
 801283e:	f3bf 8f4f 	dsb	sy
 8012842:	617b      	str	r3, [r7, #20]
}
 8012844:	bf00      	nop
 8012846:	bf00      	nop
 8012848:	e7fd      	b.n	8012846 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d06f      	beq.n	8012930 <pvPortMalloc+0x154>
 8012850:	4b45      	ldr	r3, [pc, #276]	@ (8012968 <pvPortMalloc+0x18c>)
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	687a      	ldr	r2, [r7, #4]
 8012856:	429a      	cmp	r2, r3
 8012858:	d86a      	bhi.n	8012930 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801285a:	4b44      	ldr	r3, [pc, #272]	@ (801296c <pvPortMalloc+0x190>)
 801285c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801285e:	4b43      	ldr	r3, [pc, #268]	@ (801296c <pvPortMalloc+0x190>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012864:	e004      	b.n	8012870 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8012866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012868:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801286a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8012870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012872:	685b      	ldr	r3, [r3, #4]
 8012874:	687a      	ldr	r2, [r7, #4]
 8012876:	429a      	cmp	r2, r3
 8012878:	d903      	bls.n	8012882 <pvPortMalloc+0xa6>
 801287a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	2b00      	cmp	r3, #0
 8012880:	d1f1      	bne.n	8012866 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8012882:	4b37      	ldr	r3, [pc, #220]	@ (8012960 <pvPortMalloc+0x184>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012888:	429a      	cmp	r2, r3
 801288a:	d051      	beq.n	8012930 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801288c:	6a3b      	ldr	r3, [r7, #32]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	2208      	movs	r2, #8
 8012892:	4413      	add	r3, r2
 8012894:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8012896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012898:	681a      	ldr	r2, [r3, #0]
 801289a:	6a3b      	ldr	r3, [r7, #32]
 801289c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128a0:	685a      	ldr	r2, [r3, #4]
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	1ad2      	subs	r2, r2, r3
 80128a6:	2308      	movs	r3, #8
 80128a8:	005b      	lsls	r3, r3, #1
 80128aa:	429a      	cmp	r2, r3
 80128ac:	d920      	bls.n	80128f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80128ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	4413      	add	r3, r2
 80128b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80128b6:	69bb      	ldr	r3, [r7, #24]
 80128b8:	f003 0307 	and.w	r3, r3, #7
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00b      	beq.n	80128d8 <pvPortMalloc+0xfc>
	__asm volatile
 80128c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80128c4:	f383 8811 	msr	BASEPRI, r3
 80128c8:	f3bf 8f6f 	isb	sy
 80128cc:	f3bf 8f4f 	dsb	sy
 80128d0:	613b      	str	r3, [r7, #16]
}
 80128d2:	bf00      	nop
 80128d4:	bf00      	nop
 80128d6:	e7fd      	b.n	80128d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80128d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128da:	685a      	ldr	r2, [r3, #4]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	1ad2      	subs	r2, r2, r3
 80128e0:	69bb      	ldr	r3, [r7, #24]
 80128e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80128e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128e6:	687a      	ldr	r2, [r7, #4]
 80128e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80128ea:	69b8      	ldr	r0, [r7, #24]
 80128ec:	f000 f90a 	bl	8012b04 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80128f0:	4b1d      	ldr	r3, [pc, #116]	@ (8012968 <pvPortMalloc+0x18c>)
 80128f2:	681a      	ldr	r2, [r3, #0]
 80128f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80128f6:	685b      	ldr	r3, [r3, #4]
 80128f8:	1ad3      	subs	r3, r2, r3
 80128fa:	4a1b      	ldr	r2, [pc, #108]	@ (8012968 <pvPortMalloc+0x18c>)
 80128fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80128fe:	4b1a      	ldr	r3, [pc, #104]	@ (8012968 <pvPortMalloc+0x18c>)
 8012900:	681a      	ldr	r2, [r3, #0]
 8012902:	4b1b      	ldr	r3, [pc, #108]	@ (8012970 <pvPortMalloc+0x194>)
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	429a      	cmp	r2, r3
 8012908:	d203      	bcs.n	8012912 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801290a:	4b17      	ldr	r3, [pc, #92]	@ (8012968 <pvPortMalloc+0x18c>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	4a18      	ldr	r2, [pc, #96]	@ (8012970 <pvPortMalloc+0x194>)
 8012910:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8012912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012914:	685a      	ldr	r2, [r3, #4]
 8012916:	4b13      	ldr	r3, [pc, #76]	@ (8012964 <pvPortMalloc+0x188>)
 8012918:	681b      	ldr	r3, [r3, #0]
 801291a:	431a      	orrs	r2, r3
 801291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801291e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8012920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012922:	2200      	movs	r2, #0
 8012924:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8012926:	4b13      	ldr	r3, [pc, #76]	@ (8012974 <pvPortMalloc+0x198>)
 8012928:	681b      	ldr	r3, [r3, #0]
 801292a:	3301      	adds	r3, #1
 801292c:	4a11      	ldr	r2, [pc, #68]	@ (8012974 <pvPortMalloc+0x198>)
 801292e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8012930:	f7fe fbec 	bl	801110c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8012934:	69fb      	ldr	r3, [r7, #28]
 8012936:	f003 0307 	and.w	r3, r3, #7
 801293a:	2b00      	cmp	r3, #0
 801293c:	d00b      	beq.n	8012956 <pvPortMalloc+0x17a>
	__asm volatile
 801293e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8012942:	f383 8811 	msr	BASEPRI, r3
 8012946:	f3bf 8f6f 	isb	sy
 801294a:	f3bf 8f4f 	dsb	sy
 801294e:	60fb      	str	r3, [r7, #12]
}
 8012950:	bf00      	nop
 8012952:	bf00      	nop
 8012954:	e7fd      	b.n	8012952 <pvPortMalloc+0x176>
	return pvReturn;
 8012956:	69fb      	ldr	r3, [r7, #28]
}
 8012958:	4618      	mov	r0, r3
 801295a:	3728      	adds	r7, #40	@ 0x28
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	20006c60 	.word	0x20006c60
 8012964:	20006c74 	.word	0x20006c74
 8012968:	20006c64 	.word	0x20006c64
 801296c:	20006c58 	.word	0x20006c58
 8012970:	20006c68 	.word	0x20006c68
 8012974:	20006c6c 	.word	0x20006c6c

08012978 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8012978:	b580      	push	{r7, lr}
 801297a:	b086      	sub	sp, #24
 801297c:	af00      	add	r7, sp, #0
 801297e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2b00      	cmp	r3, #0
 8012988:	d04f      	beq.n	8012a2a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801298a:	2308      	movs	r3, #8
 801298c:	425b      	negs	r3, r3
 801298e:	697a      	ldr	r2, [r7, #20]
 8012990:	4413      	add	r3, r2
 8012992:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	685a      	ldr	r2, [r3, #4]
 801299c:	4b25      	ldr	r3, [pc, #148]	@ (8012a34 <vPortFree+0xbc>)
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	4013      	ands	r3, r2
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	d10b      	bne.n	80129be <vPortFree+0x46>
	__asm volatile
 80129a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129aa:	f383 8811 	msr	BASEPRI, r3
 80129ae:	f3bf 8f6f 	isb	sy
 80129b2:	f3bf 8f4f 	dsb	sy
 80129b6:	60fb      	str	r3, [r7, #12]
}
 80129b8:	bf00      	nop
 80129ba:	bf00      	nop
 80129bc:	e7fd      	b.n	80129ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	2b00      	cmp	r3, #0
 80129c4:	d00b      	beq.n	80129de <vPortFree+0x66>
	__asm volatile
 80129c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80129ca:	f383 8811 	msr	BASEPRI, r3
 80129ce:	f3bf 8f6f 	isb	sy
 80129d2:	f3bf 8f4f 	dsb	sy
 80129d6:	60bb      	str	r3, [r7, #8]
}
 80129d8:	bf00      	nop
 80129da:	bf00      	nop
 80129dc:	e7fd      	b.n	80129da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	685a      	ldr	r2, [r3, #4]
 80129e2:	4b14      	ldr	r3, [pc, #80]	@ (8012a34 <vPortFree+0xbc>)
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	4013      	ands	r3, r2
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d01e      	beq.n	8012a2a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d11a      	bne.n	8012a2a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80129f4:	693b      	ldr	r3, [r7, #16]
 80129f6:	685a      	ldr	r2, [r3, #4]
 80129f8:	4b0e      	ldr	r3, [pc, #56]	@ (8012a34 <vPortFree+0xbc>)
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	43db      	mvns	r3, r3
 80129fe:	401a      	ands	r2, r3
 8012a00:	693b      	ldr	r3, [r7, #16]
 8012a02:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8012a04:	f7fe fb74 	bl	80110f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8012a08:	693b      	ldr	r3, [r7, #16]
 8012a0a:	685a      	ldr	r2, [r3, #4]
 8012a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8012a38 <vPortFree+0xc0>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4413      	add	r3, r2
 8012a12:	4a09      	ldr	r2, [pc, #36]	@ (8012a38 <vPortFree+0xc0>)
 8012a14:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8012a16:	6938      	ldr	r0, [r7, #16]
 8012a18:	f000 f874 	bl	8012b04 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8012a1c:	4b07      	ldr	r3, [pc, #28]	@ (8012a3c <vPortFree+0xc4>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	3301      	adds	r3, #1
 8012a22:	4a06      	ldr	r2, [pc, #24]	@ (8012a3c <vPortFree+0xc4>)
 8012a24:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8012a26:	f7fe fb71 	bl	801110c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012a2a:	bf00      	nop
 8012a2c:	3718      	adds	r7, #24
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}
 8012a32:	bf00      	nop
 8012a34:	20006c74 	.word	0x20006c74
 8012a38:	20006c64 	.word	0x20006c64
 8012a3c:	20006c70 	.word	0x20006c70

08012a40 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012a40:	b480      	push	{r7}
 8012a42:	b085      	sub	sp, #20
 8012a44:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8012a46:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8012a4a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8012a4c:	4b27      	ldr	r3, [pc, #156]	@ (8012aec <prvHeapInit+0xac>)
 8012a4e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	f003 0307 	and.w	r3, r3, #7
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00c      	beq.n	8012a74 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8012a5a:	68fb      	ldr	r3, [r7, #12]
 8012a5c:	3307      	adds	r3, #7
 8012a5e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	f023 0307 	bic.w	r3, r3, #7
 8012a66:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8012a68:	68ba      	ldr	r2, [r7, #8]
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	1ad3      	subs	r3, r2, r3
 8012a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8012aec <prvHeapInit+0xac>)
 8012a70:	4413      	add	r3, r2
 8012a72:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012a74:	68fb      	ldr	r3, [r7, #12]
 8012a76:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8012a78:	4a1d      	ldr	r2, [pc, #116]	@ (8012af0 <prvHeapInit+0xb0>)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012a7e:	4b1c      	ldr	r3, [pc, #112]	@ (8012af0 <prvHeapInit+0xb0>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	68ba      	ldr	r2, [r7, #8]
 8012a88:	4413      	add	r3, r2
 8012a8a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8012a8c:	2208      	movs	r2, #8
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	1a9b      	subs	r3, r3, r2
 8012a92:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012a94:	68fb      	ldr	r3, [r7, #12]
 8012a96:	f023 0307 	bic.w	r3, r3, #7
 8012a9a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	4a15      	ldr	r2, [pc, #84]	@ (8012af4 <prvHeapInit+0xb4>)
 8012aa0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012aa2:	4b14      	ldr	r3, [pc, #80]	@ (8012af4 <prvHeapInit+0xb4>)
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2200      	movs	r2, #0
 8012aa8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8012aaa:	4b12      	ldr	r3, [pc, #72]	@ (8012af4 <prvHeapInit+0xb4>)
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	2200      	movs	r2, #0
 8012ab0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	68fa      	ldr	r2, [r7, #12]
 8012aba:	1ad2      	subs	r2, r2, r3
 8012abc:	683b      	ldr	r3, [r7, #0]
 8012abe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8012af4 <prvHeapInit+0xb4>)
 8012ac2:	681a      	ldr	r2, [r3, #0]
 8012ac4:	683b      	ldr	r3, [r7, #0]
 8012ac6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ac8:	683b      	ldr	r3, [r7, #0]
 8012aca:	685b      	ldr	r3, [r3, #4]
 8012acc:	4a0a      	ldr	r2, [pc, #40]	@ (8012af8 <prvHeapInit+0xb8>)
 8012ace:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8012ad0:	683b      	ldr	r3, [r7, #0]
 8012ad2:	685b      	ldr	r3, [r3, #4]
 8012ad4:	4a09      	ldr	r2, [pc, #36]	@ (8012afc <prvHeapInit+0xbc>)
 8012ad6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8012ad8:	4b09      	ldr	r3, [pc, #36]	@ (8012b00 <prvHeapInit+0xc0>)
 8012ada:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8012ade:	601a      	str	r2, [r3, #0]
}
 8012ae0:	bf00      	nop
 8012ae2:	3714      	adds	r7, #20
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr
 8012aec:	20003058 	.word	0x20003058
 8012af0:	20006c58 	.word	0x20006c58
 8012af4:	20006c60 	.word	0x20006c60
 8012af8:	20006c68 	.word	0x20006c68
 8012afc:	20006c64 	.word	0x20006c64
 8012b00:	20006c74 	.word	0x20006c74

08012b04 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8012b04:	b480      	push	{r7}
 8012b06:	b085      	sub	sp, #20
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8012b0c:	4b28      	ldr	r3, [pc, #160]	@ (8012bb0 <prvInsertBlockIntoFreeList+0xac>)
 8012b0e:	60fb      	str	r3, [r7, #12]
 8012b10:	e002      	b.n	8012b18 <prvInsertBlockIntoFreeList+0x14>
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	60fb      	str	r3, [r7, #12]
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	687a      	ldr	r2, [r7, #4]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d8f7      	bhi.n	8012b12 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	685b      	ldr	r3, [r3, #4]
 8012b2a:	68ba      	ldr	r2, [r7, #8]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	687a      	ldr	r2, [r7, #4]
 8012b30:	429a      	cmp	r2, r3
 8012b32:	d108      	bne.n	8012b46 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8012b34:	68fb      	ldr	r3, [r7, #12]
 8012b36:	685a      	ldr	r2, [r3, #4]
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	685b      	ldr	r3, [r3, #4]
 8012b3c:	441a      	add	r2, r3
 8012b3e:	68fb      	ldr	r3, [r7, #12]
 8012b40:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8012b42:	68fb      	ldr	r3, [r7, #12]
 8012b44:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012b4a:	687b      	ldr	r3, [r7, #4]
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	441a      	add	r2, r3
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	429a      	cmp	r2, r3
 8012b58:	d118      	bne.n	8012b8c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	4b15      	ldr	r3, [pc, #84]	@ (8012bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	429a      	cmp	r2, r3
 8012b64:	d00d      	beq.n	8012b82 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	685a      	ldr	r2, [r3, #4]
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	681b      	ldr	r3, [r3, #0]
 8012b6e:	685b      	ldr	r3, [r3, #4]
 8012b70:	441a      	add	r2, r3
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	681a      	ldr	r2, [r3, #0]
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	601a      	str	r2, [r3, #0]
 8012b80:	e008      	b.n	8012b94 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8012b82:	4b0c      	ldr	r3, [pc, #48]	@ (8012bb4 <prvInsertBlockIntoFreeList+0xb0>)
 8012b84:	681a      	ldr	r2, [r3, #0]
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	601a      	str	r2, [r3, #0]
 8012b8a:	e003      	b.n	8012b94 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	681a      	ldr	r2, [r3, #0]
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8012b94:	68fa      	ldr	r2, [r7, #12]
 8012b96:	687b      	ldr	r3, [r7, #4]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d002      	beq.n	8012ba2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012ba2:	bf00      	nop
 8012ba4:	3714      	adds	r7, #20
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr
 8012bae:	bf00      	nop
 8012bb0:	20006c58 	.word	0x20006c58
 8012bb4:	20006c60 	.word	0x20006c60

08012bb8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8012bbc:	2201      	movs	r2, #1
 8012bbe:	490e      	ldr	r1, [pc, #56]	@ (8012bf8 <MX_USB_HOST_Init+0x40>)
 8012bc0:	480e      	ldr	r0, [pc, #56]	@ (8012bfc <MX_USB_HOST_Init+0x44>)
 8012bc2:	f7f5 f88d 	bl	8007ce0 <USBH_Init>
 8012bc6:	4603      	mov	r3, r0
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d001      	beq.n	8012bd0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8012bcc:	f7ee fd0c 	bl	80015e8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 8012bd0:	490b      	ldr	r1, [pc, #44]	@ (8012c00 <MX_USB_HOST_Init+0x48>)
 8012bd2:	480a      	ldr	r0, [pc, #40]	@ (8012bfc <MX_USB_HOST_Init+0x44>)
 8012bd4:	f7f5 f953 	bl	8007e7e <USBH_RegisterClass>
 8012bd8:	4603      	mov	r3, r0
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d001      	beq.n	8012be2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012bde:	f7ee fd03 	bl	80015e8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8012be2:	4806      	ldr	r0, [pc, #24]	@ (8012bfc <MX_USB_HOST_Init+0x44>)
 8012be4:	f7f5 f9d7 	bl	8007f96 <USBH_Start>
 8012be8:	4603      	mov	r3, r0
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d001      	beq.n	8012bf2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012bee:	f7ee fcfb 	bl	80015e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8012bf2:	bf00      	nop
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	08012c05 	.word	0x08012c05
 8012bfc:	20006c80 	.word	0x20006c80
 8012c00:	2000000c 	.word	0x2000000c

08012c04 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012c04:	b480      	push	{r7}
 8012c06:	b083      	sub	sp, #12
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	6078      	str	r0, [r7, #4]
 8012c0c:	460b      	mov	r3, r1
 8012c0e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8012c10:	78fb      	ldrb	r3, [r7, #3]
 8012c12:	3b01      	subs	r3, #1
 8012c14:	2b04      	cmp	r3, #4
 8012c16:	d81f      	bhi.n	8012c58 <USBH_UserProcess+0x54>
 8012c18:	a201      	add	r2, pc, #4	@ (adr r2, 8012c20 <USBH_UserProcess+0x1c>)
 8012c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c1e:	bf00      	nop
 8012c20:	08012c59 	.word	0x08012c59
 8012c24:	08012c43 	.word	0x08012c43
 8012c28:	08012c59 	.word	0x08012c59
 8012c2c:	08012c51 	.word	0x08012c51
 8012c30:	08012c35 	.word	0x08012c35
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012c34:	4b0c      	ldr	r3, [pc, #48]	@ (8012c68 <USBH_UserProcess+0x64>)
 8012c36:	2203      	movs	r2, #3
 8012c38:	701a      	strb	r2, [r3, #0]
//  Unmount_USB();
  to_unmount = 1;
 8012c3a:	4b0c      	ldr	r3, [pc, #48]	@ (8012c6c <USBH_UserProcess+0x68>)
 8012c3c:	2201      	movs	r2, #1
 8012c3e:	601a      	str	r2, [r3, #0]
  break;
 8012c40:	e00b      	b.n	8012c5a <USBH_UserProcess+0x56>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012c42:	4b09      	ldr	r3, [pc, #36]	@ (8012c68 <USBH_UserProcess+0x64>)
 8012c44:	2202      	movs	r2, #2
 8012c46:	701a      	strb	r2, [r3, #0]
  to_log = 1;
 8012c48:	4b09      	ldr	r3, [pc, #36]	@ (8012c70 <USBH_UserProcess+0x6c>)
 8012c4a:	2201      	movs	r2, #1
 8012c4c:	601a      	str	r2, [r3, #0]
//      Create_File("/DIR2/SUBDIR1/DIR2FILE.txt");
//      Write_File("/DIR2/SUBDIR1/DIR2FILE.txt", "This data should be in DIR2/SUBDIR1 file\n as i have nothing better to write/n so i just wrote this\n");
//
//      Update_File("/ROOTFILE.txt", "This updated data must be in second line of Root File\n");

  break;
 8012c4e:	e004      	b.n	8012c5a <USBH_UserProcess+0x56>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012c50:	4b05      	ldr	r3, [pc, #20]	@ (8012c68 <USBH_UserProcess+0x64>)
 8012c52:	2201      	movs	r2, #1
 8012c54:	701a      	strb	r2, [r3, #0]
  break;
 8012c56:	e000      	b.n	8012c5a <USBH_UserProcess+0x56>

  default:
  break;
 8012c58:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8012c5a:	bf00      	nop
 8012c5c:	370c      	adds	r7, #12
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c64:	4770      	bx	lr
 8012c66:	bf00      	nop
 8012c68:	20007064 	.word	0x20007064
 8012c6c:	20006c7c 	.word	0x20006c7c
 8012c70:	20006c78 	.word	0x20006c78

08012c74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8012c74:	b580      	push	{r7, lr}
 8012c76:	b08a      	sub	sp, #40	@ 0x28
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c7c:	f107 0314 	add.w	r3, r7, #20
 8012c80:	2200      	movs	r2, #0
 8012c82:	601a      	str	r2, [r3, #0]
 8012c84:	605a      	str	r2, [r3, #4]
 8012c86:	609a      	str	r2, [r3, #8]
 8012c88:	60da      	str	r2, [r3, #12]
 8012c8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	681b      	ldr	r3, [r3, #0]
 8012c90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012c94:	d147      	bne.n	8012d26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c96:	2300      	movs	r3, #0
 8012c98:	613b      	str	r3, [r7, #16]
 8012c9a:	4b25      	ldr	r3, [pc, #148]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012c9e:	4a24      	ldr	r2, [pc, #144]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012ca0:	f043 0301 	orr.w	r3, r3, #1
 8012ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8012ca6:	4b22      	ldr	r3, [pc, #136]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012caa:	f003 0301 	and.w	r3, r3, #1
 8012cae:	613b      	str	r3, [r7, #16]
 8012cb0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8012cb2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012cb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012cb8:	2300      	movs	r3, #0
 8012cba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012cc0:	f107 0314 	add.w	r3, r7, #20
 8012cc4:	4619      	mov	r1, r3
 8012cc6:	481b      	ldr	r0, [pc, #108]	@ (8012d34 <HAL_HCD_MspInit+0xc0>)
 8012cc8:	f7ee ff26 	bl	8001b18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8012ccc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8012cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012cd2:	2302      	movs	r3, #2
 8012cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012cda:	2303      	movs	r3, #3
 8012cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8012cde:	230a      	movs	r3, #10
 8012ce0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012ce2:	f107 0314 	add.w	r3, r7, #20
 8012ce6:	4619      	mov	r1, r3
 8012ce8:	4812      	ldr	r0, [pc, #72]	@ (8012d34 <HAL_HCD_MspInit+0xc0>)
 8012cea:	f7ee ff15 	bl	8001b18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012cee:	4b10      	ldr	r3, [pc, #64]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012cf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012cf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8012cf8:	6353      	str	r3, [r2, #52]	@ 0x34
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	60fb      	str	r3, [r7, #12]
 8012cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d02:	4a0b      	ldr	r2, [pc, #44]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012d04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8012d08:	6453      	str	r3, [r2, #68]	@ 0x44
 8012d0a:	4b09      	ldr	r3, [pc, #36]	@ (8012d30 <HAL_HCD_MspInit+0xbc>)
 8012d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8012d12:	60fb      	str	r3, [r7, #12]
 8012d14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 15, 0);
 8012d16:	2200      	movs	r2, #0
 8012d18:	210f      	movs	r1, #15
 8012d1a:	2043      	movs	r0, #67	@ 0x43
 8012d1c:	f7ee fed2 	bl	8001ac4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8012d20:	2043      	movs	r0, #67	@ 0x43
 8012d22:	f7ee feeb 	bl	8001afc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012d26:	bf00      	nop
 8012d28:	3728      	adds	r7, #40	@ 0x28
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop
 8012d30:	40023800 	.word	0x40023800
 8012d34:	40020000 	.word	0x40020000

08012d38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b082      	sub	sp, #8
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012d40:	687b      	ldr	r3, [r7, #4]
 8012d42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012d46:	4618      	mov	r0, r3
 8012d48:	f7f5 fdd7 	bl	80088fa <USBH_LL_IncTimer>
}
 8012d4c:	bf00      	nop
 8012d4e:	3708      	adds	r7, #8
 8012d50:	46bd      	mov	sp, r7
 8012d52:	bd80      	pop	{r7, pc}

08012d54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b082      	sub	sp, #8
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012d62:	4618      	mov	r0, r3
 8012d64:	f7f5 fe1b 	bl	800899e <USBH_LL_Connect>
}
 8012d68:	bf00      	nop
 8012d6a:	3708      	adds	r7, #8
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	bd80      	pop	{r7, pc}

08012d70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012d7e:	4618      	mov	r0, r3
 8012d80:	f7f5 fe30 	bl	80089e4 <USBH_LL_Disconnect>
}
 8012d84:	bf00      	nop
 8012d86:	3708      	adds	r7, #8
 8012d88:	46bd      	mov	sp, r7
 8012d8a:	bd80      	pop	{r7, pc}

08012d8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	b082      	sub	sp, #8
 8012d90:	af00      	add	r7, sp, #0
 8012d92:	6078      	str	r0, [r7, #4]
 8012d94:	460b      	mov	r3, r1
 8012d96:	70fb      	strb	r3, [r7, #3]
 8012d98:	4613      	mov	r3, r2
 8012d9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012da2:	4618      	mov	r0, r3
 8012da4:	f7f5 fe67 	bl	8008a76 <USBH_LL_NotifyURBChange>
#endif
}
 8012da8:	bf00      	nop
 8012daa:	3708      	adds	r7, #8
 8012dac:	46bd      	mov	sp, r7
 8012dae:	bd80      	pop	{r7, pc}

08012db0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	f7f5 fdc5 	bl	800894e <USBH_LL_PortEnabled>
}
 8012dc4:	bf00      	nop
 8012dc6:	3708      	adds	r7, #8
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}

08012dcc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b082      	sub	sp, #8
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8012dda:	4618      	mov	r0, r3
 8012ddc:	f7f5 fdd1 	bl	8008982 <USBH_LL_PortDisabled>
}
 8012de0:	bf00      	nop
 8012de2:	3708      	adds	r7, #8
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}

08012de8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012de8:	b580      	push	{r7, lr}
 8012dea:	b082      	sub	sp, #8
 8012dec:	af00      	add	r7, sp, #0
 8012dee:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	d12a      	bne.n	8012e50 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8012dfa:	4a18      	ldr	r2, [pc, #96]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	4a15      	ldr	r2, [pc, #84]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e06:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8012e0a:	4b14      	ldr	r3, [pc, #80]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e0c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8012e10:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012e12:	4b12      	ldr	r3, [pc, #72]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e14:	2208      	movs	r2, #8
 8012e16:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012e18:	4b10      	ldr	r3, [pc, #64]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e1a:	2201      	movs	r2, #1
 8012e1c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8012e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e20:	2200      	movs	r2, #0
 8012e22:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012e24:	4b0d      	ldr	r3, [pc, #52]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e26:	2202      	movs	r2, #2
 8012e28:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8012e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e2c:	2200      	movs	r2, #0
 8012e2e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012e30:	480a      	ldr	r0, [pc, #40]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e32:	f7ef f81d 	bl	8001e70 <HAL_HCD_Init>
 8012e36:	4603      	mov	r3, r0
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d001      	beq.n	8012e40 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8012e3c:	f7ee fbd4 	bl	80015e8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012e40:	4806      	ldr	r0, [pc, #24]	@ (8012e5c <USBH_LL_Init+0x74>)
 8012e42:	f7ef fc7d 	bl	8002740 <HAL_HCD_GetCurrentFrame>
 8012e46:	4603      	mov	r3, r0
 8012e48:	4619      	mov	r1, r3
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f7f5 fd46 	bl	80088dc <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012e50:	2300      	movs	r3, #0
}
 8012e52:	4618      	mov	r0, r3
 8012e54:	3708      	adds	r7, #8
 8012e56:	46bd      	mov	sp, r7
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	bf00      	nop
 8012e5c:	20007068 	.word	0x20007068

08012e60 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b084      	sub	sp, #16
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e68:	2300      	movs	r3, #0
 8012e6a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012e76:	4618      	mov	r0, r3
 8012e78:	f7ef fbea 	bl	8002650 <HAL_HCD_Start>
 8012e7c:	4603      	mov	r3, r0
 8012e7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012e80:	7bfb      	ldrb	r3, [r7, #15]
 8012e82:	4618      	mov	r0, r3
 8012e84:	f000 f988 	bl	8013198 <USBH_Get_USB_Status>
 8012e88:	4603      	mov	r3, r0
 8012e8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012e8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3710      	adds	r7, #16
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}

08012e96 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8012e96:	b580      	push	{r7, lr}
 8012e98:	b084      	sub	sp, #16
 8012e9a:	af00      	add	r7, sp, #0
 8012e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012eac:	4618      	mov	r0, r3
 8012eae:	f7ef fbf2 	bl	8002696 <HAL_HCD_Stop>
 8012eb2:	4603      	mov	r3, r0
 8012eb4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012eb6:	7bfb      	ldrb	r3, [r7, #15]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f000 f96d 	bl	8013198 <USBH_Get_USB_Status>
 8012ebe:	4603      	mov	r3, r0
 8012ec0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012ec2:	7bbb      	ldrb	r3, [r7, #14]
}
 8012ec4:	4618      	mov	r0, r3
 8012ec6:	3710      	adds	r7, #16
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}

08012ecc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012ed4:	2301      	movs	r3, #1
 8012ed6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012ede:	4618      	mov	r0, r3
 8012ee0:	f7ef fc3c 	bl	800275c <HAL_HCD_GetCurrentSpeed>
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	2b02      	cmp	r3, #2
 8012ee8:	d00c      	beq.n	8012f04 <USBH_LL_GetSpeed+0x38>
 8012eea:	2b02      	cmp	r3, #2
 8012eec:	d80d      	bhi.n	8012f0a <USBH_LL_GetSpeed+0x3e>
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d002      	beq.n	8012ef8 <USBH_LL_GetSpeed+0x2c>
 8012ef2:	2b01      	cmp	r3, #1
 8012ef4:	d003      	beq.n	8012efe <USBH_LL_GetSpeed+0x32>
 8012ef6:	e008      	b.n	8012f0a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012ef8:	2300      	movs	r3, #0
 8012efa:	73fb      	strb	r3, [r7, #15]
    break;
 8012efc:	e008      	b.n	8012f10 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8012efe:	2301      	movs	r3, #1
 8012f00:	73fb      	strb	r3, [r7, #15]
    break;
 8012f02:	e005      	b.n	8012f10 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012f04:	2302      	movs	r3, #2
 8012f06:	73fb      	strb	r3, [r7, #15]
    break;
 8012f08:	e002      	b.n	8012f10 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012f0a:	2301      	movs	r3, #1
 8012f0c:	73fb      	strb	r3, [r7, #15]
    break;
 8012f0e:	bf00      	nop
  }
  return  speed;
 8012f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f12:	4618      	mov	r0, r3
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}

08012f1a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012f1a:	b580      	push	{r7, lr}
 8012f1c:	b084      	sub	sp, #16
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f22:	2300      	movs	r3, #0
 8012f24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012f26:	2300      	movs	r3, #0
 8012f28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7ef fbcd 	bl	80026d0 <HAL_HCD_ResetPort>
 8012f36:	4603      	mov	r3, r0
 8012f38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012f3a:	7bfb      	ldrb	r3, [r7, #15]
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f000 f92b 	bl	8013198 <USBH_Get_USB_Status>
 8012f42:	4603      	mov	r3, r0
 8012f44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012f46:	7bbb      	ldrb	r3, [r7, #14]
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	3710      	adds	r7, #16
 8012f4c:	46bd      	mov	sp, r7
 8012f4e:	bd80      	pop	{r7, pc}

08012f50 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b082      	sub	sp, #8
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	6078      	str	r0, [r7, #4]
 8012f58:	460b      	mov	r3, r1
 8012f5a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012f62:	78fa      	ldrb	r2, [r7, #3]
 8012f64:	4611      	mov	r1, r2
 8012f66:	4618      	mov	r0, r3
 8012f68:	f7ef fbd5 	bl	8002716 <HAL_HCD_HC_GetXferCount>
 8012f6c:	4603      	mov	r3, r0
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3708      	adds	r7, #8
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}

08012f76 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8012f76:	b590      	push	{r4, r7, lr}
 8012f78:	b089      	sub	sp, #36	@ 0x24
 8012f7a:	af04      	add	r7, sp, #16
 8012f7c:	6078      	str	r0, [r7, #4]
 8012f7e:	4608      	mov	r0, r1
 8012f80:	4611      	mov	r1, r2
 8012f82:	461a      	mov	r2, r3
 8012f84:	4603      	mov	r3, r0
 8012f86:	70fb      	strb	r3, [r7, #3]
 8012f88:	460b      	mov	r3, r1
 8012f8a:	70bb      	strb	r3, [r7, #2]
 8012f8c:	4613      	mov	r3, r2
 8012f8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012f90:	2300      	movs	r3, #0
 8012f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012f94:	2300      	movs	r3, #0
 8012f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8012f9e:	787c      	ldrb	r4, [r7, #1]
 8012fa0:	78ba      	ldrb	r2, [r7, #2]
 8012fa2:	78f9      	ldrb	r1, [r7, #3]
 8012fa4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8012fa6:	9302      	str	r3, [sp, #8]
 8012fa8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012fac:	9301      	str	r3, [sp, #4]
 8012fae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	4623      	mov	r3, r4
 8012fb6:	f7ee ffc2 	bl	8001f3e <HAL_HCD_HC_Init>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8012fbe:	7bfb      	ldrb	r3, [r7, #15]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f000 f8e9 	bl	8013198 <USBH_Get_USB_Status>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012fca:	7bbb      	ldrb	r3, [r7, #14]
}
 8012fcc:	4618      	mov	r0, r3
 8012fce:	3714      	adds	r7, #20
 8012fd0:	46bd      	mov	sp, r7
 8012fd2:	bd90      	pop	{r4, r7, pc}

08012fd4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b084      	sub	sp, #16
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	6078      	str	r0, [r7, #4]
 8012fdc:	460b      	mov	r3, r1
 8012fde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012fe4:	2300      	movs	r3, #0
 8012fe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012fe8:	687b      	ldr	r3, [r7, #4]
 8012fea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8012fee:	78fa      	ldrb	r2, [r7, #3]
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	f7ef f85b 	bl	80020ae <HAL_HCD_HC_Halt>
 8012ff8:	4603      	mov	r3, r0
 8012ffa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012ffc:	7bfb      	ldrb	r3, [r7, #15]
 8012ffe:	4618      	mov	r0, r3
 8013000:	f000 f8ca 	bl	8013198 <USBH_Get_USB_Status>
 8013004:	4603      	mov	r3, r0
 8013006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013008:	7bbb      	ldrb	r3, [r7, #14]
}
 801300a:	4618      	mov	r0, r3
 801300c:	3710      	adds	r7, #16
 801300e:	46bd      	mov	sp, r7
 8013010:	bd80      	pop	{r7, pc}

08013012 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8013012:	b590      	push	{r4, r7, lr}
 8013014:	b089      	sub	sp, #36	@ 0x24
 8013016:	af04      	add	r7, sp, #16
 8013018:	6078      	str	r0, [r7, #4]
 801301a:	4608      	mov	r0, r1
 801301c:	4611      	mov	r1, r2
 801301e:	461a      	mov	r2, r3
 8013020:	4603      	mov	r3, r0
 8013022:	70fb      	strb	r3, [r7, #3]
 8013024:	460b      	mov	r3, r1
 8013026:	70bb      	strb	r3, [r7, #2]
 8013028:	4613      	mov	r3, r2
 801302a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801302c:	2300      	movs	r3, #0
 801302e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8013030:	2300      	movs	r3, #0
 8013032:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 801303a:	787c      	ldrb	r4, [r7, #1]
 801303c:	78ba      	ldrb	r2, [r7, #2]
 801303e:	78f9      	ldrb	r1, [r7, #3]
 8013040:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8013044:	9303      	str	r3, [sp, #12]
 8013046:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8013048:	9302      	str	r3, [sp, #8]
 801304a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801304c:	9301      	str	r3, [sp, #4]
 801304e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013052:	9300      	str	r3, [sp, #0]
 8013054:	4623      	mov	r3, r4
 8013056:	f7ef f84d 	bl	80020f4 <HAL_HCD_HC_SubmitRequest>
 801305a:	4603      	mov	r3, r0
 801305c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801305e:	7bfb      	ldrb	r3, [r7, #15]
 8013060:	4618      	mov	r0, r3
 8013062:	f000 f899 	bl	8013198 <USBH_Get_USB_Status>
 8013066:	4603      	mov	r3, r0
 8013068:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801306a:	7bbb      	ldrb	r3, [r7, #14]
}
 801306c:	4618      	mov	r0, r3
 801306e:	3714      	adds	r7, #20
 8013070:	46bd      	mov	sp, r7
 8013072:	bd90      	pop	{r4, r7, pc}

08013074 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8013074:	b580      	push	{r7, lr}
 8013076:	b082      	sub	sp, #8
 8013078:	af00      	add	r7, sp, #0
 801307a:	6078      	str	r0, [r7, #4]
 801307c:	460b      	mov	r3, r1
 801307e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013086:	78fa      	ldrb	r2, [r7, #3]
 8013088:	4611      	mov	r1, r2
 801308a:	4618      	mov	r0, r3
 801308c:	f7ef fb2e 	bl	80026ec <HAL_HCD_HC_GetURBState>
 8013090:	4603      	mov	r3, r0
}
 8013092:	4618      	mov	r0, r3
 8013094:	3708      	adds	r7, #8
 8013096:	46bd      	mov	sp, r7
 8013098:	bd80      	pop	{r7, pc}

0801309a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 801309a:	b580      	push	{r7, lr}
 801309c:	b082      	sub	sp, #8
 801309e:	af00      	add	r7, sp, #0
 80130a0:	6078      	str	r0, [r7, #4]
 80130a2:	460b      	mov	r3, r1
 80130a4:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 80130a6:	20c8      	movs	r0, #200	@ 0xc8
 80130a8:	f7ee fc30 	bl	800190c <HAL_Delay>
  return USBH_OK;
 80130ac:	2300      	movs	r3, #0
}
 80130ae:	4618      	mov	r0, r3
 80130b0:	3708      	adds	r7, #8
 80130b2:	46bd      	mov	sp, r7
 80130b4:	bd80      	pop	{r7, pc}

080130b6 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80130b6:	b480      	push	{r7}
 80130b8:	b085      	sub	sp, #20
 80130ba:	af00      	add	r7, sp, #0
 80130bc:	6078      	str	r0, [r7, #4]
 80130be:	460b      	mov	r3, r1
 80130c0:	70fb      	strb	r3, [r7, #3]
 80130c2:	4613      	mov	r3, r2
 80130c4:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80130cc:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80130ce:	78fa      	ldrb	r2, [r7, #3]
 80130d0:	68f9      	ldr	r1, [r7, #12]
 80130d2:	4613      	mov	r3, r2
 80130d4:	011b      	lsls	r3, r3, #4
 80130d6:	1a9b      	subs	r3, r3, r2
 80130d8:	009b      	lsls	r3, r3, #2
 80130da:	440b      	add	r3, r1
 80130dc:	3317      	adds	r3, #23
 80130de:	781b      	ldrb	r3, [r3, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d00a      	beq.n	80130fa <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80130e4:	78fa      	ldrb	r2, [r7, #3]
 80130e6:	68f9      	ldr	r1, [r7, #12]
 80130e8:	4613      	mov	r3, r2
 80130ea:	011b      	lsls	r3, r3, #4
 80130ec:	1a9b      	subs	r3, r3, r2
 80130ee:	009b      	lsls	r3, r3, #2
 80130f0:	440b      	add	r3, r1
 80130f2:	333c      	adds	r3, #60	@ 0x3c
 80130f4:	78ba      	ldrb	r2, [r7, #2]
 80130f6:	701a      	strb	r2, [r3, #0]
 80130f8:	e009      	b.n	801310e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80130fa:	78fa      	ldrb	r2, [r7, #3]
 80130fc:	68f9      	ldr	r1, [r7, #12]
 80130fe:	4613      	mov	r3, r2
 8013100:	011b      	lsls	r3, r3, #4
 8013102:	1a9b      	subs	r3, r3, r2
 8013104:	009b      	lsls	r3, r3, #2
 8013106:	440b      	add	r3, r1
 8013108:	333d      	adds	r3, #61	@ 0x3d
 801310a:	78ba      	ldrb	r2, [r7, #2]
 801310c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801310e:	2300      	movs	r3, #0
}
 8013110:	4618      	mov	r0, r3
 8013112:	3714      	adds	r7, #20
 8013114:	46bd      	mov	sp, r7
 8013116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801311a:	4770      	bx	lr

0801311c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	460b      	mov	r3, r1
 8013126:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 8013128:	2300      	movs	r3, #0
 801312a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8013132:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 8013134:	78fa      	ldrb	r2, [r7, #3]
 8013136:	68b9      	ldr	r1, [r7, #8]
 8013138:	4613      	mov	r3, r2
 801313a:	011b      	lsls	r3, r3, #4
 801313c:	1a9b      	subs	r3, r3, r2
 801313e:	009b      	lsls	r3, r3, #2
 8013140:	440b      	add	r3, r1
 8013142:	3317      	adds	r3, #23
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d00a      	beq.n	8013160 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 801314a:	78fa      	ldrb	r2, [r7, #3]
 801314c:	68b9      	ldr	r1, [r7, #8]
 801314e:	4613      	mov	r3, r2
 8013150:	011b      	lsls	r3, r3, #4
 8013152:	1a9b      	subs	r3, r3, r2
 8013154:	009b      	lsls	r3, r3, #2
 8013156:	440b      	add	r3, r1
 8013158:	333c      	adds	r3, #60	@ 0x3c
 801315a:	781b      	ldrb	r3, [r3, #0]
 801315c:	73fb      	strb	r3, [r7, #15]
 801315e:	e009      	b.n	8013174 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 8013160:	78fa      	ldrb	r2, [r7, #3]
 8013162:	68b9      	ldr	r1, [r7, #8]
 8013164:	4613      	mov	r3, r2
 8013166:	011b      	lsls	r3, r3, #4
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	009b      	lsls	r3, r3, #2
 801316c:	440b      	add	r3, r1
 801316e:	333d      	adds	r3, #61	@ 0x3d
 8013170:	781b      	ldrb	r3, [r3, #0]
 8013172:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 8013174:	7bfb      	ldrb	r3, [r7, #15]
}
 8013176:	4618      	mov	r0, r3
 8013178:	3714      	adds	r7, #20
 801317a:	46bd      	mov	sp, r7
 801317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013180:	4770      	bx	lr

08013182 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8013182:	b580      	push	{r7, lr}
 8013184:	b082      	sub	sp, #8
 8013186:	af00      	add	r7, sp, #0
 8013188:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801318a:	6878      	ldr	r0, [r7, #4]
 801318c:	f7ee fbbe 	bl	800190c <HAL_Delay>
}
 8013190:	bf00      	nop
 8013192:	3708      	adds	r7, #8
 8013194:	46bd      	mov	sp, r7
 8013196:	bd80      	pop	{r7, pc}

08013198 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013198:	b480      	push	{r7}
 801319a:	b085      	sub	sp, #20
 801319c:	af00      	add	r7, sp, #0
 801319e:	4603      	mov	r3, r0
 80131a0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80131a2:	2300      	movs	r3, #0
 80131a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80131a6:	79fb      	ldrb	r3, [r7, #7]
 80131a8:	2b03      	cmp	r3, #3
 80131aa:	d817      	bhi.n	80131dc <USBH_Get_USB_Status+0x44>
 80131ac:	a201      	add	r2, pc, #4	@ (adr r2, 80131b4 <USBH_Get_USB_Status+0x1c>)
 80131ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131b2:	bf00      	nop
 80131b4:	080131c5 	.word	0x080131c5
 80131b8:	080131cb 	.word	0x080131cb
 80131bc:	080131d1 	.word	0x080131d1
 80131c0:	080131d7 	.word	0x080131d7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80131c4:	2300      	movs	r3, #0
 80131c6:	73fb      	strb	r3, [r7, #15]
    break;
 80131c8:	e00b      	b.n	80131e2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80131ca:	2302      	movs	r3, #2
 80131cc:	73fb      	strb	r3, [r7, #15]
    break;
 80131ce:	e008      	b.n	80131e2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80131d0:	2301      	movs	r3, #1
 80131d2:	73fb      	strb	r3, [r7, #15]
    break;
 80131d4:	e005      	b.n	80131e2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80131d6:	2302      	movs	r3, #2
 80131d8:	73fb      	strb	r3, [r7, #15]
    break;
 80131da:	e002      	b.n	80131e2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80131dc:	2302      	movs	r3, #2
 80131de:	73fb      	strb	r3, [r7, #15]
    break;
 80131e0:	bf00      	nop
  }
  return usb_status;
 80131e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr

080131f0 <malloc>:
 80131f0:	4b02      	ldr	r3, [pc, #8]	@ (80131fc <malloc+0xc>)
 80131f2:	4601      	mov	r1, r0
 80131f4:	6818      	ldr	r0, [r3, #0]
 80131f6:	f000 b82d 	b.w	8013254 <_malloc_r>
 80131fa:	bf00      	nop
 80131fc:	20000030 	.word	0x20000030

08013200 <free>:
 8013200:	4b02      	ldr	r3, [pc, #8]	@ (801320c <free+0xc>)
 8013202:	4601      	mov	r1, r0
 8013204:	6818      	ldr	r0, [r3, #0]
 8013206:	f000 b923 	b.w	8013450 <_free_r>
 801320a:	bf00      	nop
 801320c:	20000030 	.word	0x20000030

08013210 <sbrk_aligned>:
 8013210:	b570      	push	{r4, r5, r6, lr}
 8013212:	4e0f      	ldr	r6, [pc, #60]	@ (8013250 <sbrk_aligned+0x40>)
 8013214:	460c      	mov	r4, r1
 8013216:	6831      	ldr	r1, [r6, #0]
 8013218:	4605      	mov	r5, r0
 801321a:	b911      	cbnz	r1, 8013222 <sbrk_aligned+0x12>
 801321c:	f000 f8ce 	bl	80133bc <_sbrk_r>
 8013220:	6030      	str	r0, [r6, #0]
 8013222:	4621      	mov	r1, r4
 8013224:	4628      	mov	r0, r5
 8013226:	f000 f8c9 	bl	80133bc <_sbrk_r>
 801322a:	1c43      	adds	r3, r0, #1
 801322c:	d103      	bne.n	8013236 <sbrk_aligned+0x26>
 801322e:	f04f 34ff 	mov.w	r4, #4294967295
 8013232:	4620      	mov	r0, r4
 8013234:	bd70      	pop	{r4, r5, r6, pc}
 8013236:	1cc4      	adds	r4, r0, #3
 8013238:	f024 0403 	bic.w	r4, r4, #3
 801323c:	42a0      	cmp	r0, r4
 801323e:	d0f8      	beq.n	8013232 <sbrk_aligned+0x22>
 8013240:	1a21      	subs	r1, r4, r0
 8013242:	4628      	mov	r0, r5
 8013244:	f000 f8ba 	bl	80133bc <_sbrk_r>
 8013248:	3001      	adds	r0, #1
 801324a:	d1f2      	bne.n	8013232 <sbrk_aligned+0x22>
 801324c:	e7ef      	b.n	801322e <sbrk_aligned+0x1e>
 801324e:	bf00      	nop
 8013250:	20007448 	.word	0x20007448

08013254 <_malloc_r>:
 8013254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013258:	1ccd      	adds	r5, r1, #3
 801325a:	f025 0503 	bic.w	r5, r5, #3
 801325e:	3508      	adds	r5, #8
 8013260:	2d0c      	cmp	r5, #12
 8013262:	bf38      	it	cc
 8013264:	250c      	movcc	r5, #12
 8013266:	2d00      	cmp	r5, #0
 8013268:	4606      	mov	r6, r0
 801326a:	db01      	blt.n	8013270 <_malloc_r+0x1c>
 801326c:	42a9      	cmp	r1, r5
 801326e:	d904      	bls.n	801327a <_malloc_r+0x26>
 8013270:	230c      	movs	r3, #12
 8013272:	6033      	str	r3, [r6, #0]
 8013274:	2000      	movs	r0, #0
 8013276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801327a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013350 <_malloc_r+0xfc>
 801327e:	f000 f869 	bl	8013354 <__malloc_lock>
 8013282:	f8d8 3000 	ldr.w	r3, [r8]
 8013286:	461c      	mov	r4, r3
 8013288:	bb44      	cbnz	r4, 80132dc <_malloc_r+0x88>
 801328a:	4629      	mov	r1, r5
 801328c:	4630      	mov	r0, r6
 801328e:	f7ff ffbf 	bl	8013210 <sbrk_aligned>
 8013292:	1c43      	adds	r3, r0, #1
 8013294:	4604      	mov	r4, r0
 8013296:	d158      	bne.n	801334a <_malloc_r+0xf6>
 8013298:	f8d8 4000 	ldr.w	r4, [r8]
 801329c:	4627      	mov	r7, r4
 801329e:	2f00      	cmp	r7, #0
 80132a0:	d143      	bne.n	801332a <_malloc_r+0xd6>
 80132a2:	2c00      	cmp	r4, #0
 80132a4:	d04b      	beq.n	801333e <_malloc_r+0xea>
 80132a6:	6823      	ldr	r3, [r4, #0]
 80132a8:	4639      	mov	r1, r7
 80132aa:	4630      	mov	r0, r6
 80132ac:	eb04 0903 	add.w	r9, r4, r3
 80132b0:	f000 f884 	bl	80133bc <_sbrk_r>
 80132b4:	4581      	cmp	r9, r0
 80132b6:	d142      	bne.n	801333e <_malloc_r+0xea>
 80132b8:	6821      	ldr	r1, [r4, #0]
 80132ba:	1a6d      	subs	r5, r5, r1
 80132bc:	4629      	mov	r1, r5
 80132be:	4630      	mov	r0, r6
 80132c0:	f7ff ffa6 	bl	8013210 <sbrk_aligned>
 80132c4:	3001      	adds	r0, #1
 80132c6:	d03a      	beq.n	801333e <_malloc_r+0xea>
 80132c8:	6823      	ldr	r3, [r4, #0]
 80132ca:	442b      	add	r3, r5
 80132cc:	6023      	str	r3, [r4, #0]
 80132ce:	f8d8 3000 	ldr.w	r3, [r8]
 80132d2:	685a      	ldr	r2, [r3, #4]
 80132d4:	bb62      	cbnz	r2, 8013330 <_malloc_r+0xdc>
 80132d6:	f8c8 7000 	str.w	r7, [r8]
 80132da:	e00f      	b.n	80132fc <_malloc_r+0xa8>
 80132dc:	6822      	ldr	r2, [r4, #0]
 80132de:	1b52      	subs	r2, r2, r5
 80132e0:	d420      	bmi.n	8013324 <_malloc_r+0xd0>
 80132e2:	2a0b      	cmp	r2, #11
 80132e4:	d917      	bls.n	8013316 <_malloc_r+0xc2>
 80132e6:	1961      	adds	r1, r4, r5
 80132e8:	42a3      	cmp	r3, r4
 80132ea:	6025      	str	r5, [r4, #0]
 80132ec:	bf18      	it	ne
 80132ee:	6059      	strne	r1, [r3, #4]
 80132f0:	6863      	ldr	r3, [r4, #4]
 80132f2:	bf08      	it	eq
 80132f4:	f8c8 1000 	streq.w	r1, [r8]
 80132f8:	5162      	str	r2, [r4, r5]
 80132fa:	604b      	str	r3, [r1, #4]
 80132fc:	4630      	mov	r0, r6
 80132fe:	f000 f82f 	bl	8013360 <__malloc_unlock>
 8013302:	f104 000b 	add.w	r0, r4, #11
 8013306:	1d23      	adds	r3, r4, #4
 8013308:	f020 0007 	bic.w	r0, r0, #7
 801330c:	1ac2      	subs	r2, r0, r3
 801330e:	bf1c      	itt	ne
 8013310:	1a1b      	subne	r3, r3, r0
 8013312:	50a3      	strne	r3, [r4, r2]
 8013314:	e7af      	b.n	8013276 <_malloc_r+0x22>
 8013316:	6862      	ldr	r2, [r4, #4]
 8013318:	42a3      	cmp	r3, r4
 801331a:	bf0c      	ite	eq
 801331c:	f8c8 2000 	streq.w	r2, [r8]
 8013320:	605a      	strne	r2, [r3, #4]
 8013322:	e7eb      	b.n	80132fc <_malloc_r+0xa8>
 8013324:	4623      	mov	r3, r4
 8013326:	6864      	ldr	r4, [r4, #4]
 8013328:	e7ae      	b.n	8013288 <_malloc_r+0x34>
 801332a:	463c      	mov	r4, r7
 801332c:	687f      	ldr	r7, [r7, #4]
 801332e:	e7b6      	b.n	801329e <_malloc_r+0x4a>
 8013330:	461a      	mov	r2, r3
 8013332:	685b      	ldr	r3, [r3, #4]
 8013334:	42a3      	cmp	r3, r4
 8013336:	d1fb      	bne.n	8013330 <_malloc_r+0xdc>
 8013338:	2300      	movs	r3, #0
 801333a:	6053      	str	r3, [r2, #4]
 801333c:	e7de      	b.n	80132fc <_malloc_r+0xa8>
 801333e:	230c      	movs	r3, #12
 8013340:	6033      	str	r3, [r6, #0]
 8013342:	4630      	mov	r0, r6
 8013344:	f000 f80c 	bl	8013360 <__malloc_unlock>
 8013348:	e794      	b.n	8013274 <_malloc_r+0x20>
 801334a:	6005      	str	r5, [r0, #0]
 801334c:	e7d6      	b.n	80132fc <_malloc_r+0xa8>
 801334e:	bf00      	nop
 8013350:	2000744c 	.word	0x2000744c

08013354 <__malloc_lock>:
 8013354:	4801      	ldr	r0, [pc, #4]	@ (801335c <__malloc_lock+0x8>)
 8013356:	f000 b86b 	b.w	8013430 <__retarget_lock_acquire_recursive>
 801335a:	bf00      	nop
 801335c:	2000758c 	.word	0x2000758c

08013360 <__malloc_unlock>:
 8013360:	4801      	ldr	r0, [pc, #4]	@ (8013368 <__malloc_unlock+0x8>)
 8013362:	f000 b866 	b.w	8013432 <__retarget_lock_release_recursive>
 8013366:	bf00      	nop
 8013368:	2000758c 	.word	0x2000758c

0801336c <siprintf>:
 801336c:	b40e      	push	{r1, r2, r3}
 801336e:	b500      	push	{lr}
 8013370:	b09c      	sub	sp, #112	@ 0x70
 8013372:	ab1d      	add	r3, sp, #116	@ 0x74
 8013374:	9002      	str	r0, [sp, #8]
 8013376:	9006      	str	r0, [sp, #24]
 8013378:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801337c:	4809      	ldr	r0, [pc, #36]	@ (80133a4 <siprintf+0x38>)
 801337e:	9107      	str	r1, [sp, #28]
 8013380:	9104      	str	r1, [sp, #16]
 8013382:	4909      	ldr	r1, [pc, #36]	@ (80133a8 <siprintf+0x3c>)
 8013384:	f853 2b04 	ldr.w	r2, [r3], #4
 8013388:	9105      	str	r1, [sp, #20]
 801338a:	6800      	ldr	r0, [r0, #0]
 801338c:	9301      	str	r3, [sp, #4]
 801338e:	a902      	add	r1, sp, #8
 8013390:	f000 f904 	bl	801359c <_svfiprintf_r>
 8013394:	9b02      	ldr	r3, [sp, #8]
 8013396:	2200      	movs	r2, #0
 8013398:	701a      	strb	r2, [r3, #0]
 801339a:	b01c      	add	sp, #112	@ 0x70
 801339c:	f85d eb04 	ldr.w	lr, [sp], #4
 80133a0:	b003      	add	sp, #12
 80133a2:	4770      	bx	lr
 80133a4:	20000030 	.word	0x20000030
 80133a8:	ffff0208 	.word	0xffff0208

080133ac <memset>:
 80133ac:	4402      	add	r2, r0
 80133ae:	4603      	mov	r3, r0
 80133b0:	4293      	cmp	r3, r2
 80133b2:	d100      	bne.n	80133b6 <memset+0xa>
 80133b4:	4770      	bx	lr
 80133b6:	f803 1b01 	strb.w	r1, [r3], #1
 80133ba:	e7f9      	b.n	80133b0 <memset+0x4>

080133bc <_sbrk_r>:
 80133bc:	b538      	push	{r3, r4, r5, lr}
 80133be:	4d06      	ldr	r5, [pc, #24]	@ (80133d8 <_sbrk_r+0x1c>)
 80133c0:	2300      	movs	r3, #0
 80133c2:	4604      	mov	r4, r0
 80133c4:	4608      	mov	r0, r1
 80133c6:	602b      	str	r3, [r5, #0]
 80133c8:	f7ee f9ec 	bl	80017a4 <_sbrk>
 80133cc:	1c43      	adds	r3, r0, #1
 80133ce:	d102      	bne.n	80133d6 <_sbrk_r+0x1a>
 80133d0:	682b      	ldr	r3, [r5, #0]
 80133d2:	b103      	cbz	r3, 80133d6 <_sbrk_r+0x1a>
 80133d4:	6023      	str	r3, [r4, #0]
 80133d6:	bd38      	pop	{r3, r4, r5, pc}
 80133d8:	20007588 	.word	0x20007588

080133dc <__errno>:
 80133dc:	4b01      	ldr	r3, [pc, #4]	@ (80133e4 <__errno+0x8>)
 80133de:	6818      	ldr	r0, [r3, #0]
 80133e0:	4770      	bx	lr
 80133e2:	bf00      	nop
 80133e4:	20000030 	.word	0x20000030

080133e8 <__libc_init_array>:
 80133e8:	b570      	push	{r4, r5, r6, lr}
 80133ea:	4d0d      	ldr	r5, [pc, #52]	@ (8013420 <__libc_init_array+0x38>)
 80133ec:	4c0d      	ldr	r4, [pc, #52]	@ (8013424 <__libc_init_array+0x3c>)
 80133ee:	1b64      	subs	r4, r4, r5
 80133f0:	10a4      	asrs	r4, r4, #2
 80133f2:	2600      	movs	r6, #0
 80133f4:	42a6      	cmp	r6, r4
 80133f6:	d109      	bne.n	801340c <__libc_init_array+0x24>
 80133f8:	4d0b      	ldr	r5, [pc, #44]	@ (8013428 <__libc_init_array+0x40>)
 80133fa:	4c0c      	ldr	r4, [pc, #48]	@ (801342c <__libc_init_array+0x44>)
 80133fc:	f000 fba8 	bl	8013b50 <_init>
 8013400:	1b64      	subs	r4, r4, r5
 8013402:	10a4      	asrs	r4, r4, #2
 8013404:	2600      	movs	r6, #0
 8013406:	42a6      	cmp	r6, r4
 8013408:	d105      	bne.n	8013416 <__libc_init_array+0x2e>
 801340a:	bd70      	pop	{r4, r5, r6, pc}
 801340c:	f855 3b04 	ldr.w	r3, [r5], #4
 8013410:	4798      	blx	r3
 8013412:	3601      	adds	r6, #1
 8013414:	e7ee      	b.n	80133f4 <__libc_init_array+0xc>
 8013416:	f855 3b04 	ldr.w	r3, [r5], #4
 801341a:	4798      	blx	r3
 801341c:	3601      	adds	r6, #1
 801341e:	e7f2      	b.n	8013406 <__libc_init_array+0x1e>
 8013420:	080146b4 	.word	0x080146b4
 8013424:	080146b4 	.word	0x080146b4
 8013428:	080146b4 	.word	0x080146b4
 801342c:	080146b8 	.word	0x080146b8

08013430 <__retarget_lock_acquire_recursive>:
 8013430:	4770      	bx	lr

08013432 <__retarget_lock_release_recursive>:
 8013432:	4770      	bx	lr

08013434 <memcpy>:
 8013434:	440a      	add	r2, r1
 8013436:	4291      	cmp	r1, r2
 8013438:	f100 33ff 	add.w	r3, r0, #4294967295
 801343c:	d100      	bne.n	8013440 <memcpy+0xc>
 801343e:	4770      	bx	lr
 8013440:	b510      	push	{r4, lr}
 8013442:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013446:	f803 4f01 	strb.w	r4, [r3, #1]!
 801344a:	4291      	cmp	r1, r2
 801344c:	d1f9      	bne.n	8013442 <memcpy+0xe>
 801344e:	bd10      	pop	{r4, pc}

08013450 <_free_r>:
 8013450:	b538      	push	{r3, r4, r5, lr}
 8013452:	4605      	mov	r5, r0
 8013454:	2900      	cmp	r1, #0
 8013456:	d041      	beq.n	80134dc <_free_r+0x8c>
 8013458:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801345c:	1f0c      	subs	r4, r1, #4
 801345e:	2b00      	cmp	r3, #0
 8013460:	bfb8      	it	lt
 8013462:	18e4      	addlt	r4, r4, r3
 8013464:	f7ff ff76 	bl	8013354 <__malloc_lock>
 8013468:	4a1d      	ldr	r2, [pc, #116]	@ (80134e0 <_free_r+0x90>)
 801346a:	6813      	ldr	r3, [r2, #0]
 801346c:	b933      	cbnz	r3, 801347c <_free_r+0x2c>
 801346e:	6063      	str	r3, [r4, #4]
 8013470:	6014      	str	r4, [r2, #0]
 8013472:	4628      	mov	r0, r5
 8013474:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013478:	f7ff bf72 	b.w	8013360 <__malloc_unlock>
 801347c:	42a3      	cmp	r3, r4
 801347e:	d908      	bls.n	8013492 <_free_r+0x42>
 8013480:	6820      	ldr	r0, [r4, #0]
 8013482:	1821      	adds	r1, r4, r0
 8013484:	428b      	cmp	r3, r1
 8013486:	bf01      	itttt	eq
 8013488:	6819      	ldreq	r1, [r3, #0]
 801348a:	685b      	ldreq	r3, [r3, #4]
 801348c:	1809      	addeq	r1, r1, r0
 801348e:	6021      	streq	r1, [r4, #0]
 8013490:	e7ed      	b.n	801346e <_free_r+0x1e>
 8013492:	461a      	mov	r2, r3
 8013494:	685b      	ldr	r3, [r3, #4]
 8013496:	b10b      	cbz	r3, 801349c <_free_r+0x4c>
 8013498:	42a3      	cmp	r3, r4
 801349a:	d9fa      	bls.n	8013492 <_free_r+0x42>
 801349c:	6811      	ldr	r1, [r2, #0]
 801349e:	1850      	adds	r0, r2, r1
 80134a0:	42a0      	cmp	r0, r4
 80134a2:	d10b      	bne.n	80134bc <_free_r+0x6c>
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	4401      	add	r1, r0
 80134a8:	1850      	adds	r0, r2, r1
 80134aa:	4283      	cmp	r3, r0
 80134ac:	6011      	str	r1, [r2, #0]
 80134ae:	d1e0      	bne.n	8013472 <_free_r+0x22>
 80134b0:	6818      	ldr	r0, [r3, #0]
 80134b2:	685b      	ldr	r3, [r3, #4]
 80134b4:	6053      	str	r3, [r2, #4]
 80134b6:	4408      	add	r0, r1
 80134b8:	6010      	str	r0, [r2, #0]
 80134ba:	e7da      	b.n	8013472 <_free_r+0x22>
 80134bc:	d902      	bls.n	80134c4 <_free_r+0x74>
 80134be:	230c      	movs	r3, #12
 80134c0:	602b      	str	r3, [r5, #0]
 80134c2:	e7d6      	b.n	8013472 <_free_r+0x22>
 80134c4:	6820      	ldr	r0, [r4, #0]
 80134c6:	1821      	adds	r1, r4, r0
 80134c8:	428b      	cmp	r3, r1
 80134ca:	bf04      	itt	eq
 80134cc:	6819      	ldreq	r1, [r3, #0]
 80134ce:	685b      	ldreq	r3, [r3, #4]
 80134d0:	6063      	str	r3, [r4, #4]
 80134d2:	bf04      	itt	eq
 80134d4:	1809      	addeq	r1, r1, r0
 80134d6:	6021      	streq	r1, [r4, #0]
 80134d8:	6054      	str	r4, [r2, #4]
 80134da:	e7ca      	b.n	8013472 <_free_r+0x22>
 80134dc:	bd38      	pop	{r3, r4, r5, pc}
 80134de:	bf00      	nop
 80134e0:	2000744c 	.word	0x2000744c

080134e4 <__ssputs_r>:
 80134e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134e8:	688e      	ldr	r6, [r1, #8]
 80134ea:	461f      	mov	r7, r3
 80134ec:	42be      	cmp	r6, r7
 80134ee:	680b      	ldr	r3, [r1, #0]
 80134f0:	4682      	mov	sl, r0
 80134f2:	460c      	mov	r4, r1
 80134f4:	4690      	mov	r8, r2
 80134f6:	d82d      	bhi.n	8013554 <__ssputs_r+0x70>
 80134f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80134fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013500:	d026      	beq.n	8013550 <__ssputs_r+0x6c>
 8013502:	6965      	ldr	r5, [r4, #20]
 8013504:	6909      	ldr	r1, [r1, #16]
 8013506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801350a:	eba3 0901 	sub.w	r9, r3, r1
 801350e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013512:	1c7b      	adds	r3, r7, #1
 8013514:	444b      	add	r3, r9
 8013516:	106d      	asrs	r5, r5, #1
 8013518:	429d      	cmp	r5, r3
 801351a:	bf38      	it	cc
 801351c:	461d      	movcc	r5, r3
 801351e:	0553      	lsls	r3, r2, #21
 8013520:	d527      	bpl.n	8013572 <__ssputs_r+0x8e>
 8013522:	4629      	mov	r1, r5
 8013524:	f7ff fe96 	bl	8013254 <_malloc_r>
 8013528:	4606      	mov	r6, r0
 801352a:	b360      	cbz	r0, 8013586 <__ssputs_r+0xa2>
 801352c:	6921      	ldr	r1, [r4, #16]
 801352e:	464a      	mov	r2, r9
 8013530:	f7ff ff80 	bl	8013434 <memcpy>
 8013534:	89a3      	ldrh	r3, [r4, #12]
 8013536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801353a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801353e:	81a3      	strh	r3, [r4, #12]
 8013540:	6126      	str	r6, [r4, #16]
 8013542:	6165      	str	r5, [r4, #20]
 8013544:	444e      	add	r6, r9
 8013546:	eba5 0509 	sub.w	r5, r5, r9
 801354a:	6026      	str	r6, [r4, #0]
 801354c:	60a5      	str	r5, [r4, #8]
 801354e:	463e      	mov	r6, r7
 8013550:	42be      	cmp	r6, r7
 8013552:	d900      	bls.n	8013556 <__ssputs_r+0x72>
 8013554:	463e      	mov	r6, r7
 8013556:	6820      	ldr	r0, [r4, #0]
 8013558:	4632      	mov	r2, r6
 801355a:	4641      	mov	r1, r8
 801355c:	f000 faa8 	bl	8013ab0 <memmove>
 8013560:	68a3      	ldr	r3, [r4, #8]
 8013562:	1b9b      	subs	r3, r3, r6
 8013564:	60a3      	str	r3, [r4, #8]
 8013566:	6823      	ldr	r3, [r4, #0]
 8013568:	4433      	add	r3, r6
 801356a:	6023      	str	r3, [r4, #0]
 801356c:	2000      	movs	r0, #0
 801356e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013572:	462a      	mov	r2, r5
 8013574:	f000 fab6 	bl	8013ae4 <_realloc_r>
 8013578:	4606      	mov	r6, r0
 801357a:	2800      	cmp	r0, #0
 801357c:	d1e0      	bne.n	8013540 <__ssputs_r+0x5c>
 801357e:	6921      	ldr	r1, [r4, #16]
 8013580:	4650      	mov	r0, sl
 8013582:	f7ff ff65 	bl	8013450 <_free_r>
 8013586:	230c      	movs	r3, #12
 8013588:	f8ca 3000 	str.w	r3, [sl]
 801358c:	89a3      	ldrh	r3, [r4, #12]
 801358e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013592:	81a3      	strh	r3, [r4, #12]
 8013594:	f04f 30ff 	mov.w	r0, #4294967295
 8013598:	e7e9      	b.n	801356e <__ssputs_r+0x8a>
	...

0801359c <_svfiprintf_r>:
 801359c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135a0:	4698      	mov	r8, r3
 80135a2:	898b      	ldrh	r3, [r1, #12]
 80135a4:	061b      	lsls	r3, r3, #24
 80135a6:	b09d      	sub	sp, #116	@ 0x74
 80135a8:	4607      	mov	r7, r0
 80135aa:	460d      	mov	r5, r1
 80135ac:	4614      	mov	r4, r2
 80135ae:	d510      	bpl.n	80135d2 <_svfiprintf_r+0x36>
 80135b0:	690b      	ldr	r3, [r1, #16]
 80135b2:	b973      	cbnz	r3, 80135d2 <_svfiprintf_r+0x36>
 80135b4:	2140      	movs	r1, #64	@ 0x40
 80135b6:	f7ff fe4d 	bl	8013254 <_malloc_r>
 80135ba:	6028      	str	r0, [r5, #0]
 80135bc:	6128      	str	r0, [r5, #16]
 80135be:	b930      	cbnz	r0, 80135ce <_svfiprintf_r+0x32>
 80135c0:	230c      	movs	r3, #12
 80135c2:	603b      	str	r3, [r7, #0]
 80135c4:	f04f 30ff 	mov.w	r0, #4294967295
 80135c8:	b01d      	add	sp, #116	@ 0x74
 80135ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135ce:	2340      	movs	r3, #64	@ 0x40
 80135d0:	616b      	str	r3, [r5, #20]
 80135d2:	2300      	movs	r3, #0
 80135d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80135d6:	2320      	movs	r3, #32
 80135d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80135dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80135e0:	2330      	movs	r3, #48	@ 0x30
 80135e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8013780 <_svfiprintf_r+0x1e4>
 80135e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80135ea:	f04f 0901 	mov.w	r9, #1
 80135ee:	4623      	mov	r3, r4
 80135f0:	469a      	mov	sl, r3
 80135f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135f6:	b10a      	cbz	r2, 80135fc <_svfiprintf_r+0x60>
 80135f8:	2a25      	cmp	r2, #37	@ 0x25
 80135fa:	d1f9      	bne.n	80135f0 <_svfiprintf_r+0x54>
 80135fc:	ebba 0b04 	subs.w	fp, sl, r4
 8013600:	d00b      	beq.n	801361a <_svfiprintf_r+0x7e>
 8013602:	465b      	mov	r3, fp
 8013604:	4622      	mov	r2, r4
 8013606:	4629      	mov	r1, r5
 8013608:	4638      	mov	r0, r7
 801360a:	f7ff ff6b 	bl	80134e4 <__ssputs_r>
 801360e:	3001      	adds	r0, #1
 8013610:	f000 80a7 	beq.w	8013762 <_svfiprintf_r+0x1c6>
 8013614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013616:	445a      	add	r2, fp
 8013618:	9209      	str	r2, [sp, #36]	@ 0x24
 801361a:	f89a 3000 	ldrb.w	r3, [sl]
 801361e:	2b00      	cmp	r3, #0
 8013620:	f000 809f 	beq.w	8013762 <_svfiprintf_r+0x1c6>
 8013624:	2300      	movs	r3, #0
 8013626:	f04f 32ff 	mov.w	r2, #4294967295
 801362a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801362e:	f10a 0a01 	add.w	sl, sl, #1
 8013632:	9304      	str	r3, [sp, #16]
 8013634:	9307      	str	r3, [sp, #28]
 8013636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801363a:	931a      	str	r3, [sp, #104]	@ 0x68
 801363c:	4654      	mov	r4, sl
 801363e:	2205      	movs	r2, #5
 8013640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013644:	484e      	ldr	r0, [pc, #312]	@ (8013780 <_svfiprintf_r+0x1e4>)
 8013646:	f7ec fdeb 	bl	8000220 <memchr>
 801364a:	9a04      	ldr	r2, [sp, #16]
 801364c:	b9d8      	cbnz	r0, 8013686 <_svfiprintf_r+0xea>
 801364e:	06d0      	lsls	r0, r2, #27
 8013650:	bf44      	itt	mi
 8013652:	2320      	movmi	r3, #32
 8013654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013658:	0711      	lsls	r1, r2, #28
 801365a:	bf44      	itt	mi
 801365c:	232b      	movmi	r3, #43	@ 0x2b
 801365e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013662:	f89a 3000 	ldrb.w	r3, [sl]
 8013666:	2b2a      	cmp	r3, #42	@ 0x2a
 8013668:	d015      	beq.n	8013696 <_svfiprintf_r+0xfa>
 801366a:	9a07      	ldr	r2, [sp, #28]
 801366c:	4654      	mov	r4, sl
 801366e:	2000      	movs	r0, #0
 8013670:	f04f 0c0a 	mov.w	ip, #10
 8013674:	4621      	mov	r1, r4
 8013676:	f811 3b01 	ldrb.w	r3, [r1], #1
 801367a:	3b30      	subs	r3, #48	@ 0x30
 801367c:	2b09      	cmp	r3, #9
 801367e:	d94b      	bls.n	8013718 <_svfiprintf_r+0x17c>
 8013680:	b1b0      	cbz	r0, 80136b0 <_svfiprintf_r+0x114>
 8013682:	9207      	str	r2, [sp, #28]
 8013684:	e014      	b.n	80136b0 <_svfiprintf_r+0x114>
 8013686:	eba0 0308 	sub.w	r3, r0, r8
 801368a:	fa09 f303 	lsl.w	r3, r9, r3
 801368e:	4313      	orrs	r3, r2
 8013690:	9304      	str	r3, [sp, #16]
 8013692:	46a2      	mov	sl, r4
 8013694:	e7d2      	b.n	801363c <_svfiprintf_r+0xa0>
 8013696:	9b03      	ldr	r3, [sp, #12]
 8013698:	1d19      	adds	r1, r3, #4
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	9103      	str	r1, [sp, #12]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	bfbb      	ittet	lt
 80136a2:	425b      	neglt	r3, r3
 80136a4:	f042 0202 	orrlt.w	r2, r2, #2
 80136a8:	9307      	strge	r3, [sp, #28]
 80136aa:	9307      	strlt	r3, [sp, #28]
 80136ac:	bfb8      	it	lt
 80136ae:	9204      	strlt	r2, [sp, #16]
 80136b0:	7823      	ldrb	r3, [r4, #0]
 80136b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80136b4:	d10a      	bne.n	80136cc <_svfiprintf_r+0x130>
 80136b6:	7863      	ldrb	r3, [r4, #1]
 80136b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80136ba:	d132      	bne.n	8013722 <_svfiprintf_r+0x186>
 80136bc:	9b03      	ldr	r3, [sp, #12]
 80136be:	1d1a      	adds	r2, r3, #4
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	9203      	str	r2, [sp, #12]
 80136c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80136c8:	3402      	adds	r4, #2
 80136ca:	9305      	str	r3, [sp, #20]
 80136cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8013790 <_svfiprintf_r+0x1f4>
 80136d0:	7821      	ldrb	r1, [r4, #0]
 80136d2:	2203      	movs	r2, #3
 80136d4:	4650      	mov	r0, sl
 80136d6:	f7ec fda3 	bl	8000220 <memchr>
 80136da:	b138      	cbz	r0, 80136ec <_svfiprintf_r+0x150>
 80136dc:	9b04      	ldr	r3, [sp, #16]
 80136de:	eba0 000a 	sub.w	r0, r0, sl
 80136e2:	2240      	movs	r2, #64	@ 0x40
 80136e4:	4082      	lsls	r2, r0
 80136e6:	4313      	orrs	r3, r2
 80136e8:	3401      	adds	r4, #1
 80136ea:	9304      	str	r3, [sp, #16]
 80136ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136f0:	4824      	ldr	r0, [pc, #144]	@ (8013784 <_svfiprintf_r+0x1e8>)
 80136f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80136f6:	2206      	movs	r2, #6
 80136f8:	f7ec fd92 	bl	8000220 <memchr>
 80136fc:	2800      	cmp	r0, #0
 80136fe:	d036      	beq.n	801376e <_svfiprintf_r+0x1d2>
 8013700:	4b21      	ldr	r3, [pc, #132]	@ (8013788 <_svfiprintf_r+0x1ec>)
 8013702:	bb1b      	cbnz	r3, 801374c <_svfiprintf_r+0x1b0>
 8013704:	9b03      	ldr	r3, [sp, #12]
 8013706:	3307      	adds	r3, #7
 8013708:	f023 0307 	bic.w	r3, r3, #7
 801370c:	3308      	adds	r3, #8
 801370e:	9303      	str	r3, [sp, #12]
 8013710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013712:	4433      	add	r3, r6
 8013714:	9309      	str	r3, [sp, #36]	@ 0x24
 8013716:	e76a      	b.n	80135ee <_svfiprintf_r+0x52>
 8013718:	fb0c 3202 	mla	r2, ip, r2, r3
 801371c:	460c      	mov	r4, r1
 801371e:	2001      	movs	r0, #1
 8013720:	e7a8      	b.n	8013674 <_svfiprintf_r+0xd8>
 8013722:	2300      	movs	r3, #0
 8013724:	3401      	adds	r4, #1
 8013726:	9305      	str	r3, [sp, #20]
 8013728:	4619      	mov	r1, r3
 801372a:	f04f 0c0a 	mov.w	ip, #10
 801372e:	4620      	mov	r0, r4
 8013730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013734:	3a30      	subs	r2, #48	@ 0x30
 8013736:	2a09      	cmp	r2, #9
 8013738:	d903      	bls.n	8013742 <_svfiprintf_r+0x1a6>
 801373a:	2b00      	cmp	r3, #0
 801373c:	d0c6      	beq.n	80136cc <_svfiprintf_r+0x130>
 801373e:	9105      	str	r1, [sp, #20]
 8013740:	e7c4      	b.n	80136cc <_svfiprintf_r+0x130>
 8013742:	fb0c 2101 	mla	r1, ip, r1, r2
 8013746:	4604      	mov	r4, r0
 8013748:	2301      	movs	r3, #1
 801374a:	e7f0      	b.n	801372e <_svfiprintf_r+0x192>
 801374c:	ab03      	add	r3, sp, #12
 801374e:	9300      	str	r3, [sp, #0]
 8013750:	462a      	mov	r2, r5
 8013752:	4b0e      	ldr	r3, [pc, #56]	@ (801378c <_svfiprintf_r+0x1f0>)
 8013754:	a904      	add	r1, sp, #16
 8013756:	4638      	mov	r0, r7
 8013758:	f3af 8000 	nop.w
 801375c:	1c42      	adds	r2, r0, #1
 801375e:	4606      	mov	r6, r0
 8013760:	d1d6      	bne.n	8013710 <_svfiprintf_r+0x174>
 8013762:	89ab      	ldrh	r3, [r5, #12]
 8013764:	065b      	lsls	r3, r3, #25
 8013766:	f53f af2d 	bmi.w	80135c4 <_svfiprintf_r+0x28>
 801376a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801376c:	e72c      	b.n	80135c8 <_svfiprintf_r+0x2c>
 801376e:	ab03      	add	r3, sp, #12
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	462a      	mov	r2, r5
 8013774:	4b05      	ldr	r3, [pc, #20]	@ (801378c <_svfiprintf_r+0x1f0>)
 8013776:	a904      	add	r1, sp, #16
 8013778:	4638      	mov	r0, r7
 801377a:	f000 f879 	bl	8013870 <_printf_i>
 801377e:	e7ed      	b.n	801375c <_svfiprintf_r+0x1c0>
 8013780:	08014678 	.word	0x08014678
 8013784:	08014682 	.word	0x08014682
 8013788:	00000000 	.word	0x00000000
 801378c:	080134e5 	.word	0x080134e5
 8013790:	0801467e 	.word	0x0801467e

08013794 <_printf_common>:
 8013794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013798:	4616      	mov	r6, r2
 801379a:	4698      	mov	r8, r3
 801379c:	688a      	ldr	r2, [r1, #8]
 801379e:	690b      	ldr	r3, [r1, #16]
 80137a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80137a4:	4293      	cmp	r3, r2
 80137a6:	bfb8      	it	lt
 80137a8:	4613      	movlt	r3, r2
 80137aa:	6033      	str	r3, [r6, #0]
 80137ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80137b0:	4607      	mov	r7, r0
 80137b2:	460c      	mov	r4, r1
 80137b4:	b10a      	cbz	r2, 80137ba <_printf_common+0x26>
 80137b6:	3301      	adds	r3, #1
 80137b8:	6033      	str	r3, [r6, #0]
 80137ba:	6823      	ldr	r3, [r4, #0]
 80137bc:	0699      	lsls	r1, r3, #26
 80137be:	bf42      	ittt	mi
 80137c0:	6833      	ldrmi	r3, [r6, #0]
 80137c2:	3302      	addmi	r3, #2
 80137c4:	6033      	strmi	r3, [r6, #0]
 80137c6:	6825      	ldr	r5, [r4, #0]
 80137c8:	f015 0506 	ands.w	r5, r5, #6
 80137cc:	d106      	bne.n	80137dc <_printf_common+0x48>
 80137ce:	f104 0a19 	add.w	sl, r4, #25
 80137d2:	68e3      	ldr	r3, [r4, #12]
 80137d4:	6832      	ldr	r2, [r6, #0]
 80137d6:	1a9b      	subs	r3, r3, r2
 80137d8:	42ab      	cmp	r3, r5
 80137da:	dc26      	bgt.n	801382a <_printf_common+0x96>
 80137dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80137e0:	6822      	ldr	r2, [r4, #0]
 80137e2:	3b00      	subs	r3, #0
 80137e4:	bf18      	it	ne
 80137e6:	2301      	movne	r3, #1
 80137e8:	0692      	lsls	r2, r2, #26
 80137ea:	d42b      	bmi.n	8013844 <_printf_common+0xb0>
 80137ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80137f0:	4641      	mov	r1, r8
 80137f2:	4638      	mov	r0, r7
 80137f4:	47c8      	blx	r9
 80137f6:	3001      	adds	r0, #1
 80137f8:	d01e      	beq.n	8013838 <_printf_common+0xa4>
 80137fa:	6823      	ldr	r3, [r4, #0]
 80137fc:	6922      	ldr	r2, [r4, #16]
 80137fe:	f003 0306 	and.w	r3, r3, #6
 8013802:	2b04      	cmp	r3, #4
 8013804:	bf02      	ittt	eq
 8013806:	68e5      	ldreq	r5, [r4, #12]
 8013808:	6833      	ldreq	r3, [r6, #0]
 801380a:	1aed      	subeq	r5, r5, r3
 801380c:	68a3      	ldr	r3, [r4, #8]
 801380e:	bf0c      	ite	eq
 8013810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013814:	2500      	movne	r5, #0
 8013816:	4293      	cmp	r3, r2
 8013818:	bfc4      	itt	gt
 801381a:	1a9b      	subgt	r3, r3, r2
 801381c:	18ed      	addgt	r5, r5, r3
 801381e:	2600      	movs	r6, #0
 8013820:	341a      	adds	r4, #26
 8013822:	42b5      	cmp	r5, r6
 8013824:	d11a      	bne.n	801385c <_printf_common+0xc8>
 8013826:	2000      	movs	r0, #0
 8013828:	e008      	b.n	801383c <_printf_common+0xa8>
 801382a:	2301      	movs	r3, #1
 801382c:	4652      	mov	r2, sl
 801382e:	4641      	mov	r1, r8
 8013830:	4638      	mov	r0, r7
 8013832:	47c8      	blx	r9
 8013834:	3001      	adds	r0, #1
 8013836:	d103      	bne.n	8013840 <_printf_common+0xac>
 8013838:	f04f 30ff 	mov.w	r0, #4294967295
 801383c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013840:	3501      	adds	r5, #1
 8013842:	e7c6      	b.n	80137d2 <_printf_common+0x3e>
 8013844:	18e1      	adds	r1, r4, r3
 8013846:	1c5a      	adds	r2, r3, #1
 8013848:	2030      	movs	r0, #48	@ 0x30
 801384a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801384e:	4422      	add	r2, r4
 8013850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8013854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8013858:	3302      	adds	r3, #2
 801385a:	e7c7      	b.n	80137ec <_printf_common+0x58>
 801385c:	2301      	movs	r3, #1
 801385e:	4622      	mov	r2, r4
 8013860:	4641      	mov	r1, r8
 8013862:	4638      	mov	r0, r7
 8013864:	47c8      	blx	r9
 8013866:	3001      	adds	r0, #1
 8013868:	d0e6      	beq.n	8013838 <_printf_common+0xa4>
 801386a:	3601      	adds	r6, #1
 801386c:	e7d9      	b.n	8013822 <_printf_common+0x8e>
	...

08013870 <_printf_i>:
 8013870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013874:	7e0f      	ldrb	r7, [r1, #24]
 8013876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8013878:	2f78      	cmp	r7, #120	@ 0x78
 801387a:	4691      	mov	r9, r2
 801387c:	4680      	mov	r8, r0
 801387e:	460c      	mov	r4, r1
 8013880:	469a      	mov	sl, r3
 8013882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8013886:	d807      	bhi.n	8013898 <_printf_i+0x28>
 8013888:	2f62      	cmp	r7, #98	@ 0x62
 801388a:	d80a      	bhi.n	80138a2 <_printf_i+0x32>
 801388c:	2f00      	cmp	r7, #0
 801388e:	f000 80d2 	beq.w	8013a36 <_printf_i+0x1c6>
 8013892:	2f58      	cmp	r7, #88	@ 0x58
 8013894:	f000 80b9 	beq.w	8013a0a <_printf_i+0x19a>
 8013898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801389c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80138a0:	e03a      	b.n	8013918 <_printf_i+0xa8>
 80138a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80138a6:	2b15      	cmp	r3, #21
 80138a8:	d8f6      	bhi.n	8013898 <_printf_i+0x28>
 80138aa:	a101      	add	r1, pc, #4	@ (adr r1, 80138b0 <_printf_i+0x40>)
 80138ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80138b0:	08013909 	.word	0x08013909
 80138b4:	0801391d 	.word	0x0801391d
 80138b8:	08013899 	.word	0x08013899
 80138bc:	08013899 	.word	0x08013899
 80138c0:	08013899 	.word	0x08013899
 80138c4:	08013899 	.word	0x08013899
 80138c8:	0801391d 	.word	0x0801391d
 80138cc:	08013899 	.word	0x08013899
 80138d0:	08013899 	.word	0x08013899
 80138d4:	08013899 	.word	0x08013899
 80138d8:	08013899 	.word	0x08013899
 80138dc:	08013a1d 	.word	0x08013a1d
 80138e0:	08013947 	.word	0x08013947
 80138e4:	080139d7 	.word	0x080139d7
 80138e8:	08013899 	.word	0x08013899
 80138ec:	08013899 	.word	0x08013899
 80138f0:	08013a3f 	.word	0x08013a3f
 80138f4:	08013899 	.word	0x08013899
 80138f8:	08013947 	.word	0x08013947
 80138fc:	08013899 	.word	0x08013899
 8013900:	08013899 	.word	0x08013899
 8013904:	080139df 	.word	0x080139df
 8013908:	6833      	ldr	r3, [r6, #0]
 801390a:	1d1a      	adds	r2, r3, #4
 801390c:	681b      	ldr	r3, [r3, #0]
 801390e:	6032      	str	r2, [r6, #0]
 8013910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8013914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8013918:	2301      	movs	r3, #1
 801391a:	e09d      	b.n	8013a58 <_printf_i+0x1e8>
 801391c:	6833      	ldr	r3, [r6, #0]
 801391e:	6820      	ldr	r0, [r4, #0]
 8013920:	1d19      	adds	r1, r3, #4
 8013922:	6031      	str	r1, [r6, #0]
 8013924:	0606      	lsls	r6, r0, #24
 8013926:	d501      	bpl.n	801392c <_printf_i+0xbc>
 8013928:	681d      	ldr	r5, [r3, #0]
 801392a:	e003      	b.n	8013934 <_printf_i+0xc4>
 801392c:	0645      	lsls	r5, r0, #25
 801392e:	d5fb      	bpl.n	8013928 <_printf_i+0xb8>
 8013930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8013934:	2d00      	cmp	r5, #0
 8013936:	da03      	bge.n	8013940 <_printf_i+0xd0>
 8013938:	232d      	movs	r3, #45	@ 0x2d
 801393a:	426d      	negs	r5, r5
 801393c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013940:	4859      	ldr	r0, [pc, #356]	@ (8013aa8 <_printf_i+0x238>)
 8013942:	230a      	movs	r3, #10
 8013944:	e011      	b.n	801396a <_printf_i+0xfa>
 8013946:	6821      	ldr	r1, [r4, #0]
 8013948:	6833      	ldr	r3, [r6, #0]
 801394a:	0608      	lsls	r0, r1, #24
 801394c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013950:	d402      	bmi.n	8013958 <_printf_i+0xe8>
 8013952:	0649      	lsls	r1, r1, #25
 8013954:	bf48      	it	mi
 8013956:	b2ad      	uxthmi	r5, r5
 8013958:	2f6f      	cmp	r7, #111	@ 0x6f
 801395a:	4853      	ldr	r0, [pc, #332]	@ (8013aa8 <_printf_i+0x238>)
 801395c:	6033      	str	r3, [r6, #0]
 801395e:	bf14      	ite	ne
 8013960:	230a      	movne	r3, #10
 8013962:	2308      	moveq	r3, #8
 8013964:	2100      	movs	r1, #0
 8013966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801396a:	6866      	ldr	r6, [r4, #4]
 801396c:	60a6      	str	r6, [r4, #8]
 801396e:	2e00      	cmp	r6, #0
 8013970:	bfa2      	ittt	ge
 8013972:	6821      	ldrge	r1, [r4, #0]
 8013974:	f021 0104 	bicge.w	r1, r1, #4
 8013978:	6021      	strge	r1, [r4, #0]
 801397a:	b90d      	cbnz	r5, 8013980 <_printf_i+0x110>
 801397c:	2e00      	cmp	r6, #0
 801397e:	d04b      	beq.n	8013a18 <_printf_i+0x1a8>
 8013980:	4616      	mov	r6, r2
 8013982:	fbb5 f1f3 	udiv	r1, r5, r3
 8013986:	fb03 5711 	mls	r7, r3, r1, r5
 801398a:	5dc7      	ldrb	r7, [r0, r7]
 801398c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013990:	462f      	mov	r7, r5
 8013992:	42bb      	cmp	r3, r7
 8013994:	460d      	mov	r5, r1
 8013996:	d9f4      	bls.n	8013982 <_printf_i+0x112>
 8013998:	2b08      	cmp	r3, #8
 801399a:	d10b      	bne.n	80139b4 <_printf_i+0x144>
 801399c:	6823      	ldr	r3, [r4, #0]
 801399e:	07df      	lsls	r7, r3, #31
 80139a0:	d508      	bpl.n	80139b4 <_printf_i+0x144>
 80139a2:	6923      	ldr	r3, [r4, #16]
 80139a4:	6861      	ldr	r1, [r4, #4]
 80139a6:	4299      	cmp	r1, r3
 80139a8:	bfde      	ittt	le
 80139aa:	2330      	movle	r3, #48	@ 0x30
 80139ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80139b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80139b4:	1b92      	subs	r2, r2, r6
 80139b6:	6122      	str	r2, [r4, #16]
 80139b8:	f8cd a000 	str.w	sl, [sp]
 80139bc:	464b      	mov	r3, r9
 80139be:	aa03      	add	r2, sp, #12
 80139c0:	4621      	mov	r1, r4
 80139c2:	4640      	mov	r0, r8
 80139c4:	f7ff fee6 	bl	8013794 <_printf_common>
 80139c8:	3001      	adds	r0, #1
 80139ca:	d14a      	bne.n	8013a62 <_printf_i+0x1f2>
 80139cc:	f04f 30ff 	mov.w	r0, #4294967295
 80139d0:	b004      	add	sp, #16
 80139d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139d6:	6823      	ldr	r3, [r4, #0]
 80139d8:	f043 0320 	orr.w	r3, r3, #32
 80139dc:	6023      	str	r3, [r4, #0]
 80139de:	4833      	ldr	r0, [pc, #204]	@ (8013aac <_printf_i+0x23c>)
 80139e0:	2778      	movs	r7, #120	@ 0x78
 80139e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80139e6:	6823      	ldr	r3, [r4, #0]
 80139e8:	6831      	ldr	r1, [r6, #0]
 80139ea:	061f      	lsls	r7, r3, #24
 80139ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80139f0:	d402      	bmi.n	80139f8 <_printf_i+0x188>
 80139f2:	065f      	lsls	r7, r3, #25
 80139f4:	bf48      	it	mi
 80139f6:	b2ad      	uxthmi	r5, r5
 80139f8:	6031      	str	r1, [r6, #0]
 80139fa:	07d9      	lsls	r1, r3, #31
 80139fc:	bf44      	itt	mi
 80139fe:	f043 0320 	orrmi.w	r3, r3, #32
 8013a02:	6023      	strmi	r3, [r4, #0]
 8013a04:	b11d      	cbz	r5, 8013a0e <_printf_i+0x19e>
 8013a06:	2310      	movs	r3, #16
 8013a08:	e7ac      	b.n	8013964 <_printf_i+0xf4>
 8013a0a:	4827      	ldr	r0, [pc, #156]	@ (8013aa8 <_printf_i+0x238>)
 8013a0c:	e7e9      	b.n	80139e2 <_printf_i+0x172>
 8013a0e:	6823      	ldr	r3, [r4, #0]
 8013a10:	f023 0320 	bic.w	r3, r3, #32
 8013a14:	6023      	str	r3, [r4, #0]
 8013a16:	e7f6      	b.n	8013a06 <_printf_i+0x196>
 8013a18:	4616      	mov	r6, r2
 8013a1a:	e7bd      	b.n	8013998 <_printf_i+0x128>
 8013a1c:	6833      	ldr	r3, [r6, #0]
 8013a1e:	6825      	ldr	r5, [r4, #0]
 8013a20:	6961      	ldr	r1, [r4, #20]
 8013a22:	1d18      	adds	r0, r3, #4
 8013a24:	6030      	str	r0, [r6, #0]
 8013a26:	062e      	lsls	r6, r5, #24
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	d501      	bpl.n	8013a30 <_printf_i+0x1c0>
 8013a2c:	6019      	str	r1, [r3, #0]
 8013a2e:	e002      	b.n	8013a36 <_printf_i+0x1c6>
 8013a30:	0668      	lsls	r0, r5, #25
 8013a32:	d5fb      	bpl.n	8013a2c <_printf_i+0x1bc>
 8013a34:	8019      	strh	r1, [r3, #0]
 8013a36:	2300      	movs	r3, #0
 8013a38:	6123      	str	r3, [r4, #16]
 8013a3a:	4616      	mov	r6, r2
 8013a3c:	e7bc      	b.n	80139b8 <_printf_i+0x148>
 8013a3e:	6833      	ldr	r3, [r6, #0]
 8013a40:	1d1a      	adds	r2, r3, #4
 8013a42:	6032      	str	r2, [r6, #0]
 8013a44:	681e      	ldr	r6, [r3, #0]
 8013a46:	6862      	ldr	r2, [r4, #4]
 8013a48:	2100      	movs	r1, #0
 8013a4a:	4630      	mov	r0, r6
 8013a4c:	f7ec fbe8 	bl	8000220 <memchr>
 8013a50:	b108      	cbz	r0, 8013a56 <_printf_i+0x1e6>
 8013a52:	1b80      	subs	r0, r0, r6
 8013a54:	6060      	str	r0, [r4, #4]
 8013a56:	6863      	ldr	r3, [r4, #4]
 8013a58:	6123      	str	r3, [r4, #16]
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8013a60:	e7aa      	b.n	80139b8 <_printf_i+0x148>
 8013a62:	6923      	ldr	r3, [r4, #16]
 8013a64:	4632      	mov	r2, r6
 8013a66:	4649      	mov	r1, r9
 8013a68:	4640      	mov	r0, r8
 8013a6a:	47d0      	blx	sl
 8013a6c:	3001      	adds	r0, #1
 8013a6e:	d0ad      	beq.n	80139cc <_printf_i+0x15c>
 8013a70:	6823      	ldr	r3, [r4, #0]
 8013a72:	079b      	lsls	r3, r3, #30
 8013a74:	d413      	bmi.n	8013a9e <_printf_i+0x22e>
 8013a76:	68e0      	ldr	r0, [r4, #12]
 8013a78:	9b03      	ldr	r3, [sp, #12]
 8013a7a:	4298      	cmp	r0, r3
 8013a7c:	bfb8      	it	lt
 8013a7e:	4618      	movlt	r0, r3
 8013a80:	e7a6      	b.n	80139d0 <_printf_i+0x160>
 8013a82:	2301      	movs	r3, #1
 8013a84:	4632      	mov	r2, r6
 8013a86:	4649      	mov	r1, r9
 8013a88:	4640      	mov	r0, r8
 8013a8a:	47d0      	blx	sl
 8013a8c:	3001      	adds	r0, #1
 8013a8e:	d09d      	beq.n	80139cc <_printf_i+0x15c>
 8013a90:	3501      	adds	r5, #1
 8013a92:	68e3      	ldr	r3, [r4, #12]
 8013a94:	9903      	ldr	r1, [sp, #12]
 8013a96:	1a5b      	subs	r3, r3, r1
 8013a98:	42ab      	cmp	r3, r5
 8013a9a:	dcf2      	bgt.n	8013a82 <_printf_i+0x212>
 8013a9c:	e7eb      	b.n	8013a76 <_printf_i+0x206>
 8013a9e:	2500      	movs	r5, #0
 8013aa0:	f104 0619 	add.w	r6, r4, #25
 8013aa4:	e7f5      	b.n	8013a92 <_printf_i+0x222>
 8013aa6:	bf00      	nop
 8013aa8:	08014689 	.word	0x08014689
 8013aac:	0801469a 	.word	0x0801469a

08013ab0 <memmove>:
 8013ab0:	4288      	cmp	r0, r1
 8013ab2:	b510      	push	{r4, lr}
 8013ab4:	eb01 0402 	add.w	r4, r1, r2
 8013ab8:	d902      	bls.n	8013ac0 <memmove+0x10>
 8013aba:	4284      	cmp	r4, r0
 8013abc:	4623      	mov	r3, r4
 8013abe:	d807      	bhi.n	8013ad0 <memmove+0x20>
 8013ac0:	1e43      	subs	r3, r0, #1
 8013ac2:	42a1      	cmp	r1, r4
 8013ac4:	d008      	beq.n	8013ad8 <memmove+0x28>
 8013ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013ace:	e7f8      	b.n	8013ac2 <memmove+0x12>
 8013ad0:	4402      	add	r2, r0
 8013ad2:	4601      	mov	r1, r0
 8013ad4:	428a      	cmp	r2, r1
 8013ad6:	d100      	bne.n	8013ada <memmove+0x2a>
 8013ad8:	bd10      	pop	{r4, pc}
 8013ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013ae2:	e7f7      	b.n	8013ad4 <memmove+0x24>

08013ae4 <_realloc_r>:
 8013ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ae8:	4680      	mov	r8, r0
 8013aea:	4615      	mov	r5, r2
 8013aec:	460c      	mov	r4, r1
 8013aee:	b921      	cbnz	r1, 8013afa <_realloc_r+0x16>
 8013af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013af4:	4611      	mov	r1, r2
 8013af6:	f7ff bbad 	b.w	8013254 <_malloc_r>
 8013afa:	b92a      	cbnz	r2, 8013b08 <_realloc_r+0x24>
 8013afc:	f7ff fca8 	bl	8013450 <_free_r>
 8013b00:	2400      	movs	r4, #0
 8013b02:	4620      	mov	r0, r4
 8013b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b08:	f000 f81a 	bl	8013b40 <_malloc_usable_size_r>
 8013b0c:	4285      	cmp	r5, r0
 8013b0e:	4606      	mov	r6, r0
 8013b10:	d802      	bhi.n	8013b18 <_realloc_r+0x34>
 8013b12:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8013b16:	d8f4      	bhi.n	8013b02 <_realloc_r+0x1e>
 8013b18:	4629      	mov	r1, r5
 8013b1a:	4640      	mov	r0, r8
 8013b1c:	f7ff fb9a 	bl	8013254 <_malloc_r>
 8013b20:	4607      	mov	r7, r0
 8013b22:	2800      	cmp	r0, #0
 8013b24:	d0ec      	beq.n	8013b00 <_realloc_r+0x1c>
 8013b26:	42b5      	cmp	r5, r6
 8013b28:	462a      	mov	r2, r5
 8013b2a:	4621      	mov	r1, r4
 8013b2c:	bf28      	it	cs
 8013b2e:	4632      	movcs	r2, r6
 8013b30:	f7ff fc80 	bl	8013434 <memcpy>
 8013b34:	4621      	mov	r1, r4
 8013b36:	4640      	mov	r0, r8
 8013b38:	f7ff fc8a 	bl	8013450 <_free_r>
 8013b3c:	463c      	mov	r4, r7
 8013b3e:	e7e0      	b.n	8013b02 <_realloc_r+0x1e>

08013b40 <_malloc_usable_size_r>:
 8013b40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b44:	1f18      	subs	r0, r3, #4
 8013b46:	2b00      	cmp	r3, #0
 8013b48:	bfbc      	itt	lt
 8013b4a:	580b      	ldrlt	r3, [r1, r0]
 8013b4c:	18c0      	addlt	r0, r0, r3
 8013b4e:	4770      	bx	lr

08013b50 <_init>:
 8013b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b52:	bf00      	nop
 8013b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b56:	bc08      	pop	{r3}
 8013b58:	469e      	mov	lr, r3
 8013b5a:	4770      	bx	lr

08013b5c <_fini>:
 8013b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5e:	bf00      	nop
 8013b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013b62:	bc08      	pop	{r3}
 8013b64:	469e      	mov	lr, r3
 8013b66:	4770      	bx	lr
